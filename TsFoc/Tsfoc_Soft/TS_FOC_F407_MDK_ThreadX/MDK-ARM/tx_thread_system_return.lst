


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ********************/
    2 00000000         ;/*                                                     
                                          */
    3 00000000         ;/*       Copyright (c) Microsoft Corporation. All right
                       s reserved.        */
    4 00000000         ;/*                                                     
                                          */
    5 00000000         ;/*       This software is licensed under the Microsoft 
                       Software License   */
    6 00000000         ;/*       Terms for Microsoft Azure RTOS. Full text of t
                       he license can be  */
    7 00000000         ;/*       found in the LICENSE file at https://aka.ms/Az
                       ureRTOS_EULA       */
    8 00000000         ;/*       and in the root directory of this software.   
                                          */
    9 00000000         ;/*                                                     
                                          */
   10 00000000         ;/******************************************************
                       ********************/
   11 00000000         ;
   12 00000000         ;
   13 00000000         ;/******************************************************
                       ********************/
   14 00000000         ;/******************************************************
                       ********************/
   15 00000000         ;/**                                                    
                                          */
   16 00000000         ;/** ThreadX Component                                  
                                          */
   17 00000000         ;/**                                                    
                                          */
   18 00000000         ;/**   Thread                                           
                                          */
   19 00000000         ;/**                                                    
                                          */
   20 00000000         ;/******************************************************
                       ********************/
   21 00000000         ;/******************************************************
                       ********************/
   22 00000000         ;
   23 00000000         ;
   24 00000000                 AREA             ||.text||, CODE, READONLY
   25 00000000         ;/******************************************************
                       ********************/
   26 00000000         ;/*                                                     
                                          */
   27 00000000         ;/*  FUNCTION                                           
                           RELEASE        */
   28 00000000         ;/*                                                     
                                          */
   29 00000000         ;/*    _tx_thread_system_return                         
                        Cortex-M4/AC5     */
   30 00000000         ;/*                                                     
                             6.1          */
   31 00000000         ;/*  AUTHOR                                             
                                          */
   32 00000000         ;/*                                                     
                                          */



ARM Macro Assembler    Page 2 


   33 00000000         ;/*    William E. Lamie, Microsoft Corporation          
                                          */
   34 00000000         ;/*                                                     
                                          */
   35 00000000         ;/*  DESCRIPTION                                        
                                          */
   36 00000000         ;/*                                                     
                                          */
   37 00000000         ;/*    This function is target processor specific.  It i
                       s used to transfer */
   38 00000000         ;/*    control from a thread back to the ThreadX system.
                         Only a           */
   39 00000000         ;/*    minimal context is saved since the compiler assum
                       es temp registers  */
   40 00000000         ;/*    are going to get slicked by a function call anywa
                       y.                 */
   41 00000000         ;/*                                                     
                                          */
   42 00000000         ;/*  INPUT                                              
                                          */
   43 00000000         ;/*                                                     
                                          */
   44 00000000         ;/*    None                                             
                                          */
   45 00000000         ;/*                                                     
                                          */
   46 00000000         ;/*  OUTPUT                                             
                                          */
   47 00000000         ;/*                                                     
                                          */
   48 00000000         ;/*    None                                             
                                          */
   49 00000000         ;/*                                                     
                                          */
   50 00000000         ;/*  CALLS                                              
                                          */
   51 00000000         ;/*                                                     
                                          */
   52 00000000         ;/*    _tx_thread_schedule                   Thread sche
                       duling loop        */
   53 00000000         ;/*                                                     
                                          */
   54 00000000         ;/*  CALLED BY                                          
                                          */
   55 00000000         ;/*                                                     
                                          */
   56 00000000         ;/*    ThreadX components                               
                                          */
   57 00000000         ;/*                                                     
                                          */
   58 00000000         ;/*  RELEASE HISTORY                                    
                                          */
   59 00000000         ;/*                                                     
                                          */
   60 00000000         ;/*    DATE              NAME                      DESCR
                       IPTION             */
   61 00000000         ;/*                                                     
                                          */
   62 00000000         ;/*  09-30-2020     William E. Lamie         Initial Ver



ARM Macro Assembler    Page 3 


                       sion 6.1           */
   63 00000000         ;/*                                                     
                                          */
   64 00000000         ;/******************************************************
                       ********************/
   65 00000000         ;VOID   _tx_thread_system_return(VOID)
   66 00000000         ;{
   67 00000000                 EXPORT           _tx_thread_system_return
   68 00000000         _tx_thread_system_return
   69 00000000         ;
   70 00000000         ;    /* Return to real scheduler via PendSV. Note that t
                       his routine is often
   71 00000000         ;       replaced with in-line assembly in tx_port.h to i
                       mproved performance.  */
   72 00000000         ;
   73 00000000 F04F 5080       MOV              r0, #0x10000000 ; Load PENDSVSE
                                                            T bit
   74 00000004 F04F 21E0       MOV              r1, #0xE000E000 
                                                            ; Load NVIC base
   75 00000008 F8C1 0D04       STR              r0, [r1, #0xD04] ; Set PENDSVBI
                                                            T in ICSR
   76 0000000C F3EF 8005       MRS              r0, IPSR    ; Pickup IPSR
   77 00000010 2800            CMP              r0, #0      ; Is it a thread re
                                                            turning?
   78 00000012 D104            BNE              _isr_context ; If ISR, skip int
                                                            errupt enable
   79 00000014 F3EF 8110       MRS              r1, PRIMASK ; Thread context re
                                                            turning, pickup PRI
                                                            MASK
   80 00000018 B662            CPSIE            i           ; Enable interrupts
                                                            
   81 0000001A F381 8810       MSR              PRIMASK, r1 ; Restore original 
                                                            interrupt posture
   82 0000001E         _isr_context
   83 0000001E 4770            BX               lr          ; Return to caller
   84 00000020         ;}
   85 00000020                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=universal_board_f407vet6\tx_thread_system_return.d -ouniversal_
board_f407vet6\tx_thread_system_return.o -ID:\Laboratory_Data\Competition_mater
ials\robotac_2024\SDK\Tracked_vehicle\ThreadX_F4\MDK-ARM\RTE -I"C:\Program File
s\software\MDK\ARM\CMSIS\5.0.1\CMSIS\Include" --predefine="__MICROLIB SETA 1" -
-predefine="__UVISION_VERSION SETA 514" --predefine="_RTE_ SETA 1" --list=tx_th
read_system_return.lst ..\port\src\tx_thread_system_return.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

_isr_context 0000001E

Symbol: _isr_context
   Definitions
      At line 82 in file ..\port\src\tx_thread_system_return.s
   Uses
      At line 78 in file ..\port\src\tx_thread_system_return.s
Comment: _isr_context used once
_tx_thread_system_return 00000000

Symbol: _tx_thread_system_return
   Definitions
      At line 68 in file ..\port\src\tx_thread_system_return.s
   Uses
      At line 67 in file ..\port\src\tx_thread_system_return.s
Comment: _tx_thread_system_return used once
|.text| 00000000

Symbol: |.text|
   Definitions
      At line 24 in file ..\port\src\tx_thread_system_return.s
   Uses
      None
Comment: |.text| unused
3 symbols
337 symbols in table
