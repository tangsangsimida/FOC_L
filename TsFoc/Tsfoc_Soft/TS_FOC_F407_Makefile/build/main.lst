ARM GAS  /tmp/ccQiOSpO.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Core/Src/main.c"
  20              		.section	.text.__io_putchar,"ax",%progbits
  21              		.align	1
  22              		.global	__io_putchar
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	__io_putchar:
  28              	.LVL0:
  29              	.LFB242:
   1:./Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:./Core/Src/main.c **** /**
   3:./Core/Src/main.c ****   ******************************************************************************
   4:./Core/Src/main.c ****   * @file           : main.c
   5:./Core/Src/main.c ****   * @brief          : Main program body
   6:./Core/Src/main.c ****   ******************************************************************************
   7:./Core/Src/main.c ****   * @attention
   8:./Core/Src/main.c ****   *
   9:./Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:./Core/Src/main.c ****   * All rights reserved.
  11:./Core/Src/main.c ****   *
  12:./Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:./Core/Src/main.c ****   * in the root directory of this software component.
  14:./Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:./Core/Src/main.c ****   *
  16:./Core/Src/main.c ****   ******************************************************************************
  17:./Core/Src/main.c ****   */
  18:./Core/Src/main.c **** /* USER CODE END Header */
  19:./Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:./Core/Src/main.c **** #include "main.h"
  21:./Core/Src/main.c **** #include "adc.h"
  22:./Core/Src/main.c **** #include "can.h"
  23:./Core/Src/main.c **** #include "crc.h"
  24:./Core/Src/main.c **** #include "dma.h"
  25:./Core/Src/main.c **** #include "i2c.h"
  26:./Core/Src/main.c **** #include "rng.h"
  27:./Core/Src/main.c **** #include "spi.h"
  28:./Core/Src/main.c **** #include "tim.h"
  29:./Core/Src/main.c **** #include "usart.h"
ARM GAS  /tmp/ccQiOSpO.s 			page 2


  30:./Core/Src/main.c **** #include "gpio.h"
  31:./Core/Src/main.c **** 
  32:./Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  33:./Core/Src/main.c **** /* USER CODE BEGIN Includes */
  34:./Core/Src/main.c **** 
  35:./Core/Src/main.c **** #include "stdio.h"
  36:./Core/Src/main.c **** #include "as5600.h"
  37:./Core/Src/main.c **** #include "pid.h"
  38:./Core/Src/main.c **** #include "inlinecurrent.h"
  39:./Core/Src/main.c **** #include "lowpass_filter.h"
  40:./Core/Src/main.c **** #include "ts_foc.h"
  41:./Core/Src/main.c **** #include "user_api.h"
  42:./Core/Src/main.c **** /* USER CODE END Includes */
  43:./Core/Src/main.c **** 
  44:./Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  45:./Core/Src/main.c **** /* USER CODE BEGIN PTD */
  46:./Core/Src/main.c **** 
  47:./Core/Src/main.c **** /* USER CODE END PTD */
  48:./Core/Src/main.c **** 
  49:./Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  50:./Core/Src/main.c **** /* USER CODE BEGIN PD */
  51:./Core/Src/main.c **** // 通用重定向头文件或代码段
  52:./Core/Src/main.c **** #ifdef __GNUC__
  53:./Core/Src/main.c ****     #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  54:./Core/Src/main.c **** #else
  55:./Core/Src/main.c ****     #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
  56:./Core/Src/main.c **** #endif
  57:./Core/Src/main.c **** 
  58:./Core/Src/main.c **** PUTCHAR_PROTOTYPE
  59:./Core/Src/main.c **** {
  30              		.loc 1 59 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 59 1 is_stmt 0 view .LVU1
  35 0000 00B5     		push	{lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 14, -4
  39 0002 83B0     		sub	sp, sp, #12
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42 0004 0190     		str	r0, [sp, #4]
  60:./Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
  43              		.loc 1 60 5 is_stmt 1 view .LVU2
  44 0006 4FF0FF33 		mov	r3, #-1
  45 000a 0122     		movs	r2, #1
  46 000c 01A9     		add	r1, sp, #4
  47 000e 0348     		ldr	r0, .L3
  48              	.LVL1:
  49              		.loc 1 60 5 is_stmt 0 view .LVU3
  50 0010 FFF7FEFF 		bl	HAL_UART_Transmit
  51              	.LVL2:
  61:./Core/Src/main.c ****     return ch;
  52              		.loc 1 61 5 is_stmt 1 view .LVU4
  62:./Core/Src/main.c **** }
  53              		.loc 1 62 1 is_stmt 0 view .LVU5
ARM GAS  /tmp/ccQiOSpO.s 			page 3


  54 0014 0198     		ldr	r0, [sp, #4]
  55 0016 03B0     		add	sp, sp, #12
  56              	.LCFI2:
  57              		.cfi_def_cfa_offset 4
  58              		@ sp needed
  59 0018 5DF804FB 		ldr	pc, [sp], #4
  60              	.L4:
  61              		.align	2
  62              	.L3:
  63 001c 00000000 		.word	huart1
  64              		.cfi_endproc
  65              	.LFE242:
  67              		.section	.text._write,"ax",%progbits
  68              		.align	1
  69              		.global	_write
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  74              	_write:
  75              	.LVL3:
  76              	.LFB243:
  63:./Core/Src/main.c **** 
  64:./Core/Src/main.c **** // GCC 特定部分
  65:./Core/Src/main.c **** #ifdef __GNUC__
  66:./Core/Src/main.c **** int _write(int fd, char *ptr, int len)
  67:./Core/Src/main.c **** {
  77              		.loc 1 67 1 is_stmt 1 view -0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		.loc 1 67 1 is_stmt 0 view .LVU7
  82 0000 10B5     		push	{r4, lr}
  83              	.LCFI3:
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 4, -8
  86              		.cfi_offset 14, -4
  87 0002 1446     		mov	r4, r2
  68:./Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
  88              		.loc 1 68 5 is_stmt 1 view .LVU8
  89 0004 4FF0FF33 		mov	r3, #-1
  90 0008 92B2     		uxth	r2, r2
  91              	.LVL4:
  92              		.loc 1 68 5 is_stmt 0 view .LVU9
  93 000a 0248     		ldr	r0, .L7
  94              	.LVL5:
  95              		.loc 1 68 5 view .LVU10
  96 000c FFF7FEFF 		bl	HAL_UART_Transmit
  97              	.LVL6:
  69:./Core/Src/main.c ****     return len;
  98              		.loc 1 69 5 is_stmt 1 view .LVU11
  70:./Core/Src/main.c **** }
  99              		.loc 1 70 1 is_stmt 0 view .LVU12
 100 0010 2046     		mov	r0, r4
 101 0012 10BD     		pop	{r4, pc}
 102              	.LVL7:
 103              	.L8:
 104              		.loc 1 70 1 view .LVU13
ARM GAS  /tmp/ccQiOSpO.s 			page 4


 105              		.align	2
 106              	.L7:
 107 0014 00000000 		.word	huart1
 108              		.cfi_endproc
 109              	.LFE243:
 111              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 112              		.align	1
 113              		.global	HAL_TIM_PeriodElapsedCallback
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	HAL_TIM_PeriodElapsedCallback:
 119              	.LVL8:
 120              	.LFB246:
  71:./Core/Src/main.c **** #endif
  72:./Core/Src/main.c **** 
  73:./Core/Src/main.c **** /* USER CODE END PD */
  74:./Core/Src/main.c **** 
  75:./Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  76:./Core/Src/main.c **** /* USER CODE BEGIN PM */
  77:./Core/Src/main.c **** 
  78:./Core/Src/main.c **** 
  79:./Core/Src/main.c **** 
  80:./Core/Src/main.c **** /* USER CODE END PM */
  81:./Core/Src/main.c **** 
  82:./Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  83:./Core/Src/main.c **** 
  84:./Core/Src/main.c **** /* USER CODE BEGIN PV */
  85:./Core/Src/main.c **** 
  86:./Core/Src/main.c **** /* USER CODE END PV */
  87:./Core/Src/main.c **** 
  88:./Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  89:./Core/Src/main.c **** void SystemClock_Config(void);
  90:./Core/Src/main.c **** /* USER CODE BEGIN PFP */
  91:./Core/Src/main.c **** 
  92:./Core/Src/main.c **** /* USER CODE END PFP */
  93:./Core/Src/main.c **** 
  94:./Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  95:./Core/Src/main.c **** /* USER CODE BEGIN 0 */
  96:./Core/Src/main.c **** 
  97:./Core/Src/main.c **** /* USER CODE END 0 */
  98:./Core/Src/main.c **** 
  99:./Core/Src/main.c **** /**
 100:./Core/Src/main.c ****   * @brief  The application entry point.
 101:./Core/Src/main.c ****   * @retval int
 102:./Core/Src/main.c ****   */
 103:./Core/Src/main.c **** int main(void)
 104:./Core/Src/main.c **** {
 105:./Core/Src/main.c **** 
 106:./Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 107:./Core/Src/main.c **** 
 108:./Core/Src/main.c ****   /* USER CODE END 1 */
 109:./Core/Src/main.c **** 
 110:./Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 111:./Core/Src/main.c **** 
 112:./Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 113:./Core/Src/main.c ****   HAL_Init();
ARM GAS  /tmp/ccQiOSpO.s 			page 5


 114:./Core/Src/main.c **** 
 115:./Core/Src/main.c ****   /* USER CODE BEGIN Init */
 116:./Core/Src/main.c **** 
 117:./Core/Src/main.c ****   /* USER CODE END Init */
 118:./Core/Src/main.c **** 
 119:./Core/Src/main.c ****   /* Configure the system clock */
 120:./Core/Src/main.c ****   SystemClock_Config();
 121:./Core/Src/main.c **** 
 122:./Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 123:./Core/Src/main.c **** 
 124:./Core/Src/main.c ****   /* USER CODE END SysInit */
 125:./Core/Src/main.c **** 
 126:./Core/Src/main.c ****   /* Initialize all configured peripherals */
 127:./Core/Src/main.c ****   MX_GPIO_Init();
 128:./Core/Src/main.c ****   MX_DMA_Init();
 129:./Core/Src/main.c ****   MX_ADC1_Init();
 130:./Core/Src/main.c ****   MX_CAN1_Init();
 131:./Core/Src/main.c ****   MX_CAN2_Init();
 132:./Core/Src/main.c ****   MX_I2C1_Init();
 133:./Core/Src/main.c ****   MX_I2C2_Init();
 134:./Core/Src/main.c ****   MX_SPI1_Init();
 135:./Core/Src/main.c ****   MX_SPI2_Init();
 136:./Core/Src/main.c ****   MX_TIM4_Init();
 137:./Core/Src/main.c ****   MX_TIM8_Init();
 138:./Core/Src/main.c ****   MX_USART1_UART_Init();
 139:./Core/Src/main.c ****   MX_CRC_Init();
 140:./Core/Src/main.c ****   MX_RNG_Init();
 141:./Core/Src/main.c ****   MX_USART2_UART_Init();
 142:./Core/Src/main.c ****   MX_USART3_UART_Init();
 143:./Core/Src/main.c ****   MX_TIM1_Init();
 144:./Core/Src/main.c ****   MX_I2C3_Init();
 145:./Core/Src/main.c ****   MX_SPI3_Init();
 146:./Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 147:./Core/Src/main.c **** 
 148:./Core/Src/main.c ****   Ts_Foc_Init(&motor1, 1, 7, -1, 12);
 149:./Core/Src/main.c ****   AS5600_Init(motor1->As5600_Sensor,&AS5600_I2C_Handle);
 150:./Core/Src/main.c ****   CurrSense_Init(motor1->Inlinecurrent,0,1,2,&CURRENT_ADC_HANLDE);
 151:./Core/Src/main.c ****   // Pid_Ang_Init(motor1->Pid_Ang,0.5,0,0.003,10000,0.08);
 152:./Core/Src/main.c ****   // Pid_Vel_Init(motor1->Pid_Vel,3,2,0,10000,0.5);
 153:./Core/Src/main.c ****   // Pid_Curr_Init(motor1->Pid_Curr,0.5,50,0,10000,12.6);
 154:./Core/Src/main.c **** 
 155:./Core/Src/main.c ****   // // 电流速度环PID参数设置
 156:./Core/Src/main.c ****   // Pid_Vel_Init(motor1->Pid_Vel,3,2,0,10000,0.1);
 157:./Core/Src/main.c ****   // Pid_Curr_Init(motor1->Pid_Curr,1.25,50,0,10000,12.6);
 158:./Core/Src/main.c **** 
 159:./Core/Src/main.c ****   // 力矩位置闭环PID参数
 160:./Core/Src/main.c ****   Pid_Ang_Init(motor1->Pid_Ang,0.5,0.1,0.003,100000,0.1);
 161:./Core/Src/main.c ****   Pid_Curr_Init(motor1->Pid_Curr,1.25,50,0,100000,12.6);
 162:./Core/Src/main.c **** 
 163:./Core/Src/main.c ****   // // 电流环单环PID参数设置
 164:./Core/Src/main.c ****   // Pid_Curr_Init(motor1->Pid_Curr,5,200,0,10000,12.6);
 165:./Core/Src/main.c **** 
 166:./Core/Src/main.c ****   Lowpass_Filter_Init(motor1->Lowpass_Filter_Vel,0.01);
 167:./Core/Src/main.c ****   Lowpass_Filter_Init(motor1->Lowpass_Filter_Curr,0.05);
 168:./Core/Src/main.c ****   /* USER CODE END 2 */
 169:./Core/Src/main.c ****   
 170:./Core/Src/main.c ****   /* Infinite loop */
ARM GAS  /tmp/ccQiOSpO.s 			page 6


 171:./Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 172:./Core/Src/main.c **** 
 173:./Core/Src/main.c ****   aligns_Motor_Zero_Angle(motor1);  //对电机进行零点对齐
 174:./Core/Src/main.c ****   while (1)
 175:./Core/Src/main.c ****   {
 176:./Core/Src/main.c ****     user_main();
 177:./Core/Src/main.c ****     /* USER CODE END WHILE */
 178:./Core/Src/main.c **** 
 179:./Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 180:./Core/Src/main.c ****   }
 181:./Core/Src/main.c ****   /* USER CODE END 3 */
 182:./Core/Src/main.c **** }
 183:./Core/Src/main.c **** 
 184:./Core/Src/main.c **** /**
 185:./Core/Src/main.c ****   * @brief System Clock Configuration
 186:./Core/Src/main.c ****   * @retval None
 187:./Core/Src/main.c ****   */
 188:./Core/Src/main.c **** void SystemClock_Config(void)
 189:./Core/Src/main.c **** {
 190:./Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 191:./Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 192:./Core/Src/main.c **** 
 193:./Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 194:./Core/Src/main.c ****   */
 195:./Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 196:./Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 197:./Core/Src/main.c **** 
 198:./Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 199:./Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 200:./Core/Src/main.c ****   */
 201:./Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 202:./Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 203:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 204:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 205:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 206:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 207:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 208:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 209:./Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 210:./Core/Src/main.c ****   {
 211:./Core/Src/main.c ****     Error_Handler();
 212:./Core/Src/main.c ****   }
 213:./Core/Src/main.c **** 
 214:./Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 215:./Core/Src/main.c ****   */
 216:./Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 217:./Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 218:./Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 219:./Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 220:./Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 221:./Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 222:./Core/Src/main.c **** 
 223:./Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 224:./Core/Src/main.c ****   {
 225:./Core/Src/main.c ****     Error_Handler();
 226:./Core/Src/main.c ****   }
 227:./Core/Src/main.c **** }
ARM GAS  /tmp/ccQiOSpO.s 			page 7


 228:./Core/Src/main.c **** 
 229:./Core/Src/main.c **** /* USER CODE BEGIN 4 */
 230:./Core/Src/main.c **** 
 231:./Core/Src/main.c **** /* USER CODE END 4 */
 232:./Core/Src/main.c **** 
 233:./Core/Src/main.c **** /**
 234:./Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 235:./Core/Src/main.c ****   * @note   This function is called  when TIM13 interrupt took place, inside
 236:./Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 237:./Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 238:./Core/Src/main.c ****   * @param  htim : TIM handle
 239:./Core/Src/main.c ****   * @retval None
 240:./Core/Src/main.c ****   */
 241:./Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 242:./Core/Src/main.c **** {
 121              		.loc 1 242 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		.loc 1 242 1 is_stmt 0 view .LVU15
 126 0000 08B5     		push	{r3, lr}
 127              	.LCFI4:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 3, -8
 130              		.cfi_offset 14, -4
 243:./Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 244:./Core/Src/main.c **** 
 245:./Core/Src/main.c ****   /* USER CODE END Callback 0 */
 246:./Core/Src/main.c ****   if (htim->Instance == TIM13)
 131              		.loc 1 246 3 is_stmt 1 view .LVU16
 132              		.loc 1 246 11 is_stmt 0 view .LVU17
 133 0002 0268     		ldr	r2, [r0]
 134              		.loc 1 246 6 view .LVU18
 135 0004 034B     		ldr	r3, .L13
 136 0006 9A42     		cmp	r2, r3
 137 0008 00D0     		beq	.L12
 138              	.LVL9:
 139              	.L9:
 247:./Core/Src/main.c ****   {
 248:./Core/Src/main.c ****     HAL_IncTick();
 249:./Core/Src/main.c ****   }
 250:./Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 251:./Core/Src/main.c **** 
 252:./Core/Src/main.c ****   /* USER CODE END Callback 1 */
 253:./Core/Src/main.c **** }
 140              		.loc 1 253 1 view .LVU19
 141 000a 08BD     		pop	{r3, pc}
 142              	.LVL10:
 143              	.L12:
 248:./Core/Src/main.c ****   }
 144              		.loc 1 248 5 is_stmt 1 view .LVU20
 145 000c FFF7FEFF 		bl	HAL_IncTick
 146              	.LVL11:
 147              		.loc 1 253 1 is_stmt 0 view .LVU21
 148 0010 FBE7     		b	.L9
 149              	.L14:
 150 0012 00BF     		.align	2
ARM GAS  /tmp/ccQiOSpO.s 			page 8


 151              	.L13:
 152 0014 001C0040 		.word	1073748992
 153              		.cfi_endproc
 154              	.LFE246:
 156              		.section	.text.Error_Handler,"ax",%progbits
 157              		.align	1
 158              		.global	Error_Handler
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 163              	Error_Handler:
 164              	.LFB247:
 254:./Core/Src/main.c **** 
 255:./Core/Src/main.c **** /**
 256:./Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 257:./Core/Src/main.c ****   * @retval None
 258:./Core/Src/main.c ****   */
 259:./Core/Src/main.c **** void Error_Handler(void)
 260:./Core/Src/main.c **** {
 165              		.loc 1 260 1 is_stmt 1 view -0
 166              		.cfi_startproc
 167              		@ Volatile: function does not return.
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 261:./Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 262:./Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 263:./Core/Src/main.c ****   __disable_irq();
 171              		.loc 1 263 3 view .LVU23
 172              	.LBB4:
 173              	.LBI4:
 174              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
ARM GAS  /tmp/ccQiOSpO.s 			page 9


  26:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
ARM GAS  /tmp/ccQiOSpO.s 			page 10


  83:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:./Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
ARM GAS  /tmp/ccQiOSpO.s 			page 11


 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:./Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:./Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:./Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccQiOSpO.s 			page 12


 197:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:./Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:./Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
ARM GAS  /tmp/ccQiOSpO.s 			page 13


 254:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:./Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:./Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:./Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:./Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccQiOSpO.s 			page 14


 311:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:./Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:./Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:./Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:./Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:./Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:./Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccQiOSpO.s 			page 15


 368:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:./Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:./Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:./Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:./Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:./Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:./Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:./Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:./Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:./Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:./Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:./Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:./Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:./Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:./Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:./Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:./Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:./Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:./Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:./Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:./Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
ARM GAS  /tmp/ccQiOSpO.s 			page 16


 425:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:./Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:./Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:./Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:./Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:./Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:./Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/ccQiOSpO.s 			page 17


 482:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:./Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:./Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:./Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
ARM GAS  /tmp/ccQiOSpO.s 			page 18


 539:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:./Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:./Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:./Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:./Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:./Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:./Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:./Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:./Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccQiOSpO.s 			page 19


 596:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:./Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:./Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:./Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:./Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:./Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:./Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
ARM GAS  /tmp/ccQiOSpO.s 			page 20


 653:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:./Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
ARM GAS  /tmp/ccQiOSpO.s 			page 21


 710:./Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:./Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:./Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:./Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:./Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:./Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:./Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:./Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:./Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:./Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:./Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:./Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:./Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:./Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:./Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:./Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:./Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:./Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:./Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:./Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:./Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:./Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:./Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:./Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
ARM GAS  /tmp/ccQiOSpO.s 			page 22


 767:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccQiOSpO.s 			page 23


 824:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:./Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccQiOSpO.s 			page 24


 881:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:./Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:./Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:./Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccQiOSpO.s 			page 25


 938:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:./Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 175              		.loc 2 960 27 view .LVU24
 176              	.LBB5:
 961:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 177              		.loc 2 962 3 view .LVU25
 178              		.syntax unified
 179              	@ 962 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 180 0000 72B6     		cpsid i
 181              	@ 0 "" 2
 182              		.thumb
 183              		.syntax unified
 184              	.L16:
 185              	.LBE5:
 186              	.LBE4:
 264:./Core/Src/main.c ****   while (1)
 187              		.loc 1 264 3 view .LVU26
 265:./Core/Src/main.c ****   {
 266:./Core/Src/main.c ****   }
 188              		.loc 1 266 3 view .LVU27
 264:./Core/Src/main.c ****   while (1)
 189              		.loc 1 264 9 view .LVU28
 190 0002 FEE7     		b	.L16
 191              		.cfi_endproc
 192              	.LFE247:
 194              		.section	.text.SystemClock_Config,"ax",%progbits
 195              		.align	1
 196              		.global	SystemClock_Config
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 201              	SystemClock_Config:
 202              	.LFB245:
 189:./Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 203              		.loc 1 189 1 view -0
ARM GAS  /tmp/ccQiOSpO.s 			page 26


 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 80
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 00B5     		push	{lr}
 208              	.LCFI5:
 209              		.cfi_def_cfa_offset 4
 210              		.cfi_offset 14, -4
 211 0002 95B0     		sub	sp, sp, #84
 212              	.LCFI6:
 213              		.cfi_def_cfa_offset 88
 190:./Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 214              		.loc 1 190 3 view .LVU30
 190:./Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 215              		.loc 1 190 22 is_stmt 0 view .LVU31
 216 0004 3022     		movs	r2, #48
 217 0006 0021     		movs	r1, #0
 218 0008 08A8     		add	r0, sp, #32
 219 000a FFF7FEFF 		bl	memset
 220              	.LVL12:
 191:./Core/Src/main.c **** 
 221              		.loc 1 191 3 is_stmt 1 view .LVU32
 191:./Core/Src/main.c **** 
 222              		.loc 1 191 22 is_stmt 0 view .LVU33
 223 000e 0023     		movs	r3, #0
 224 0010 0393     		str	r3, [sp, #12]
 225 0012 0493     		str	r3, [sp, #16]
 226 0014 0593     		str	r3, [sp, #20]
 227 0016 0693     		str	r3, [sp, #24]
 228 0018 0793     		str	r3, [sp, #28]
 195:./Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 229              		.loc 1 195 3 is_stmt 1 view .LVU34
 230              	.LBB6:
 195:./Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 231              		.loc 1 195 3 view .LVU35
 232 001a 0193     		str	r3, [sp, #4]
 195:./Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 233              		.loc 1 195 3 view .LVU36
 234 001c 204A     		ldr	r2, .L23
 235 001e 116C     		ldr	r1, [r2, #64]
 236 0020 41F08051 		orr	r1, r1, #268435456
 237 0024 1164     		str	r1, [r2, #64]
 195:./Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 238              		.loc 1 195 3 view .LVU37
 239 0026 126C     		ldr	r2, [r2, #64]
 240 0028 02F08052 		and	r2, r2, #268435456
 241 002c 0192     		str	r2, [sp, #4]
 195:./Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 242              		.loc 1 195 3 view .LVU38
 243 002e 019A     		ldr	r2, [sp, #4]
 244              	.LBE6:
 195:./Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 245              		.loc 1 195 3 view .LVU39
 196:./Core/Src/main.c **** 
 246              		.loc 1 196 3 view .LVU40
 247              	.LBB7:
 196:./Core/Src/main.c **** 
 248              		.loc 1 196 3 view .LVU41
ARM GAS  /tmp/ccQiOSpO.s 			page 27


 249 0030 0293     		str	r3, [sp, #8]
 196:./Core/Src/main.c **** 
 250              		.loc 1 196 3 view .LVU42
 251 0032 1C4B     		ldr	r3, .L23+4
 252 0034 1A68     		ldr	r2, [r3]
 253 0036 42F48042 		orr	r2, r2, #16384
 254 003a 1A60     		str	r2, [r3]
 196:./Core/Src/main.c **** 
 255              		.loc 1 196 3 view .LVU43
 256 003c 1B68     		ldr	r3, [r3]
 257 003e 03F48043 		and	r3, r3, #16384
 258 0042 0293     		str	r3, [sp, #8]
 196:./Core/Src/main.c **** 
 259              		.loc 1 196 3 view .LVU44
 260 0044 029B     		ldr	r3, [sp, #8]
 261              	.LBE7:
 196:./Core/Src/main.c **** 
 262              		.loc 1 196 3 view .LVU45
 201:./Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 263              		.loc 1 201 3 view .LVU46
 201:./Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 264              		.loc 1 201 36 is_stmt 0 view .LVU47
 265 0046 0123     		movs	r3, #1
 266 0048 0893     		str	r3, [sp, #32]
 202:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 267              		.loc 1 202 3 is_stmt 1 view .LVU48
 202:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 268              		.loc 1 202 30 is_stmt 0 view .LVU49
 269 004a 4FF48033 		mov	r3, #65536
 270 004e 0993     		str	r3, [sp, #36]
 203:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 271              		.loc 1 203 3 is_stmt 1 view .LVU50
 203:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 272              		.loc 1 203 34 is_stmt 0 view .LVU51
 273 0050 0223     		movs	r3, #2
 274 0052 0E93     		str	r3, [sp, #56]
 204:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 275              		.loc 1 204 3 is_stmt 1 view .LVU52
 204:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 276              		.loc 1 204 35 is_stmt 0 view .LVU53
 277 0054 4FF48002 		mov	r2, #4194304
 278 0058 0F92     		str	r2, [sp, #60]
 205:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 279              		.loc 1 205 3 is_stmt 1 view .LVU54
 205:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 280              		.loc 1 205 30 is_stmt 0 view .LVU55
 281 005a 0422     		movs	r2, #4
 282 005c 1092     		str	r2, [sp, #64]
 206:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 283              		.loc 1 206 3 is_stmt 1 view .LVU56
 206:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 284              		.loc 1 206 30 is_stmt 0 view .LVU57
 285 005e A822     		movs	r2, #168
 286 0060 1192     		str	r2, [sp, #68]
 207:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 287              		.loc 1 207 3 is_stmt 1 view .LVU58
 207:./Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
ARM GAS  /tmp/ccQiOSpO.s 			page 28


 288              		.loc 1 207 30 is_stmt 0 view .LVU59
 289 0062 1293     		str	r3, [sp, #72]
 208:./Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 290              		.loc 1 208 3 is_stmt 1 view .LVU60
 208:./Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 291              		.loc 1 208 30 is_stmt 0 view .LVU61
 292 0064 0723     		movs	r3, #7
 293 0066 1393     		str	r3, [sp, #76]
 209:./Core/Src/main.c ****   {
 294              		.loc 1 209 3 is_stmt 1 view .LVU62
 209:./Core/Src/main.c ****   {
 295              		.loc 1 209 7 is_stmt 0 view .LVU63
 296 0068 08A8     		add	r0, sp, #32
 297 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 298              	.LVL13:
 209:./Core/Src/main.c ****   {
 299              		.loc 1 209 6 discriminator 1 view .LVU64
 300 006e 98B9     		cbnz	r0, .L21
 216:./Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 301              		.loc 1 216 3 is_stmt 1 view .LVU65
 216:./Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 302              		.loc 1 216 31 is_stmt 0 view .LVU66
 303 0070 0F23     		movs	r3, #15
 304 0072 0393     		str	r3, [sp, #12]
 218:./Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 305              		.loc 1 218 3 is_stmt 1 view .LVU67
 218:./Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 306              		.loc 1 218 34 is_stmt 0 view .LVU68
 307 0074 0223     		movs	r3, #2
 308 0076 0493     		str	r3, [sp, #16]
 219:./Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 309              		.loc 1 219 3 is_stmt 1 view .LVU69
 219:./Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 310              		.loc 1 219 35 is_stmt 0 view .LVU70
 311 0078 0023     		movs	r3, #0
 312 007a 0593     		str	r3, [sp, #20]
 220:./Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 313              		.loc 1 220 3 is_stmt 1 view .LVU71
 220:./Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 314              		.loc 1 220 36 is_stmt 0 view .LVU72
 315 007c 4FF4A053 		mov	r3, #5120
 316 0080 0693     		str	r3, [sp, #24]
 221:./Core/Src/main.c **** 
 317              		.loc 1 221 3 is_stmt 1 view .LVU73
 221:./Core/Src/main.c **** 
 318              		.loc 1 221 36 is_stmt 0 view .LVU74
 319 0082 4FF48053 		mov	r3, #4096
 320 0086 0793     		str	r3, [sp, #28]
 223:./Core/Src/main.c ****   {
 321              		.loc 1 223 3 is_stmt 1 view .LVU75
 223:./Core/Src/main.c ****   {
 322              		.loc 1 223 7 is_stmt 0 view .LVU76
 323 0088 0521     		movs	r1, #5
 324 008a 03A8     		add	r0, sp, #12
 325 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 326              	.LVL14:
 223:./Core/Src/main.c ****   {
ARM GAS  /tmp/ccQiOSpO.s 			page 29


 327              		.loc 1 223 6 discriminator 1 view .LVU77
 328 0090 20B9     		cbnz	r0, .L22
 227:./Core/Src/main.c **** 
 329              		.loc 1 227 1 view .LVU78
 330 0092 15B0     		add	sp, sp, #84
 331              	.LCFI7:
 332              		.cfi_remember_state
 333              		.cfi_def_cfa_offset 4
 334              		@ sp needed
 335 0094 5DF804FB 		ldr	pc, [sp], #4
 336              	.L21:
 337              	.LCFI8:
 338              		.cfi_restore_state
 211:./Core/Src/main.c ****   }
 339              		.loc 1 211 5 is_stmt 1 view .LVU79
 340 0098 FFF7FEFF 		bl	Error_Handler
 341              	.LVL15:
 342              	.L22:
 225:./Core/Src/main.c ****   }
 343              		.loc 1 225 5 view .LVU80
 344 009c FFF7FEFF 		bl	Error_Handler
 345              	.LVL16:
 346              	.L24:
 347              		.align	2
 348              	.L23:
 349 00a0 00380240 		.word	1073887232
 350 00a4 00700040 		.word	1073770496
 351              		.cfi_endproc
 352              	.LFE245:
 354              		.section	.text.main,"ax",%progbits
 355              		.align	1
 356              		.global	main
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 361              	main:
 362              	.LFB244:
 104:./Core/Src/main.c **** 
 363              		.loc 1 104 1 view -0
 364              		.cfi_startproc
 365              		@ Volatile: function does not return.
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368 0000 00B5     		push	{lr}
 369              	.LCFI9:
 370              		.cfi_def_cfa_offset 4
 371              		.cfi_offset 14, -4
 372 0002 83B0     		sub	sp, sp, #12
 373              	.LCFI10:
 374              		.cfi_def_cfa_offset 16
 113:./Core/Src/main.c **** 
 375              		.loc 1 113 3 view .LVU82
 376 0004 FFF7FEFF 		bl	HAL_Init
 377              	.LVL17:
 120:./Core/Src/main.c **** 
 378              		.loc 1 120 3 view .LVU83
 379 0008 FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /tmp/ccQiOSpO.s 			page 30


 380              	.LVL18:
 127:./Core/Src/main.c ****   MX_DMA_Init();
 381              		.loc 1 127 3 view .LVU84
 382 000c FFF7FEFF 		bl	MX_GPIO_Init
 383              	.LVL19:
 128:./Core/Src/main.c ****   MX_ADC1_Init();
 384              		.loc 1 128 3 view .LVU85
 385 0010 FFF7FEFF 		bl	MX_DMA_Init
 386              	.LVL20:
 129:./Core/Src/main.c ****   MX_CAN1_Init();
 387              		.loc 1 129 3 view .LVU86
 388 0014 FFF7FEFF 		bl	MX_ADC1_Init
 389              	.LVL21:
 130:./Core/Src/main.c ****   MX_CAN2_Init();
 390              		.loc 1 130 3 view .LVU87
 391 0018 FFF7FEFF 		bl	MX_CAN1_Init
 392              	.LVL22:
 131:./Core/Src/main.c ****   MX_I2C1_Init();
 393              		.loc 1 131 3 view .LVU88
 394 001c FFF7FEFF 		bl	MX_CAN2_Init
 395              	.LVL23:
 132:./Core/Src/main.c ****   MX_I2C2_Init();
 396              		.loc 1 132 3 view .LVU89
 397 0020 FFF7FEFF 		bl	MX_I2C1_Init
 398              	.LVL24:
 133:./Core/Src/main.c ****   MX_SPI1_Init();
 399              		.loc 1 133 3 view .LVU90
 400 0024 FFF7FEFF 		bl	MX_I2C2_Init
 401              	.LVL25:
 134:./Core/Src/main.c ****   MX_SPI2_Init();
 402              		.loc 1 134 3 view .LVU91
 403 0028 FFF7FEFF 		bl	MX_SPI1_Init
 404              	.LVL26:
 135:./Core/Src/main.c ****   MX_TIM4_Init();
 405              		.loc 1 135 3 view .LVU92
 406 002c FFF7FEFF 		bl	MX_SPI2_Init
 407              	.LVL27:
 136:./Core/Src/main.c ****   MX_TIM8_Init();
 408              		.loc 1 136 3 view .LVU93
 409 0030 FFF7FEFF 		bl	MX_TIM4_Init
 410              	.LVL28:
 137:./Core/Src/main.c ****   MX_USART1_UART_Init();
 411              		.loc 1 137 3 view .LVU94
 412 0034 FFF7FEFF 		bl	MX_TIM8_Init
 413              	.LVL29:
 138:./Core/Src/main.c ****   MX_CRC_Init();
 414              		.loc 1 138 3 view .LVU95
 415 0038 FFF7FEFF 		bl	MX_USART1_UART_Init
 416              	.LVL30:
 139:./Core/Src/main.c ****   MX_RNG_Init();
 417              		.loc 1 139 3 view .LVU96
 418 003c FFF7FEFF 		bl	MX_CRC_Init
 419              	.LVL31:
 140:./Core/Src/main.c ****   MX_USART2_UART_Init();
 420              		.loc 1 140 3 view .LVU97
 421 0040 FFF7FEFF 		bl	MX_RNG_Init
 422              	.LVL32:
ARM GAS  /tmp/ccQiOSpO.s 			page 31


 141:./Core/Src/main.c ****   MX_USART3_UART_Init();
 423              		.loc 1 141 3 view .LVU98
 424 0044 FFF7FEFF 		bl	MX_USART2_UART_Init
 425              	.LVL33:
 142:./Core/Src/main.c ****   MX_TIM1_Init();
 426              		.loc 1 142 3 view .LVU99
 427 0048 FFF7FEFF 		bl	MX_USART3_UART_Init
 428              	.LVL34:
 143:./Core/Src/main.c ****   MX_I2C3_Init();
 429              		.loc 1 143 3 view .LVU100
 430 004c FFF7FEFF 		bl	MX_TIM1_Init
 431              	.LVL35:
 144:./Core/Src/main.c ****   MX_SPI3_Init();
 432              		.loc 1 144 3 view .LVU101
 433 0050 FFF7FEFF 		bl	MX_I2C3_Init
 434              	.LVL36:
 145:./Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 435              		.loc 1 145 3 view .LVU102
 436 0054 FFF7FEFF 		bl	MX_SPI3_Init
 437              	.LVL37:
 148:./Core/Src/main.c ****   AS5600_Init(motor1->As5600_Sensor,&AS5600_I2C_Handle);
 438              		.loc 1 148 3 view .LVU103
 439 0058 234C     		ldr	r4, .L28
 440 005a B2EE080A 		vmov.f32	s0, #1.2e+1
 441 005e 4FF0FF33 		mov	r3, #-1
 442 0062 0722     		movs	r2, #7
 443 0064 0121     		movs	r1, #1
 444 0066 2046     		mov	r0, r4
 445 0068 FFF7FEFF 		bl	Ts_Foc_Init
 446              	.LVL38:
 149:./Core/Src/main.c ****   CurrSense_Init(motor1->Inlinecurrent,0,1,2,&CURRENT_ADC_HANLDE);
 447              		.loc 1 149 3 view .LVU104
 149:./Core/Src/main.c ****   CurrSense_Init(motor1->Inlinecurrent,0,1,2,&CURRENT_ADC_HANLDE);
 448              		.loc 1 149 21 is_stmt 0 view .LVU105
 449 006c 2368     		ldr	r3, [r4]
 149:./Core/Src/main.c ****   CurrSense_Init(motor1->Inlinecurrent,0,1,2,&CURRENT_ADC_HANLDE);
 450              		.loc 1 149 3 view .LVU106
 451 006e 1F49     		ldr	r1, .L28+4
 452 0070 986A     		ldr	r0, [r3, #40]
 453 0072 FFF7FEFF 		bl	AS5600_Init
 454              	.LVL39:
 150:./Core/Src/main.c ****   // Pid_Ang_Init(motor1->Pid_Ang,0.5,0,0.003,10000,0.08);
 455              		.loc 1 150 3 is_stmt 1 view .LVU107
 150:./Core/Src/main.c ****   // Pid_Ang_Init(motor1->Pid_Ang,0.5,0,0.003,10000,0.08);
 456              		.loc 1 150 24 is_stmt 0 view .LVU108
 457 0076 2368     		ldr	r3, [r4]
 150:./Core/Src/main.c ****   // Pid_Ang_Init(motor1->Pid_Ang,0.5,0,0.003,10000,0.08);
 458              		.loc 1 150 3 view .LVU109
 459 0078 186C     		ldr	r0, [r3, #64]
 460 007a 1D4B     		ldr	r3, .L28+8
 461 007c 0093     		str	r3, [sp]
 462 007e 0223     		movs	r3, #2
 463 0080 0122     		movs	r2, #1
 464 0082 0021     		movs	r1, #0
 465 0084 FFF7FEFF 		bl	CurrSense_Init
 466              	.LVL40:
 160:./Core/Src/main.c ****   Pid_Curr_Init(motor1->Pid_Curr,1.25,50,0,100000,12.6);
ARM GAS  /tmp/ccQiOSpO.s 			page 32


 467              		.loc 1 160 3 is_stmt 1 view .LVU110
 160:./Core/Src/main.c ****   Pid_Curr_Init(motor1->Pid_Curr,1.25,50,0,100000,12.6);
 468              		.loc 1 160 22 is_stmt 0 view .LVU111
 469 0088 2368     		ldr	r3, [r4]
 160:./Core/Src/main.c ****   Pid_Curr_Init(motor1->Pid_Curr,1.25,50,0,100000,12.6);
 470              		.loc 1 160 3 view .LVU112
 471 008a DFED1A0A 		vldr.32	s1, .L28+12
 472 008e 9FED1A8A 		vldr.32	s16, .L28+16
 473 0092 B0EE602A 		vmov.f32	s4, s1
 474 0096 F0EE481A 		vmov.f32	s3, s16
 475 009a 9FED181A 		vldr.32	s2, .L28+20
 476 009e B6EE000A 		vmov.f32	s0, #5.0e-1
 477 00a2 186B     		ldr	r0, [r3, #48]
 478 00a4 FFF7FEFF 		bl	Pid_Ang_Init
 479              	.LVL41:
 161:./Core/Src/main.c **** 
 480              		.loc 1 161 3 is_stmt 1 view .LVU113
 161:./Core/Src/main.c **** 
 481              		.loc 1 161 23 is_stmt 0 view .LVU114
 482 00a8 2368     		ldr	r3, [r4]
 161:./Core/Src/main.c **** 
 483              		.loc 1 161 3 view .LVU115
 484 00aa 9FED152A 		vldr.32	s4, .L28+24
 485 00ae F0EE481A 		vmov.f32	s3, s16
 486 00b2 9FED141A 		vldr.32	s2, .L28+28
 487 00b6 DFED140A 		vldr.32	s1, .L28+32
 488 00ba B7EE040A 		vmov.f32	s0, #1.25e+0
 489 00be 586B     		ldr	r0, [r3, #52]
 490 00c0 FFF7FEFF 		bl	Pid_Curr_Init
 491              	.LVL42:
 166:./Core/Src/main.c ****   Lowpass_Filter_Init(motor1->Lowpass_Filter_Curr,0.05);
 492              		.loc 1 166 3 is_stmt 1 view .LVU116
 166:./Core/Src/main.c ****   Lowpass_Filter_Init(motor1->Lowpass_Filter_Curr,0.05);
 493              		.loc 1 166 29 is_stmt 0 view .LVU117
 494 00c4 2368     		ldr	r3, [r4]
 166:./Core/Src/main.c ****   Lowpass_Filter_Init(motor1->Lowpass_Filter_Curr,0.05);
 495              		.loc 1 166 3 view .LVU118
 496 00c6 9FED110A 		vldr.32	s0, .L28+36
 497 00ca 986B     		ldr	r0, [r3, #56]
 498 00cc FFF7FEFF 		bl	Lowpass_Filter_Init
 499              	.LVL43:
 167:./Core/Src/main.c ****   /* USER CODE END 2 */
 500              		.loc 1 167 3 is_stmt 1 view .LVU119
 167:./Core/Src/main.c ****   /* USER CODE END 2 */
 501              		.loc 1 167 29 is_stmt 0 view .LVU120
 502 00d0 2368     		ldr	r3, [r4]
 167:./Core/Src/main.c ****   /* USER CODE END 2 */
 503              		.loc 1 167 3 view .LVU121
 504 00d2 9FED0F0A 		vldr.32	s0, .L28+40
 505 00d6 D86B     		ldr	r0, [r3, #60]
 506 00d8 FFF7FEFF 		bl	Lowpass_Filter_Init
 507              	.LVL44:
 173:./Core/Src/main.c ****   while (1)
 508              		.loc 1 173 3 is_stmt 1 view .LVU122
 509 00dc 2068     		ldr	r0, [r4]
 510 00de FFF7FEFF 		bl	aligns_Motor_Zero_Angle
 511              	.LVL45:
ARM GAS  /tmp/ccQiOSpO.s 			page 33


 512              	.L26:
 174:./Core/Src/main.c ****   {
 513              		.loc 1 174 3 view .LVU123
 514              	.LBB8:
 176:./Core/Src/main.c ****     /* USER CODE END WHILE */
 515              		.loc 1 176 5 discriminator 1 view .LVU124
 516 00e2 FFF7FEFF 		bl	user_main
 517              	.LVL46:
 518              	.LBE8:
 174:./Core/Src/main.c ****   {
 519              		.loc 1 174 9 view .LVU125
 520 00e6 FCE7     		b	.L26
 521              	.L29:
 522              		.align	2
 523              	.L28:
 524 00e8 00000000 		.word	motor1
 525 00ec 00000000 		.word	hi2c1
 526 00f0 00000000 		.word	hadc1
 527 00f4 CDCCCC3D 		.word	1036831949
 528 00f8 0050C347 		.word	1203982336
 529 00fc A69B443B 		.word	994352038
 530 0100 9A994941 		.word	1095342490
 531 0104 00000000 		.word	0
 532 0108 00004842 		.word	1112014848
 533 010c 0AD7233C 		.word	1008981770
 534 0110 CDCC4C3D 		.word	1028443341
 535              		.cfi_endproc
 536              	.LFE244:
 538              		.text
 539              	.Letext0:
 540              		.file 3 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 541              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 542              		.file 5 "./Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 543              		.file 6 "./Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 544              		.file 7 "./Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 545              		.file 8 "./Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 546              		.file 9 "./Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 547              		.file 10 "./Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 548              		.file 11 "./Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 549              		.file 12 "./Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 550              		.file 13 "./Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 551              		.file 14 "./Core/Inc/adc.h"
 552              		.file 15 "./Core/Inc/i2c.h"
 553              		.file 16 "./Core/Inc/usart.h"
 554              		.file 17 "./underlying/inc/as5600.h"
 555              		.file 18 "./underlying/inc/pid.h"
 556              		.file 19 "./underlying/inc/inlinecurrent.h"
 557              		.file 20 "./underlying/inc/lowpass_filter.h"
 558              		.file 21 "./underlying/inc/ts_foc.h"
 559              		.file 22 "./Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 560              		.file 23 "./Core/Inc/spi.h"
 561              		.file 24 "./Core/Inc/tim.h"
 562              		.file 25 "./Core/Inc/rng.h"
 563              		.file 26 "./Core/Inc/crc.h"
 564              		.file 27 "./Core/Inc/can.h"
 565              		.file 28 "./Core/Inc/dma.h"
 566              		.file 29 "./Core/Inc/gpio.h"
ARM GAS  /tmp/ccQiOSpO.s 			page 34


 567              		.file 30 "<built-in>"
ARM GAS  /tmp/ccQiOSpO.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccQiOSpO.s:21     .text.__io_putchar:00000000 $t
     /tmp/ccQiOSpO.s:27     .text.__io_putchar:00000000 __io_putchar
     /tmp/ccQiOSpO.s:63     .text.__io_putchar:0000001c $d
     /tmp/ccQiOSpO.s:68     .text._write:00000000 $t
     /tmp/ccQiOSpO.s:74     .text._write:00000000 _write
     /tmp/ccQiOSpO.s:107    .text._write:00000014 $d
     /tmp/ccQiOSpO.s:112    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccQiOSpO.s:118    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccQiOSpO.s:152    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
     /tmp/ccQiOSpO.s:157    .text.Error_Handler:00000000 $t
     /tmp/ccQiOSpO.s:163    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccQiOSpO.s:195    .text.SystemClock_Config:00000000 $t
     /tmp/ccQiOSpO.s:201    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccQiOSpO.s:349    .text.SystemClock_Config:000000a0 $d
     /tmp/ccQiOSpO.s:355    .text.main:00000000 $t
     /tmp/ccQiOSpO.s:361    .text.main:00000000 main
     /tmp/ccQiOSpO.s:524    .text.main:000000e8 $d

UNDEFINED SYMBOLS
HAL_UART_Transmit
huart1
HAL_IncTick
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_ADC1_Init
MX_CAN1_Init
MX_CAN2_Init
MX_I2C1_Init
MX_I2C2_Init
MX_SPI1_Init
MX_SPI2_Init
MX_TIM4_Init
MX_TIM8_Init
MX_USART1_UART_Init
MX_CRC_Init
MX_RNG_Init
MX_USART2_UART_Init
MX_USART3_UART_Init
MX_TIM1_Init
MX_I2C3_Init
MX_SPI3_Init
Ts_Foc_Init
AS5600_Init
CurrSense_Init
Pid_Ang_Init
Pid_Curr_Init
Lowpass_Filter_Init
aligns_Motor_Zero_Angle
user_main
motor1
hi2c1
ARM GAS  /tmp/ccQiOSpO.s 			page 36


hadc1
