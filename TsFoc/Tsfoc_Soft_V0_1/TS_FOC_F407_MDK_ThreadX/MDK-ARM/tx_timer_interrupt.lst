


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ********************/
    2 00000000         ;/*                                                     
                                          */
    3 00000000         ;/*       Copyright (c) Microsoft Corporation. All right
                       s reserved.        */
    4 00000000         ;/*                                                     
                                          */
    5 00000000         ;/*       This software is licensed under the Microsoft 
                       Software License   */
    6 00000000         ;/*       Terms for Microsoft Azure RTOS. Full text of t
                       he license can be  */
    7 00000000         ;/*       found in the LICENSE file at https://aka.ms/Az
                       ureRTOS_EULA       */
    8 00000000         ;/*       and in the root directory of this software.   
                                          */
    9 00000000         ;/*                                                     
                                          */
   10 00000000         ;/******************************************************
                       ********************/
   11 00000000         ;
   12 00000000         ;
   13 00000000         ;/******************************************************
                       ********************/
   14 00000000         ;/******************************************************
                       ********************/
   15 00000000         ;/**                                                    
                                          */
   16 00000000         ;/** ThreadX Component                                  
                                          */
   17 00000000         ;/**                                                    
                                          */
   18 00000000         ;/**   Timer                                            
                                          */
   19 00000000         ;/**                                                    
                                          */
   20 00000000         ;/******************************************************
                       ********************/
   21 00000000         ;/******************************************************
                       ********************/
   22 00000000         ;
   23 00000000         ;
   24 00000000                 IMPORT           _tx_timer_time_slice
   25 00000000                 IMPORT           _tx_timer_system_clock
   26 00000000                 IMPORT           _tx_timer_current_ptr
   27 00000000                 IMPORT           _tx_timer_list_start
   28 00000000                 IMPORT           _tx_timer_list_end
   29 00000000                 IMPORT           _tx_timer_expired_time_slice
   30 00000000                 IMPORT           _tx_timer_expired
   31 00000000                 IMPORT           _tx_thread_time_slice
   32 00000000                 IMPORT           _tx_timer_expiration_process
   33 00000000                 IMPORT           _tx_thread_preempt_disable
   34 00000000                 IMPORT           _tx_thread_current_ptr
   35 00000000                 IMPORT           _tx_thread_execute_ptr
   36 00000000         ;
   37 00000000         ;
   38 00000000                 AREA             ||.text||, CODE, READONLY
   39 00000000                 PRESERVE8
   40 00000000         ;/******************************************************



ARM Macro Assembler    Page 2 


                       ********************/
   41 00000000         ;/*                                                     
                                          */
   42 00000000         ;/*  FUNCTION                                           
                           RELEASE        */
   43 00000000         ;/*                                                     
                                          */
   44 00000000         ;/*    _tx_timer_interrupt                              
                        Cortex-M4/AC5     */
   45 00000000         ;/*                                                     
                             6.1          */
   46 00000000         ;/*  AUTHOR                                             
                                          */
   47 00000000         ;/*                                                     
                                          */
   48 00000000         ;/*    William E. Lamie, Microsoft Corporation          
                                          */
   49 00000000         ;/*                                                     
                                          */
   50 00000000         ;/*  DESCRIPTION                                        
                                          */
   51 00000000         ;/*                                                     
                                          */
   52 00000000         ;/*    This function processes the hardware timer interr
                       upt.  This         */
   53 00000000         ;/*    processing includes incrementing the system clock
                        and checking for  */
   54 00000000         ;/*    time slice and/or timer expiration.  If either is
                        found, the        */
   55 00000000         ;/*    interrupt context save/restore functions are call
                       ed along with the  */
   56 00000000         ;/*    expiration functions.                            
                                          */
   57 00000000         ;/*                                                     
                                          */
   58 00000000         ;/*  INPUT                                              
                                          */
   59 00000000         ;/*                                                     
                                          */
   60 00000000         ;/*    None                                             
                                          */
   61 00000000         ;/*                                                     
                                          */
   62 00000000         ;/*  OUTPUT                                             
                                          */
   63 00000000         ;/*                                                     
                                          */
   64 00000000         ;/*    None                                             
                                          */
   65 00000000         ;/*                                                     
                                          */
   66 00000000         ;/*  CALLS                                              
                                          */
   67 00000000         ;/*                                                     
                                          */
   68 00000000         ;/*    _tx_timer_expiration_process          Timer expir
                       ation processing   */
   69 00000000         ;/*    _tx_thread_time_slice                 Time slice 
                       interrupted thread */



ARM Macro Assembler    Page 3 


   70 00000000         ;/*                                                     
                                          */
   71 00000000         ;/*  CALLED BY                                          
                                          */
   72 00000000         ;/*                                                     
                                          */
   73 00000000         ;/*    interrupt vector                                 
                                          */
   74 00000000         ;/*                                                     
                                          */
   75 00000000         ;/*  RELEASE HISTORY                                    
                                          */
   76 00000000         ;/*                                                     
                                          */
   77 00000000         ;/*    DATE              NAME                      DESCR
                       IPTION             */
   78 00000000         ;/*                                                     
                                          */
   79 00000000         ;/*  09-30-2020     William E. Lamie         Initial Ver
                       sion 6.1           */
   80 00000000         ;/*                                                     
                                          */
   81 00000000         ;/******************************************************
                       ********************/
   82 00000000         ;VOID   _tx_timer_interrupt(VOID)
   83 00000000         ;{
   84 00000000                 EXPORT           _tx_timer_interrupt
   85 00000000         _tx_timer_interrupt
   86 00000000         ;
   87 00000000         ;    /* Upon entry to this routine, it is assumed that c
                       ontext save has already
   88 00000000         ;       been called, and therefore the compiler scratch 
                       registers are available
   89 00000000         ;       for use.  */
   90 00000000         ;
   91 00000000         ;    /* Increment the system clock.  */
   92 00000000         ;    _tx_timer_system_clock++;
   93 00000000         ;
   94 00000000 F240 0100 
              F2C0 0100        MOV32            r1, _tx_timer_system_clock ; Pi
                                                            ckup address of sys
                                                            tem clock
   95 00000008 6808            LDR              r0, [r1, #0] ; Pickup system cl
                                                            ock
   96 0000000A F100 0001       ADD              r0, r0, #1  ; Increment system 
                                                            clock
   97 0000000E 6008            STR              r0, [r1, #0] ; Store new system
                                                             clock
   98 00000010         ;
   99 00000010         ;    /* Test for time-slice expiration.  */
  100 00000010         ;    if (_tx_timer_time_slice)
  101 00000010         ;    {
  102 00000010         ;
  103 00000010 F240 0300 
              F2C0 0300        MOV32            r3, _tx_timer_time_slice ; Pick
                                                            up address of time-
                                                            slice
  104 00000018 681A            LDR              r2, [r3, #0] 
                                                            ; Pickup time-slice



ARM Macro Assembler    Page 4 


                                                            
  105 0000001A B152            CBZ              r2,  __tx_timer_no_time_slice 
                                                            ; Is it non-active?
                                                            
  106 0000001C         ; Yes, skip time-slice processing
  107 0000001C         ;
  108 0000001C         ;       /* Decrement the time_slice.  */
  109 0000001C         ;       _tx_timer_time_slice--;
  110 0000001C         ;
  111 0000001C F1A2 0201       SUB              r2, r2, #1  ; Decrement the tim
                                                            e-slice
  112 00000020 601A            STR              r2, [r3, #0] ; Store new time-s
                                                            lice value
  113 00000022         ;
  114 00000022         ;       /* Check for expiration.  */
  115 00000022         ;       if (__tx_timer_time_slice == 0)
  116 00000022         ;
  117 00000022 B932            CBNZ             r2, __tx_timer_no_time_slice 
                                                            ; Has it expired?
  118 00000024         ;
  119 00000024         ;       /* Set the time-slice expired flag.  */
  120 00000024         ;       _tx_timer_expired_time_slice =  TX_TRUE;
  121 00000024         ;
  122 00000024 F240 0300 
              F2C0 0300        MOV32            r3, _tx_timer_expired_time_slic
e 
                                                            ; Pickup address of
                                                             expired flag
  123 0000002C F04F 0001       MOV              r0, #1      ; Build expired val
                                                            ue
  124 00000030 6018            STR              r0, [r3, #0] ; Set time-slice e
                                                            xpiration flag
  125 00000032         ;
  126 00000032         ;    }
  127 00000032         ;
  128 00000032         __tx_timer_no_time_slice
  129 00000032         ;
  130 00000032         ;    /* Test for timer expiration.  */
  131 00000032         ;    if (*_tx_timer_current_ptr)
  132 00000032         ;    {
  133 00000032         ;
  134 00000032 F240 0100 
              F2C0 0100        MOV32            r1, _tx_timer_current_ptr ; Pic
                                                            kup current timer p
                                                            ointer address
  135 0000003A 6808            LDR              r0, [r1, #0] ; Pickup current t
                                                            imer
  136 0000003C 6802            LDR              r2, [r0, #0] ; Pickup timer lis
                                                            t entry
  137 0000003E B13A            CBZ              r2, __tx_timer_no_timer ; Is th
                                                            ere anything in the
                                                             list?
  138 00000040         ; No, just increment the timer
  139 00000040         ;
  140 00000040         ;        /* Set expiration flag.  */
  141 00000040         ;        _tx_timer_expired =  TX_TRUE;
  142 00000040         ;
  143 00000040 F240 0300 
              F2C0 0300        MOV32            r3, _tx_timer_expired ; Pickup 



ARM Macro Assembler    Page 5 


                                                            expiration flag add
                                                            ress
  144 00000048 F04F 0201       MOV              r2, #1      ; Build expired val
                                                            ue
  145 0000004C 601A            STR              r2, [r3, #0] ; Set expired flag
                                                            
  146 0000004E E00E            B                __tx_timer_done ; Finished time
                                                            r processing
  147 00000050         ;
  148 00000050         ;    }
  149 00000050         ;    else
  150 00000050         ;    {
  151 00000050         __tx_timer_no_timer
  152 00000050         ;
  153 00000050         ;        /* No timer expired, increment the timer pointe
                       r.  */
  154 00000050         ;        _tx_timer_current_ptr++;
  155 00000050         ;
  156 00000050 F100 0004       ADD              r0, r0, #4  ; Move to next time
                                                            r
  157 00000054         ;
  158 00000054         ;        /* Check for wrap-around.  */
  159 00000054         ;        if (_tx_timer_current_ptr == _tx_timer_list_end
                       )
  160 00000054         ;
  161 00000054 F240 0300 
              F2C0 0300        MOV32            r3, _tx_timer_list_end ; Pickup
                                                             addr of timer list
                                                             end
  162 0000005C 681A            LDR              r2, [r3, #0] ; Pickup list end
  163 0000005E 4290            CMP              r0, r2      ; Are we at list en
                                                            d?
  164 00000060 D104            BNE              __tx_timer_skip_wrap ; No, skip
                                                             wrap-around logic
  165 00000062         ;
  166 00000062         ;            /* Wrap to beginning of list.  */
  167 00000062         ;            _tx_timer_current_ptr =  _tx_timer_list_sta
                       rt;
  168 00000062         ;
  169 00000062 F240 0300 
              F2C0 0300        MOV32            r3, _tx_timer_list_start ; Pick
                                                            up addr of timer li
                                                            st start
  170 0000006A 6818            LDR              r0, [r3, #0] ; Set current poin
                                                            ter to list start
  171 0000006C         ;
  172 0000006C         __tx_timer_skip_wrap
  173 0000006C         ;
  174 0000006C 6008            STR              r0, [r1, #0] ; Store new curren
                                                            t timer pointer
  175 0000006E         ;    }
  176 0000006E         ;
  177 0000006E         __tx_timer_done
  178 0000006E         ;
  179 0000006E         ;
  180 0000006E         ;    /* See if anything has expired.  */
  181 0000006E         ;    if ((_tx_timer_expired_time_slice) || (_tx_timer_ex
                       pired))
  182 0000006E         ;    {



ARM Macro Assembler    Page 6 


  183 0000006E         ;
  184 0000006E F240 0300 
              F2C0 0300        MOV32            r3, _tx_timer_expired_time_slic
e 
                                                            ; Pickup addr of ex
                                                            pired flag
  185 00000076 681A            LDR              r2, [r3, #0] ; Pickup time-slic
                                                            e expired flag
  186 00000078 B92A            CBNZ             r2, __tx_something_expired ; Di
                                                            d a time-slice expi
                                                            re?
  187 0000007A         ; If non-zero, time-slice expired
  188 0000007A F240 0100 
              F2C0 0100        MOV32            r1, _tx_timer_expired ; Pickup 
                                                            addr of other expir
                                                            ed flag
  189 00000082 6808            LDR              r0, [r1, #0] ; Pickup timer exp
                                                            ired flag
  190 00000084 B368            CBZ              r0, __tx_timer_nothing_expired 
                                                            ; Did a timer expir
                                                            e?
  191 00000086         ; No, nothing expired
  192 00000086         ;
  193 00000086         __tx_something_expired
  194 00000086         ;
  195 00000086         ;
  196 00000086 B501            STMDB            sp!, {r0, lr} ; Save the lr reg
                                                            ister on the stack
  197 00000088         ;   and save r0 just to keep 8-byte alignment
  198 00000088         ;
  199 00000088         ;    /* Did a timer expire?  */
  200 00000088         ;    if (_tx_timer_expired)
  201 00000088         ;    {
  202 00000088         ;
  203 00000088 F240 0100 
              F2C0 0100        MOV32            r1, _tx_timer_expired ; Pickup 
                                                            addr of expired fla
                                                            g
  204 00000090 6808            LDR              r0, [r1, #0] ; Pickup timer exp
                                                            ired flag
  205 00000092 B108            CBZ              r0, __tx_timer_dont_activate ; 
                                                            Check for timer exp
                                                            iration
  206 00000094         ; If not set, skip timer activation
  207 00000094         ;
  208 00000094         ;        /* Process timer expiration.  */
  209 00000094         ;        _tx_timer_expiration_process();
  210 00000094         ;
  211 00000094 F7FF FFFE       BL               _tx_timer_expiration_process ; 
                                                            Call the timer expi
                                                            ration handling rou
                                                            tine
  212 00000098         ;
  213 00000098         ;    }
  214 00000098         __tx_timer_dont_activate
  215 00000098         ;
  216 00000098         ;    /* Did time slice expire?  */
  217 00000098         ;    if (_tx_timer_expired_time_slice)
  218 00000098         ;    {



ARM Macro Assembler    Page 7 


  219 00000098         ;
  220 00000098 F240 0300 
              F2C0 0300        MOV32            r3, _tx_timer_expired_time_slic
e 
                                                            ; Pickup addr of ti
                                                            me-slice expired
  221 000000A0 681A            LDR              r2, [r3, #0] ; Pickup the actua
                                                            l flag
  222 000000A2 B1E2            CBZ              r2, __tx_timer_not_ts_expiratio
n 
                                                            ; See if the flag i
                                                            s set
  223 000000A4         ; No, skip time-slice processing
  224 000000A4         ;
  225 000000A4         ;        /* Time slice interrupted thread.  */
  226 000000A4         ;        _tx_thread_time_slice();
  227 000000A4         
  228 000000A4 F7FF FFFE       BL               _tx_thread_time_slice ; Call ti
                                                            me-slice processing
                                                            
  229 000000A8 F240 0000 
              F2C0 0000        MOV32            r0, _tx_thread_preempt_disable 
                                                            ; Build address of 
                                                            preempt disable fla
                                                            g
  230 000000B0 6801            LDR              r1, [r0]    ; Is the preempt di
                                                            sable flag set?
  231 000000B2 B9A1            CBNZ             r1, __tx_timer_skip_time_slice 
                                                            ; Yes, skip the Pen
                                                            dSV logic
  232 000000B4 F240 0000 
              F2C0 0000        MOV32            r0, _tx_thread_current_ptr ; Bu
                                                            ild current thread 
                                                            pointer address
  233 000000BC 6801            LDR              r1, [r0]    ; Pickup the curren
                                                            t thread pointer
  234 000000BE F240 0200 
              F2C0 0200        MOV32            r2, _tx_thread_execute_ptr ; Bu
                                                            ild execute thread 
                                                            pointer address
  235 000000C6 6813            LDR              r3, [r2]    ; Pickup the execut
                                                            e thread pointer
  236 000000C8 F64E 5004 
              F2CE 0000        MOV32            r0, 0xE000ED04 ; Build address 
                                                            of control register
                                                            
  237 000000D0 F240 0200 
              F2C1 0200        MOV32            r2, 0x10000000 ; Build value fo
                                                            r PendSV bit
  238 000000D8 4299            CMP              r1, r3      ; Are they the same
                                                            ?
  239 000000DA D000            BEQ              __tx_timer_skip_time_slice ; If
                                                             the same, there wa
                                                            s no time-slice per
                                                            formed
  240 000000DC 6002            STR              r2, [r0]    ; Not the same, iss
                                                            ue the PendSV for p
                                                            reemption
  241 000000DE         __tx_timer_skip_time_slice



ARM Macro Assembler    Page 8 


  242 000000DE         ;
  243 000000DE         ;    }
  244 000000DE         ;
  245 000000DE         __tx_timer_not_ts_expiration
  246 000000DE         ;
  247 000000DE E8BD 4001       LDMIA            sp!, {r0, lr} ; Recover lr regi
                                                            ster (r0 is just th
                                                            ere for
  248 000000E2         ;
  249 000000E2         ;    }
  250 000000E2         ;
  251 000000E2         __tx_timer_nothing_expired
  252 000000E2         
  253 000000E2 F3BF 8F4F       DSB                          ; Complete all memo
                                                            ry access
  254 000000E6 4770            BX               lr          ; Return to caller
  255 000000E8         ;
  256 000000E8         ;}
  257 000000E8                 ALIGN
  258 000000E8                 LTORG
  259 000000E8                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=universal_board_f407vet6\tx_timer_interrupt.d -ouniversal_board
_f407vet6\tx_timer_interrupt.o -ID:\Laboratory_Data\Competition_materials\robot
ac_2024\SDK\Tracked_vehicle\ThreadX_F4\MDK-ARM\RTE -I"C:\Program Files\software
\MDK\ARM\CMSIS\5.0.1\CMSIS\Include" --predefine="__MICROLIB SETA 1" --predefine
="__UVISION_VERSION SETA 514" --predefine="_RTE_ SETA 1" --list=tx_timer_interr
upt.lst ..\port\src\tx_timer_interrupt.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

__tx_something_expired 00000086

Symbol: __tx_something_expired
   Definitions
      At line 193 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 186 in file ..\port\src\tx_timer_interrupt.s
Comment: __tx_something_expired used once
__tx_timer_done 0000006E

Symbol: __tx_timer_done
   Definitions
      At line 177 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 146 in file ..\port\src\tx_timer_interrupt.s
Comment: __tx_timer_done used once
__tx_timer_dont_activate 00000098

Symbol: __tx_timer_dont_activate
   Definitions
      At line 214 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 205 in file ..\port\src\tx_timer_interrupt.s
Comment: __tx_timer_dont_activate used once
__tx_timer_no_time_slice 00000032

Symbol: __tx_timer_no_time_slice
   Definitions
      At line 128 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 105 in file ..\port\src\tx_timer_interrupt.s
      At line 117 in file ..\port\src\tx_timer_interrupt.s

__tx_timer_no_timer 00000050

Symbol: __tx_timer_no_timer
   Definitions
      At line 151 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 137 in file ..\port\src\tx_timer_interrupt.s
Comment: __tx_timer_no_timer used once
__tx_timer_not_ts_expiration 000000DE

Symbol: __tx_timer_not_ts_expiration
   Definitions
      At line 245 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 222 in file ..\port\src\tx_timer_interrupt.s
Comment: __tx_timer_not_ts_expiration used once
__tx_timer_nothing_expired 000000E2

Symbol: __tx_timer_nothing_expired
   Definitions
      At line 251 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 190 in file ..\port\src\tx_timer_interrupt.s
Comment: __tx_timer_nothing_expired used once
__tx_timer_skip_time_slice 000000DE




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: __tx_timer_skip_time_slice
   Definitions
      At line 241 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 231 in file ..\port\src\tx_timer_interrupt.s
      At line 239 in file ..\port\src\tx_timer_interrupt.s

__tx_timer_skip_wrap 0000006C

Symbol: __tx_timer_skip_wrap
   Definitions
      At line 172 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 164 in file ..\port\src\tx_timer_interrupt.s
Comment: __tx_timer_skip_wrap used once
_tx_timer_interrupt 00000000

Symbol: _tx_timer_interrupt
   Definitions
      At line 85 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 84 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_timer_interrupt used once
|.text| 00000000

Symbol: |.text|
   Definitions
      At line 38 in file ..\port\src\tx_timer_interrupt.s
   Uses
      None
Comment: |.text| unused
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

_tx_thread_current_ptr 00000000

Symbol: _tx_thread_current_ptr
   Definitions
      At line 34 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 232 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_thread_current_ptr used once
_tx_thread_execute_ptr 00000000

Symbol: _tx_thread_execute_ptr
   Definitions
      At line 35 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 234 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_thread_execute_ptr used once
_tx_thread_preempt_disable 00000000

Symbol: _tx_thread_preempt_disable
   Definitions
      At line 33 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 229 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_thread_preempt_disable used once
_tx_thread_time_slice 00000000

Symbol: _tx_thread_time_slice
   Definitions
      At line 31 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 228 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_thread_time_slice used once
_tx_timer_current_ptr 00000000

Symbol: _tx_timer_current_ptr
   Definitions
      At line 26 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 134 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_timer_current_ptr used once
_tx_timer_expiration_process 00000000

Symbol: _tx_timer_expiration_process
   Definitions
      At line 32 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 211 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_timer_expiration_process used once
_tx_timer_expired 00000000

Symbol: _tx_timer_expired
   Definitions
      At line 30 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 143 in file ..\port\src\tx_timer_interrupt.s
      At line 188 in file ..\port\src\tx_timer_interrupt.s
      At line 203 in file ..\port\src\tx_timer_interrupt.s

_tx_timer_expired_time_slice 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: _tx_timer_expired_time_slice
   Definitions
      At line 29 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 122 in file ..\port\src\tx_timer_interrupt.s
      At line 184 in file ..\port\src\tx_timer_interrupt.s
      At line 220 in file ..\port\src\tx_timer_interrupt.s

_tx_timer_list_end 00000000

Symbol: _tx_timer_list_end
   Definitions
      At line 28 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 161 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_timer_list_end used once
_tx_timer_list_start 00000000

Symbol: _tx_timer_list_start
   Definitions
      At line 27 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 169 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_timer_list_start used once
_tx_timer_system_clock 00000000

Symbol: _tx_timer_system_clock
   Definitions
      At line 25 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 94 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_timer_system_clock used once
_tx_timer_time_slice 00000000

Symbol: _tx_timer_time_slice
   Definitions
      At line 24 in file ..\port\src\tx_timer_interrupt.s
   Uses
      At line 103 in file ..\port\src\tx_timer_interrupt.s
Comment: _tx_timer_time_slice used once
12 symbols
357 symbols in table
