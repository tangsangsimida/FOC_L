ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tx_block_pool_cleanup.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._tx_block_pool_cleanup,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_block_pool_cleanup
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_block_pool_cleanup:
  27              	.LVL0:
  28              	.LFB8:
  29              		.file 1 "./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c"
   1:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**************************************************************************/
   2:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
   3:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
   5:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  10:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**************************************************************************/
  11:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  12:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  13:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**************************************************************************/
  14:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**************************************************************************/
  15:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**                                                                       */
  16:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**                                                                       */
  18:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**   Block Pool                                                          */
  19:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**                                                                       */
  20:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**************************************************************************/
  21:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**************************************************************************/
  22:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  23:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #define TX_SOURCE_CODE
  24:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  25:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  26:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /* Include necessary system files.  */
  27:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  28:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #include "tx_api.h"
  29:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #include "tx_thread.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 2


  30:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #include "tx_block_pool.h"
  31:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  32:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  33:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**************************************************************************/
  34:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  35:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  FUNCTION                                               RELEASE        */
  36:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  37:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    _tx_block_pool_cleanup                              PORTABLE C      */
  38:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                           6.1          */
  39:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  AUTHOR                                                                */
  40:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  41:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    William E. Lamie, Microsoft Corporation                             */
  42:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  43:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  DESCRIPTION                                                           */
  44:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  45:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    This function processes block allocate timeout and thread terminate */
  46:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    actions that require the block pool data structures to be cleaned   */
  47:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    up.                                                                 */
  48:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  49:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  INPUT                                                                 */
  50:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  51:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    thread_ptr                        Pointer to suspended thread's     */
  52:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                        control block                   */
  53:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  54:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  OUTPUT                                                                */
  55:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  56:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    None                                                                */
  57:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  58:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  CALLS                                                                 */
  59:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  60:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    _tx_thread_system_resume          Resume thread service             */
  61:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  62:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  63:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  CALLED BY                                                             */
  64:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  65:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    _tx_thread_timeout                Thread timeout processing         */
  66:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    _tx_thread_terminate              Thread terminate processing       */
  67:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    _tx_thread_wait_abort             Thread wait abort processing      */
  68:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  69:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  RELEASE HISTORY                                                       */
  70:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  71:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*    DATE              NAME                      DESCRIPTION             */
  72:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  73:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  74:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  75:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                            resulting in version 6.1    */
  76:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /*                                                                        */
  77:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** /**************************************************************************/
  78:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** VOID  _tx_block_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
  79:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** {
  30              		.loc 1 79 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 79 1 is_stmt 0 view .LVU1
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 3


  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
  80:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  81:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #ifndef TX_NOT_INTERRUPTABLE
  82:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** TX_INTERRUPT_SAVE_AREA
  40              		.loc 1 82 1 is_stmt 1 view .LVU2
  83:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #endif
  84:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  85:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** TX_BLOCK_POOL       *pool_ptr;
  41              		.loc 1 85 1 view .LVU3
  86:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** UINT                suspended_count;
  42              		.loc 1 86 1 view .LVU4
  87:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** TX_THREAD           *next_thread;
  43              		.loc 1 87 1 view .LVU5
  88:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** TX_THREAD           *previous_thread;
  44              		.loc 1 88 1 view .LVU6
  89:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  90:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  91:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #ifndef TX_NOT_INTERRUPTABLE
  92:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  93:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****     /* Disable interrupts to remove the suspended thread from the block pool.  */
  94:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****     TX_DISABLE
  45              		.loc 1 94 5 view .LVU7
  46              	.LBB16:
  47              	.LBI16:
  48              		.file 2 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 4


  31:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 5


  88:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 6


 145:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 7


 202:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 8


 259:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 9


 316:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 10


 373:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 11


 430:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 12


 487:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 540:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 13


 544:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  49              		.loc 2 566 63 view .LVU8
  50              	.LBB17:
 567:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
  51              		.loc 2 568 1 view .LVU9
 569:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  52              		.loc 2 570 5 view .LVU10
  53              	.LBB18:
  54              	.LBI18:
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  55              		.loc 2 533 63 view .LVU11
  56              	.LBB19:
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  57              		.loc 2 535 1 view .LVU12
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  58              		.loc 2 539 5 view .LVU13
  59              		.syntax unified
  60              	@ 539 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  61 0002 EFF31083 		MRS  r3, PRIMASK 
  62              	@ 0 "" 2
  63              	.LVL1:
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  64              		.loc 2 541 5 view .LVU14
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  65              		.loc 2 541 5 is_stmt 0 view .LVU15
  66              		.thumb
  67              		.syntax unified
  68              	.LBE19:
  69              	.LBE18:
 571:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 14


 575:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  70              		.loc 2 575 5 is_stmt 1 view .LVU16
  71              		.syntax unified
  72              	@ 575 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  73 0006 72B6     		CPSID i
  74              	@ 0 "" 2
 576:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 577:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(int_posture);
  75              		.loc 2 577 5 view .LVU17
  76              	.LVL2:
  77              		.loc 2 577 5 is_stmt 0 view .LVU18
  78              		.thumb
  79              		.syntax unified
  80              	.LBE17:
  81              	.LBE16:
  95:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
  96:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****     /* Determine if the cleanup is still required.  */
  97:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****     if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_block_pool_cleanup))
  82              		.loc 1 97 5 is_stmt 1 view .LVU19
  83              		.loc 1 97 8 is_stmt 0 view .LVU20
  84 0008 1B4A     		ldr	r2, .L7
  85 000a 846E     		ldr	r4, [r0, #104]
  86 000c 9442     		cmp	r4, r2
  87 000e 02D0     		beq	.L6
  88              	.LVL3:
  89              	.L2:
  98:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****     {
  99:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 100:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****         /* Check for valid suspension sequence.  */
 101:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****         if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 102:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****         {
 103:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 104:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****             /* Setup pointer to block pool control block.  */
 105:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****             pool_ptr =  TX_VOID_TO_BLOCK_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_contr
 106:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 107:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****             /* Check for a NULL byte pool pointer.  */
 108:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****             if (pool_ptr != TX_NULL)
 109:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****             {
 110:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 111:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                 /* Check for valid pool ID.  */
 112:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                 if (pool_ptr -> tx_block_pool_id == TX_BLOCK_POOL_ID)
 113:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                 {
 114:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 115:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                     /* Determine if there are any thread suspensions.  */
 116:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                     if (pool_ptr -> tx_block_pool_suspended_count != TX_NO_SUSPENSIONS)
 117:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                     {
 118:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #else
 119:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 120:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         /* Setup pointer to block pool control block.  */
 121:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         pool_ptr =  TX_VOID_TO_BLOCK_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_s
 122:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #endif
 123:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 124:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         /* Yes, we still have thread suspension!  */
 125:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 126:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         /* Clear the suspension cleanup flag.  */
 127:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 128:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 15


 129:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         /* Decrement the suspended count.  */
 130:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         pool_ptr -> tx_block_pool_suspended_count--;
 131:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 132:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         /* Pickup the suspended count.  */
 133:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         suspended_count =  pool_ptr -> tx_block_pool_suspended_count;
 134:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 135:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         /* Remove the suspended thread from the list.  */
 136:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 137:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         /* See if this is the only suspended thread on the list.  */
 138:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         if (suspended_count == TX_NO_SUSPENSIONS)
 139:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         {
 140:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 141:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Yes, the only suspended thread.  */
 142:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 143:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Update the head pointer.  */
 144:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 145:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         }
 146:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         else
 147:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         {
 148:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 149:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* At least one more thread is on the same suspension list.  */
 150:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 151:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Update the links of the adjacent threads.  */
 152:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             next_thread =                                   thread_ptr -> tx_thread
 153:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             previous_thread =                               thread_ptr -> tx_thread
 154:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             next_thread -> tx_thread_suspended_previous =   previous_thread;
 155:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             previous_thread -> tx_thread_suspended_next =   next_thread;
 156:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 157:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Determine if we need to update the head pointer.  */
 158:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             if (pool_ptr -> tx_block_pool_suspension_list == thread_ptr)
 159:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             {
 160:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 161:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                                 /* Update the list head pointer.  */
 162:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                                 pool_ptr -> tx_block_pool_suspension_list =     next_thread;
 163:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             }
 164:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         }
 165:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 166:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         /* Now we need to determine if this cleanup is from a terminate, timeout,
 167:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                            or from a wait abort.  */
 168:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         if (thread_ptr -> tx_thread_state == TX_BLOCK_MEMORY)
 169:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         {
 170:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 171:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Timeout condition and the thread still suspended on the block pool.
 172:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                                Setup return error status and resume the thread.  */
 173:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 174:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #ifdef TX_BLOCK_POOL_ENABLE_PERFORMANCE_INFO
 175:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 176:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Increment the total timeouts counter.  */
 177:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             _tx_block_pool_performance_timeout_count++;
 178:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 179:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Increment the number of timeouts on this block pool.  */
 180:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             pool_ptr -> tx_block_pool_performance_timeout_count++;
 181:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #endif
 182:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 183:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Setup return status.  */
 184:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 185:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 16


 186:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #ifdef TX_NOT_INTERRUPTABLE
 187:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 188:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Resume the thread!  */
 189:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             _tx_thread_system_ni_resume(thread_ptr);
 190:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #else
 191:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Temporarily disable preemption.  */
 192:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             _tx_thread_preempt_disable++;
 193:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 194:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Restore interrupts.  */
 195:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             TX_RESTORE
 196:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 197:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Resume the thread!  */
 198:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             _tx_thread_system_resume(thread_ptr);
 199:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 200:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             /* Disable interrupts.  */
 201:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             TX_DISABLE
 202:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #endif
 203:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         }
 204:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #ifndef TX_NOT_INTERRUPTABLE
 205:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                     }
 206:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                 }
 207:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****             }
 208:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****         }
 209:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****     }
 210:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 211:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****     /* Restore interrupts.  */
 212:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****     TX_RESTORE
  90              		.loc 1 212 5 is_stmt 1 view .LVU21
  91              	.LBB20:
  92              	.LBI20:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  93              		.loc 2 556 55 view .LVU22
  94              	.LBB21:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  95              		.loc 2 562 5 view .LVU23
  96              		.syntax unified
  97              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  98 0010 83F31088 		MSR  PRIMASK,r3
  99              	@ 0 "" 2
 100              	.LVL4:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 101              		.loc 2 562 5 is_stmt 0 view .LVU24
 102              		.thumb
 103              		.syntax unified
 104              	.LBE21:
 105              	.LBE20:
 213:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #endif
 214:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** }
 106              		.loc 1 214 1 view .LVU25
 107 0014 10BD     		pop	{r4, pc}
 108              	.LVL5:
 109              	.L6:
 101:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****         {
 110              		.loc 1 101 9 is_stmt 1 view .LVU26
 101:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****         {
 111              		.loc 1 101 47 is_stmt 0 view .LVU27
 112 0016 D0F8AC20 		ldr	r2, [r0, #172]
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 17


 101:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****         {
 113              		.loc 1 101 12 view .LVU28
 114 001a 8A42     		cmp	r2, r1
 115 001c F8D1     		bne	.L2
 105:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 116              		.loc 1 105 13 is_stmt 1 view .LVU29
 105:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 117              		.loc 1 105 22 is_stmt 0 view .LVU30
 118 001e C26E     		ldr	r2, [r0, #108]
 119              	.LVL6:
 108:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****             {
 120              		.loc 1 108 13 is_stmt 1 view .LVU31
 108:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****             {
 121              		.loc 1 108 16 is_stmt 0 view .LVU32
 122 0020 002A     		cmp	r2, #0
 123 0022 F5D0     		beq	.L2
 112:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                 {
 124              		.loc 1 112 17 is_stmt 1 view .LVU33
 112:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                 {
 125              		.loc 1 112 20 is_stmt 0 view .LVU34
 126 0024 1549     		ldr	r1, .L7+4
 127              	.LVL7:
 112:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                 {
 128              		.loc 1 112 20 view .LVU35
 129 0026 1468     		ldr	r4, [r2]
 130 0028 8C42     		cmp	r4, r1
 131 002a F1D1     		bne	.L2
 116:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                     {
 132              		.loc 1 116 21 is_stmt 1 view .LVU36
 116:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                     {
 133              		.loc 1 116 34 is_stmt 0 view .LVU37
 134 002c 516A     		ldr	r1, [r2, #36]
 116:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                     {
 135              		.loc 1 116 24 view .LVU38
 136 002e 0029     		cmp	r1, #0
 137 0030 EED0     		beq	.L2
 127:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 138              		.loc 1 127 25 is_stmt 1 view .LVU39
 127:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 139              		.loc 1 127 65 is_stmt 0 view .LVU40
 140 0032 0021     		movs	r1, #0
 141 0034 8166     		str	r1, [r0, #104]
 130:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 142              		.loc 1 130 25 is_stmt 1 view .LVU41
 130:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 143              		.loc 1 130 34 is_stmt 0 view .LVU42
 144 0036 516A     		ldr	r1, [r2, #36]
 130:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 145              		.loc 1 130 66 view .LVU43
 146 0038 0139     		subs	r1, r1, #1
 147 003a 5162     		str	r1, [r2, #36]
 133:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 148              		.loc 1 133 25 is_stmt 1 view .LVU44
 149              	.LVL8:
 138:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         {
 150              		.loc 1 138 25 view .LVU45
 138:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         {
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 18


 151              		.loc 1 138 28 is_stmt 0 view .LVU46
 152 003c 91B9     		cbnz	r1, .L3
 144:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         }
 153              		.loc 1 144 29 is_stmt 1 view .LVU47
 144:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         }
 154              		.loc 1 144 71 is_stmt 0 view .LVU48
 155 003e 1162     		str	r1, [r2, #32]
 156              	.LVL9:
 157              	.L4:
 168:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         {
 158              		.loc 1 168 25 is_stmt 1 view .LVU49
 168:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         {
 159              		.loc 1 168 40 is_stmt 0 view .LVU50
 160 0040 026B     		ldr	r2, [r0, #48]
 161              	.LVL10:
 168:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                         {
 162              		.loc 1 168 28 view .LVU51
 163 0042 082A     		cmp	r2, #8
 164 0044 E4D1     		bne	.L2
 184:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 165              		.loc 1 184 29 is_stmt 1 view .LVU52
 184:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 166              		.loc 1 184 68 is_stmt 0 view .LVU53
 167 0046 1022     		movs	r2, #16
 168 0048 C0F88420 		str	r2, [r0, #132]
 192:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 169              		.loc 1 192 29 is_stmt 1 view .LVU54
 192:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 170              		.loc 1 192 55 is_stmt 0 view .LVU55
 171 004c 0C49     		ldr	r1, .L7+8
 172 004e 0A68     		ldr	r2, [r1]
 173 0050 0132     		adds	r2, r2, #1
 174 0052 0A60     		str	r2, [r1]
 195:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 175              		.loc 1 195 29 is_stmt 1 view .LVU56
 176              	.LVL11:
 177              	.LBB22:
 178              	.LBI22:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 179              		.loc 2 556 55 view .LVU57
 180              	.LBB23:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 181              		.loc 2 562 5 view .LVU58
 182              		.syntax unified
 183              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 184 0054 83F31088 		MSR  PRIMASK,r3
 185              	@ 0 "" 2
 186              	.LVL12:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 187              		.loc 2 562 5 is_stmt 0 view .LVU59
 188              		.thumb
 189              		.syntax unified
 190              	.LBE23:
 191              	.LBE22:
 198:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 192              		.loc 1 198 29 is_stmt 1 view .LVU60
 193 0058 FFF7FEFF 		bl	_tx_thread_system_resume
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 19


 194              	.LVL13:
 201:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** #endif
 195              		.loc 1 201 29 view .LVU61
 196              	.LBB24:
 197              	.LBI24:
 566:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 198              		.loc 2 566 63 view .LVU62
 199              	.LBB25:
 568:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200              		.loc 2 568 1 view .LVU63
 570:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 201              		.loc 2 570 5 view .LVU64
 202              	.LBB26:
 203              	.LBI26:
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 204              		.loc 2 533 63 view .LVU65
 205              	.LBB27:
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 206              		.loc 2 535 1 view .LVU66
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 207              		.loc 2 539 5 view .LVU67
 208              		.syntax unified
 209              	@ 539 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 210 005c EFF31083 		MRS  r3, PRIMASK 
 211              	@ 0 "" 2
 212              	.LVL14:
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 213              		.loc 2 541 5 view .LVU68
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 214              		.loc 2 541 5 is_stmt 0 view .LVU69
 215              		.thumb
 216              		.syntax unified
 217              	.LBE27:
 218              	.LBE26:
 575:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 219              		.loc 2 575 5 is_stmt 1 view .LVU70
 220              		.syntax unified
 221              	@ 575 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 222 0060 72B6     		CPSID i
 223              	@ 0 "" 2
 224              		.loc 2 577 5 view .LVU71
 225              	.LVL15:
 226              		.loc 2 577 5 is_stmt 0 view .LVU72
 227              		.thumb
 228              		.syntax unified
 229 0062 D5E7     		b	.L2
 230              	.LVL16:
 231              	.L3:
 232              		.loc 2 577 5 view .LVU73
 233              	.LBE25:
 234              	.LBE24:
 152:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             previous_thread =                               thread_ptr -> tx_thread
 235              		.loc 1 152 29 is_stmt 1 view .LVU74
 152:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             previous_thread =                               thread_ptr -> tx_thread
 236              		.loc 1 152 41 is_stmt 0 view .LVU75
 237 0064 016F     		ldr	r1, [r0, #112]
 238              	.LVL17:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 20


 153:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             next_thread -> tx_thread_suspended_previous =   previous_thread;
 239              		.loc 1 153 29 is_stmt 1 view .LVU76
 153:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             next_thread -> tx_thread_suspended_previous =   previous_thread;
 240              		.loc 1 153 45 is_stmt 0 view .LVU77
 241 0066 446F     		ldr	r4, [r0, #116]
 242              	.LVL18:
 154:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             previous_thread -> tx_thread_suspended_next =   next_thread;
 243              		.loc 1 154 29 is_stmt 1 view .LVU78
 154:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             previous_thread -> tx_thread_suspended_next =   next_thread;
 244              		.loc 1 154 73 is_stmt 0 view .LVU79
 245 0068 4C67     		str	r4, [r1, #116]
 246              	.LVL19:
 155:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 247              		.loc 1 155 29 is_stmt 1 view .LVU80
 155:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c **** 
 248              		.loc 1 155 73 is_stmt 0 view .LVU81
 249 006a 2167     		str	r1, [r4, #112]
 158:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             {
 250              		.loc 1 158 29 is_stmt 1 view .LVU82
 158:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             {
 251              		.loc 1 158 42 is_stmt 0 view .LVU83
 252 006c 146A     		ldr	r4, [r2, #32]
 253              	.LVL20:
 158:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             {
 254              		.loc 1 158 32 view .LVU84
 255 006e 8442     		cmp	r4, r0
 256 0070 E6D1     		bne	.L4
 162:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             }
 257              		.loc 1 162 33 is_stmt 1 view .LVU85
 162:./Middlewares/ST/threadx/common/src/tx_block_pool_cleanup.c ****                             }
 258              		.loc 1 162 75 is_stmt 0 view .LVU86
 259 0072 1162     		str	r1, [r2, #32]
 260 0074 E4E7     		b	.L4
 261              	.L8:
 262 0076 00BF     		.align	2
 263              	.L7:
 264 0078 00000000 		.word	_tx_block_pool_cleanup
 265 007c 434F4C42 		.word	1112297283
 266 0080 00000000 		.word	_tx_thread_preempt_disable
 267              		.cfi_endproc
 268              	.LFE8:
 270              		.text
 271              	.Letext0:
 272              		.file 3 "./Middlewares/ST/threadx/common/inc/tx_api.h"
 273              		.file 4 "./Middlewares/ST/threadx/common/inc/tx_thread.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 tx_block_pool_cleanup.c
C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s:20     .text._tx_block_pool_cleanup:00000000 $t
C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s:26     .text._tx_block_pool_cleanup:00000000 _tx_block_pool_cleanup
C:\Users\Dennis\AppData\Local\Temp\ccnUOdWX.s:264    .text._tx_block_pool_cleanup:00000078 $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_thread_preempt_disable
