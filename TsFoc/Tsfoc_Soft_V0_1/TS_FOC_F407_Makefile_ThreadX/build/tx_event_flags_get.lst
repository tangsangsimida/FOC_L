ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tx_event_flags_get.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._tx_event_flags_get,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_event_flags_get
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_event_flags_get:
  27              	.LVL0:
  28              	.LFB8:
  29              		.file 1 "./Middlewares/ST/threadx/common/src/tx_event_flags_get.c"
   1:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
   2:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
   3:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
   5:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  10:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  11:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  12:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  13:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  14:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  15:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**                                                                       */
  16:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**                                                                       */
  18:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**   Event Flags                                                         */
  19:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**                                                                       */
  20:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  21:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  22:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  23:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #define TX_SOURCE_CODE
  24:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  25:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  26:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /* Include necessary system files.  */
  27:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  28:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #include "tx_api.h"
  29:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #include "tx_trace.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 2


  30:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #include "tx_thread.h"
  31:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #include "tx_event_flags.h"
  32:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  33:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  34:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  35:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  36:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  FUNCTION                                               RELEASE        */
  37:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  38:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    _tx_event_flags_get                                 PORTABLE C      */
  39:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                           6.1          */
  40:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  AUTHOR                                                                */
  41:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  42:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  44:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  DESCRIPTION                                                           */
  45:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  46:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    This function gets the specified event flags from the group,        */
  47:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    according to the get option.  The get option also specifies whether */
  48:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    or not the retrieved flags are cleared.                             */
  49:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  50:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  INPUT                                                                 */
  51:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  52:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    group_ptr                         Pointer to group control block    */
  53:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    requested_event_flags             Event flags requested             */
  54:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    get_option                        Specifies and/or and clear options*/
  55:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    actual_flags_ptr                  Pointer to place the actual flags */
  56:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                        the service retrieved           */
  57:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    wait_option                       Suspension option                 */
  58:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  59:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  OUTPUT                                                                */
  60:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  61:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    status                            Completion status                 */
  62:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  63:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  CALLS                                                                 */
  64:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  65:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    _tx_thread_system_suspend         Suspend thread service            */
  66:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  67:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  68:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  CALLED BY                                                             */
  69:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  70:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    Application Code                                                    */
  71:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  72:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  RELEASE HISTORY                                                       */
  73:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  74:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    DATE              NAME                      DESCRIPTION             */
  75:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  76:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  77:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  78:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                            resulting in version 6.1    */
  79:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  80:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  81:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
  82:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
  83:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** {
  30              		.loc 1 83 1 view -0
  31              		.cfi_startproc
  32              		@ args = 4, pretend = 0, frame = 0
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 3


  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 83 1 is_stmt 0 view .LVU1
  35 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38              		.cfi_offset 3, -24
  39              		.cfi_offset 4, -20
  40              		.cfi_offset 5, -16
  41              		.cfi_offset 6, -12
  42              		.cfi_offset 7, -8
  43              		.cfi_offset 14, -4
  44 0002 0746     		mov	r7, r0
  84:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  85:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** TX_INTERRUPT_SAVE_AREA
  45              		.loc 1 85 1 is_stmt 1 view .LVU2
  86:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  87:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            status;
  46              		.loc 1 87 1 view .LVU3
  88:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            and_request;
  47              		.loc 1 88 1 view .LVU4
  89:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            clear_request;
  48              		.loc 1 89 1 view .LVU5
  90:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** ULONG           current_flags;
  49              		.loc 1 90 1 view .LVU6
  91:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** ULONG           flags_satisfied;
  50              		.loc 1 91 1 view .LVU7
  92:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifndef TX_NOT_INTERRUPTABLE
  93:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** ULONG           delayed_clear_flags;
  51              		.loc 1 93 1 view .LVU8
  94:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
  95:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            suspended_count;
  52              		.loc 1 95 1 view .LVU9
  96:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** TX_THREAD       *thread_ptr;
  53              		.loc 1 96 1 view .LVU10
  97:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** TX_THREAD       *next_thread;
  54              		.loc 1 97 1 view .LVU11
  98:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** TX_THREAD       *previous_thread;
  55              		.loc 1 98 1 view .LVU12
  99:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifndef TX_NOT_INTERRUPTABLE
 100:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            interrupted_set_request;
  56              		.loc 1 100 1 view .LVU13
 101:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 102:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 103:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 104:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Disable interrupts to examine the event flags group.  */
 105:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     TX_DISABLE
  57              		.loc 1 105 5 view .LVU14
  58              	.LBB16:
  59              	.LBI16:
  60              		.file 2 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 4


   8:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 5


  65:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 6


 122:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 7


 179:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 8


 236:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 9


 293:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 10


 350:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 11


 407:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 12


 464:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 13


 521:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 540:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  61              		.loc 2 566 63 view .LVU15
  62              	.LBB17:
 567:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
  63              		.loc 2 568 1 view .LVU16
 569:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  64              		.loc 2 570 5 view .LVU17
  65              	.LBB18:
  66              	.LBI18:
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 14


  67              		.loc 2 533 63 view .LVU18
  68              	.LBB19:
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  69              		.loc 2 535 1 view .LVU19
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  70              		.loc 2 539 5 view .LVU20
  71              		.syntax unified
  72              	@ 539 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  73 0004 EFF3108C 		MRS  ip, PRIMASK 
  74              	@ 0 "" 2
  75              	.LVL1:
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  76              		.loc 2 541 5 view .LVU21
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  77              		.loc 2 541 5 is_stmt 0 view .LVU22
  78              		.thumb
  79              		.syntax unified
  80              	.LBE19:
  81              	.LBE18:
 571:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  82              		.loc 2 575 5 is_stmt 1 view .LVU23
  83              		.syntax unified
  84              	@ 575 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  85 0008 72B6     		CPSID i
  86              	@ 0 "" 2
 576:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 577:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(int_posture);
  87              		.loc 2 577 5 view .LVU24
  88              	.LVL2:
  89              		.loc 2 577 5 is_stmt 0 view .LVU25
  90              		.thumb
  91              		.syntax unified
  92              	.LBE17:
  93              	.LBE16:
 106:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 107:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifdef TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO
 108:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 109:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Increment the total event flags get counter.  */
 110:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     _tx_event_flags_performance_get_count++;
 111:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 112:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Increment the number of event flags gets on this semaphore.  */
 113:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     group_ptr -> tx_event_flags_group__performance_get_count++;
 114:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 115:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 116:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 117:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_EVENT_FLAGS_GET, group_ptr, requested_flags, group_ptr -> tx_e
 118:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 119:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Log this kernel call.  */
 120:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     TX_EL_EVENT_FLAGS_GET_INSERT
 121:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 122:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Pickup current flags.  */
 123:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     current_flags =  group_ptr -> tx_event_flags_group_current;
  94              		.loc 1 123 5 is_stmt 1 view .LVU26
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 15


  95              		.loc 1 123 19 is_stmt 0 view .LVU27
  96 000a 8468     		ldr	r4, [r0, #8]
  97              	.LVL3:
 124:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 125:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Apply the event flag option mask.  */
 126:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     and_request =  (get_option & TX_AND);
  98              		.loc 1 126 5 is_stmt 1 view .LVU28
  99              		.loc 1 126 17 is_stmt 0 view .LVU29
 100 000c 02F00206 		and	r6, r2, #2
 101              	.LVL4:
 127:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 128:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifdef TX_NOT_INTERRUPTABLE
 129:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 130:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Check for AND condition. All flags must be present to satisfy request.  */
 131:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (and_request == TX_AND)
 132:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 133:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 134:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* AND request is present.  */
 135:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 136:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Calculate the flags present.  */
 137:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 138:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 139:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine if they satisfy the AND request.  */
 140:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (flags_satisfied != requested_flags)
 141:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 142:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 143:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* No, not all the requested flags are present. Clear the flags present variable.  */
 144:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             flags_satisfied =  ((ULONG) 0);
 145:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 146:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 147:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     else
 148:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 149:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 150:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* OR request is present. Simply or the requested flags and the current flags.  */
 151:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 152:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 153:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 154:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Determine if the request is satisfied.  */
 155:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (flags_satisfied != ((ULONG) 0))
 156:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 157:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 158:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Return the actual event flags that satisfied the request.  */
 159:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         *actual_flags_ptr =  current_flags;
 160:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 161:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Pickup the clear bit.  */
 162:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 163:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 164:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine whether or not clearing needs to take place.  */
 165:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (clear_request == TX_TRUE)
 166:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 167:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 168:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****              /* Yes, clear the flags that satisfied this request.  */
 169:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****              group_ptr -> tx_event_flags_group_current =
 170:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & (~requested_fla
 171:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 172:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 173:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Return success.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 16


 174:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         status =  TX_SUCCESS;
 175:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 176:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 177:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #else
 178:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 179:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Pickup delayed clear flags.  */
 180:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 102              		.loc 1 180 5 is_stmt 1 view .LVU30
 103              		.loc 1 180 25 is_stmt 0 view .LVU31
 104 0010 056A     		ldr	r5, [r0, #32]
 105              	.LVL5:
 181:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 182:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Determine if there are any delayed clear operations pending.  */
 183:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (delayed_clear_flags != ((ULONG) 0))
 106              		.loc 1 183 5 is_stmt 1 view .LVU32
 107              		.loc 1 183 8 is_stmt 0 view .LVU33
 108 0012 0DB1     		cbz	r5, .L2
 184:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 185:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 186:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Yes, apply them to the current flags.  */
 187:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         current_flags =  current_flags & (~delayed_clear_flags);
 109              		.loc 1 187 9 is_stmt 1 view .LVU34
 110              		.loc 1 187 23 is_stmt 0 view .LVU35
 111 0014 24EA0504 		bic	r4, r4, r5
 112              	.LVL6:
 113              	.L2:
 188:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 189:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 190:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Check for AND condition. All flags must be present to satisfy request.  */
 191:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (and_request == TX_AND)
 114              		.loc 1 191 5 is_stmt 1 view .LVU36
 115              		.loc 1 191 8 is_stmt 0 view .LVU37
 116 0018 002E     		cmp	r6, #0
 117 001a 39D0     		beq	.L3
 192:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 193:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 194:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* AND request is present.  */
 195:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 196:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Calculate the flags present.  */
 197:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 118              		.loc 1 197 9 is_stmt 1 view .LVU38
 119              		.loc 1 197 25 is_stmt 0 view .LVU39
 120 001c 04EA0100 		and	r0, r4, r1
 121              	.LVL7:
 198:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 199:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine if they satisfy the AND request.  */
 200:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (flags_satisfied != requested_flags)
 122              		.loc 1 200 9 is_stmt 1 view .LVU40
 123              		.loc 1 200 12 is_stmt 0 view .LVU41
 124 0020 31EA0405 		bics	r5, r1, r4
 125              	.LVL8:
 126              		.loc 1 200 12 view .LVU42
 127 0024 36D0     		beq	.L5
 128              	.L4:
 129              	.LVL9:
 201:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 202:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 17


 203:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* No, not all the requested flags are present. Clear the flags present variable.  */
 204:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             flags_satisfied =  ((ULONG) 0);
 205:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 206:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 207:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     else
 208:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 209:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 210:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* OR request is present. Simply AND together the requested flags and the current flags
 211:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****            to see if any are present.  */
 212:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 213:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 214:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 215:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Determine if the request is satisfied.  */
 216:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (flags_satisfied != ((ULONG) 0))
 217:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 218:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 219:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Yes, this request can be handled immediately.  */
 220:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 221:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Return the actual event flags that satisfied the request.  */
 222:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         *actual_flags_ptr =  current_flags;
 223:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 224:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Pickup the clear bit.  */
 225:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 226:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 227:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine whether or not clearing needs to take place.  */
 228:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (clear_request == TX_TRUE)
 229:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 230:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 231:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Set interrupted set request flag to false.  */
 232:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             interrupted_set_request =  TX_FALSE;
 233:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 234:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Determine if the suspension list is being processed by an interrupted
 235:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                set request.  */
 236:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 237:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 238:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 239:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 240:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 241:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 242:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     /* Set the interrupted set request flag.  */
 243:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     interrupted_set_request =  TX_TRUE;
 244:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 245:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 246:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 247:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Was a set request interrupted?  */
 248:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             if (interrupted_set_request == TX_TRUE)
 249:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 250:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 251:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* A previous set operation is was interrupted, we need to defer the
 252:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                    event clearing until the set operation is complete.  */
 253:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 254:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Remember the events to clear.  */
 255:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group_delayed_clear =
 256:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_delayed_clear | requested
 257:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 258:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             else
 259:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 18


 260:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 261:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Yes, clear the flags that satisfied this request.  */
 262:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group_current =
 263:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & ~requested_flag
 264:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 265:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 266:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 267:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Set status to success.  */
 268:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         status =  TX_SUCCESS;
 269:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 270:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 271:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 272:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     else
 273:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 274:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 275:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine if the request specifies suspension.  */
 276:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (wait_option != TX_NO_WAIT)
 130              		.loc 1 276 9 is_stmt 1 view .LVU43
 131              		.loc 1 276 12 is_stmt 0 view .LVU44
 132 0026 0698     		ldr	r0, [sp, #24]
 133 0028 0028     		cmp	r0, #0
 134 002a 4FD0     		beq	.L10
 277:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 278:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 279:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Determine if the preempt disable flag is non-zero.  */
 280:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             if (_tx_thread_preempt_disable != ((UINT) 0))
 135              		.loc 1 280 13 is_stmt 1 view .LVU45
 136              		.loc 1 280 44 is_stmt 0 view .LVU46
 137 002c 2948     		ldr	r0, .L14
 138 002e 0068     		ldr	r0, [r0]
 139              		.loc 1 280 16 view .LVU47
 140 0030 0028     		cmp	r0, #0
 141 0032 4DD1     		bne	.L11
 281:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 282:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 283:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
 284:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 status =  TX_NO_EVENTS;
 285:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 286:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             else
 287:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 288:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 289:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Prepare for suspension of this thread.  */
 290:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 291:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifdef TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO
 292:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 293:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Increment the total event flags suspensions counter.  */
 294:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 _tx_event_flags_performance_suspension_count++;
 295:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 296:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Increment the number of event flags suspensions on this semaphore.  */
 297:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group___performance_suspension_count++;
 298:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 299:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 300:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Pickup thread pointer.  */
 301:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 TX_THREAD_GET_CURRENT(thread_ptr)
 142              		.loc 1 301 17 is_stmt 1 view .LVU48
 143 0034 2848     		ldr	r0, .L14+4
 144 0036 0468     		ldr	r4, [r0]
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 19


 145              	.LVL10:
 302:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 303:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Setup cleanup routine pointer.  */
 304:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 146              		.loc 1 304 17 view .LVU49
 147              		.loc 1 304 57 is_stmt 0 view .LVU50
 148 0038 2848     		ldr	r0, .L14+8
 149 003a A066     		str	r0, [r4, #104]
 150              	.LVL11:
 305:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 306:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Remember which event flags we are looking for.  */
 307:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_info =  requested_flags;
 151              		.loc 1 307 17 is_stmt 1 view .LVU51
 152              		.loc 1 307 54 is_stmt 0 view .LVU52
 153 003c A167     		str	r1, [r4, #120]
 308:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 309:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Save the get option as well.  */
 310:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_option =  get_option;
 154              		.loc 1 310 17 is_stmt 1 view .LVU53
 155              		.loc 1 310 56 is_stmt 0 view .LVU54
 156 003e C4F88020 		str	r2, [r4, #128]
 311:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 312:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Save the destination for the current events.  */
 313:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 157              		.loc 1 313 17 is_stmt 1 view .LVU55
 158              		.loc 1 313 65 is_stmt 0 view .LVU56
 159 0042 E367     		str	r3, [r4, #124]
 314:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 315:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Setup cleanup information, i.e. this event flags group control
 316:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                    block.  */
 317:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 160              		.loc 1 317 17 is_stmt 1 view .LVU57
 161              		.loc 1 317 63 is_stmt 0 view .LVU58
 162 0044 E766     		str	r7, [r4, #108]
 318:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 319:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifndef TX_NOT_INTERRUPTABLE
 320:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 321:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Increment the suspension sequence number, which is used to identify
 322:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                    this suspension event.  */
 323:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspension_sequence++;
 163              		.loc 1 323 17 is_stmt 1 view .LVU59
 164              		.loc 1 323 28 is_stmt 0 view .LVU60
 165 0046 D4F8AC30 		ldr	r3, [r4, #172]
 166              	.LVL12:
 167              		.loc 1 323 60 view .LVU61
 168 004a 0133     		adds	r3, r3, #1
 169 004c C4F8AC30 		str	r3, [r4, #172]
 324:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 325:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 326:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Pickup the suspended count.  */
 327:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 170              		.loc 1 327 17 is_stmt 1 view .LVU62
 171              		.loc 1 327 33 is_stmt 0 view .LVU63
 172 0050 7B69     		ldr	r3, [r7, #20]
 173              	.LVL13:
 328:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 329:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Setup suspension list.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 20


 330:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 if (suspended_count == TX_NO_SUSPENSIONS)
 174              		.loc 1 330 17 is_stmt 1 view .LVU64
 175              		.loc 1 330 20 is_stmt 0 view .LVU65
 176 0052 002B     		cmp	r3, #0
 177 0054 33D1     		bne	.L8
 331:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 332:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 333:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     /* No other threads are suspended.  Setup the head pointer and
 334:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                        just setup this threads pointers to itself.  */
 335:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 178              		.loc 1 335 21 is_stmt 1 view .LVU66
 179              		.loc 1 335 71 is_stmt 0 view .LVU67
 180 0056 3C61     		str	r4, [r7, #16]
 181              	.LVL14:
 336:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 182              		.loc 1 336 21 is_stmt 1 view .LVU68
 183              		.loc 1 336 60 is_stmt 0 view .LVU69
 184 0058 2467     		str	r4, [r4, #112]
 337:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 185              		.loc 1 337 21 is_stmt 1 view .LVU70
 186              		.loc 1 337 64 is_stmt 0 view .LVU71
 187 005a 6467     		str	r4, [r4, #116]
 188              	.LVL15:
 189              	.L9:
 338:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 339:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 else
 340:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 341:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 342:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     /* This list is not NULL, add current thread to the end. */
 343:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     next_thread =                                   group_ptr -> tx_event_flags_gro
 344:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 345:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 346:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 347:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 348:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 349:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 350:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 351:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Increment the number of threads suspended.  */
 352:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group_suspended_count++;
 190              		.loc 1 352 17 is_stmt 1 view .LVU72
 191              		.loc 1 352 27 is_stmt 0 view .LVU73
 192 005c 7B69     		ldr	r3, [r7, #20]
 193              		.loc 1 352 66 view .LVU74
 194 005e 0133     		adds	r3, r3, #1
 195 0060 7B61     		str	r3, [r7, #20]
 353:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 354:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Set the state to suspended.  */
 355:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 196              		.loc 1 355 17 is_stmt 1 view .LVU75
 197              		.loc 1 355 47 is_stmt 0 view .LVU76
 198 0062 0723     		movs	r3, #7
 199 0064 2363     		str	r3, [r4, #48]
 356:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 357:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifdef TX_NOT_INTERRUPTABLE
 358:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 359:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Call actual non-interruptable thread suspension routine.  */
 360:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 _tx_thread_system_ni_suspend(thread_ptr, wait_option);
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 21


 361:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 362:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Return the completion status.  */
 363:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 status =  thread_ptr -> tx_thread_suspend_status;
 364:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #else
 365:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 366:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Set the suspending flag.  */
 367:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspending =  TX_TRUE;
 200              		.loc 1 367 17 is_stmt 1 view .LVU77
 201              		.loc 1 367 52 is_stmt 0 view .LVU78
 202 0066 0123     		movs	r3, #1
 203 0068 A363     		str	r3, [r4, #56]
 368:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 369:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Setup the timeout period.  */
 370:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 204              		.loc 1 370 17 is_stmt 1 view .LVU79
 205              		.loc 1 370 81 is_stmt 0 view .LVU80
 206 006a 069B     		ldr	r3, [sp, #24]
 207 006c E364     		str	r3, [r4, #76]
 371:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 372:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Temporarily disable preemption.  */
 373:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 _tx_thread_preempt_disable++;
 208              		.loc 1 373 17 is_stmt 1 view .LVU81
 209              		.loc 1 373 43 is_stmt 0 view .LVU82
 210 006e 194A     		ldr	r2, .L14
 211 0070 1368     		ldr	r3, [r2]
 212 0072 0133     		adds	r3, r3, #1
 213 0074 1360     		str	r3, [r2]
 374:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 375:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Restore interrupts.  */
 376:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 TX_RESTORE
 214              		.loc 1 376 17 is_stmt 1 view .LVU83
 215              	.LVL16:
 216              	.LBB20:
 217              	.LBI20:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 218              		.loc 2 556 55 view .LVU84
 219              	.LBB21:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 220              		.loc 2 562 5 view .LVU85
 221              		.syntax unified
 222              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 223 0076 8CF31088 		MSR  PRIMASK,ip
 224              	@ 0 "" 2
 225              	.LVL17:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 226              		.loc 2 562 5 is_stmt 0 view .LVU86
 227              		.thumb
 228              		.syntax unified
 229              	.LBE21:
 230              	.LBE20:
 377:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 378:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Call actual thread suspension routine.  */
 379:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 _tx_thread_system_suspend(thread_ptr);
 231              		.loc 1 379 17 is_stmt 1 view .LVU87
 232 007a 2046     		mov	r0, r4
 233 007c FFF7FEFF 		bl	_tx_thread_system_suspend
 234              	.LVL18:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 22


 380:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 381:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Disable interrupts.  */
 382:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 TX_DISABLE
 235              		.loc 1 382 17 view .LVU88
 236              	.LBB22:
 237              	.LBI22:
 566:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 238              		.loc 2 566 63 view .LVU89
 239              	.LBB23:
 568:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240              		.loc 2 568 1 view .LVU90
 570:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241              		.loc 2 570 5 view .LVU91
 242              	.LBB24:
 243              	.LBI24:
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 244              		.loc 2 533 63 view .LVU92
 245              	.LBB25:
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 246              		.loc 2 535 1 view .LVU93
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 247              		.loc 2 539 5 view .LVU94
 248              		.syntax unified
 249              	@ 539 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 250 0080 EFF3108C 		MRS  ip, PRIMASK 
 251              	@ 0 "" 2
 252              	.LVL19:
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 253              		.loc 2 541 5 view .LVU95
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 254              		.loc 2 541 5 is_stmt 0 view .LVU96
 255              		.thumb
 256              		.syntax unified
 257              	.LBE25:
 258              	.LBE24:
 575:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 259              		.loc 2 575 5 is_stmt 1 view .LVU97
 260              		.syntax unified
 261              	@ 575 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 262 0084 72B6     		CPSID i
 263              	@ 0 "" 2
 264              		.loc 2 577 5 view .LVU98
 265              	.LVL20:
 266              		.loc 2 577 5 is_stmt 0 view .LVU99
 267              		.thumb
 268              		.syntax unified
 269              	.LBE23:
 270              	.LBE22:
 383:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 384:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Return the completion status.  */
 385:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 status =  thread_ptr -> tx_thread_suspend_status;
 271              		.loc 1 385 17 is_stmt 1 view .LVU100
 272              		.loc 1 385 24 is_stmt 0 view .LVU101
 273 0086 D4F88400 		ldr	r0, [r4, #132]
 274              	.LVL21:
 275              	.L6:
 386:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 23


 387:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 388:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 389:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         else
 390:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 391:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 392:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Immediate return, return error completion.  */
 393:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             status =  TX_NO_EVENTS;
 394:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 395:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 396:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 397:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Restore interrupts.  */
 398:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     TX_RESTORE
 276              		.loc 1 398 5 is_stmt 1 view .LVU102
 277              	.LBB26:
 278              	.LBI26:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 279              		.loc 2 556 55 view .LVU103
 280              	.LBB27:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 281              		.loc 2 562 5 view .LVU104
 282              		.syntax unified
 283              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 284 008a 8CF31088 		MSR  PRIMASK,ip
 285              	@ 0 "" 2
 286              	.LVL22:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 287              		.loc 2 562 5 is_stmt 0 view .LVU105
 288              		.thumb
 289              		.syntax unified
 290              	.LBE27:
 291              	.LBE26:
 399:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 400:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Return completion status.  */
 401:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     return(status);
 292              		.loc 1 401 5 is_stmt 1 view .LVU106
 402:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** }
 293              		.loc 1 402 1 is_stmt 0 view .LVU107
 294 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 295              	.LVL23:
 296              	.L3:
 212:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 297              		.loc 1 212 9 is_stmt 1 view .LVU108
 212:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 298              		.loc 1 212 25 is_stmt 0 view .LVU109
 299 0090 04EA0100 		and	r0, r4, r1
 300              	.LVL24:
 301              	.L5:
 216:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 302              		.loc 1 216 5 is_stmt 1 view .LVU110
 216:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 303              		.loc 1 216 8 is_stmt 0 view .LVU111
 304 0094 0028     		cmp	r0, #0
 305 0096 C6D0     		beq	.L4
 222:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 306              		.loc 1 222 9 is_stmt 1 view .LVU112
 222:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 307              		.loc 1 222 27 is_stmt 0 view .LVU113
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 24


 308 0098 1C60     		str	r4, [r3]
 309              	.LVL25:
 225:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 310              		.loc 1 225 9 is_stmt 1 view .LVU114
 228:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 311              		.loc 1 228 9 view .LVU115
 228:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 312              		.loc 1 228 12 is_stmt 0 view .LVU116
 313 009a 12F00100 		ands	r0, r2, #1
 314              	.LVL26:
 228:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 315              		.loc 1 228 12 view .LVU117
 316 009e F4D0     		beq	.L6
 232:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 317              		.loc 1 232 13 is_stmt 1 view .LVU118
 318              	.LVL27:
 236:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 319              		.loc 1 236 13 view .LVU119
 236:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 320              		.loc 1 236 27 is_stmt 0 view .LVU120
 321 00a0 7B69     		ldr	r3, [r7, #20]
 322              	.LVL28:
 236:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 323              		.loc 1 236 16 view .LVU121
 324 00a2 0BB1     		cbz	r3, .L7
 239:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 325              		.loc 1 239 17 is_stmt 1 view .LVU122
 239:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 326              		.loc 1 239 31 is_stmt 0 view .LVU123
 327 00a4 3B69     		ldr	r3, [r7, #16]
 239:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 328              		.loc 1 239 20 view .LVU124
 329 00a6 2BB1     		cbz	r3, .L13
 330              	.L7:
 331              	.LVL29:
 262:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & ~requested_flag
 332              		.loc 1 262 17 is_stmt 1 view .LVU125
 263:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 333              		.loc 1 263 51 is_stmt 0 view .LVU126
 334 00a8 BB68     		ldr	r3, [r7, #8]
 263:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 335              		.loc 1 263 83 view .LVU127
 336 00aa 23EA0101 		bic	r1, r3, r1
 337              	.LVL30:
 262:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & ~requested_flag
 338              		.loc 1 262 59 view .LVU128
 339 00ae B960     		str	r1, [r7, #8]
 268:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 340              		.loc 1 268 16 view .LVU129
 341 00b0 0020     		movs	r0, #0
 342              	.LVL31:
 268:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 343              		.loc 1 268 16 view .LVU130
 344 00b2 EAE7     		b	.L6
 345              	.LVL32:
 346              	.L13:
 243:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 25


 347              		.loc 1 243 21 is_stmt 1 view .LVU131
 248:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 348              		.loc 1 248 13 view .LVU132
 255:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_delayed_clear | requested
 349              		.loc 1 255 17 view .LVU133
 256:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 350              		.loc 1 256 51 is_stmt 0 view .LVU134
 351 00b4 3B6A     		ldr	r3, [r7, #32]
 256:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 352              		.loc 1 256 89 view .LVU135
 353 00b6 1943     		orrs	r1, r1, r3
 354              	.LVL33:
 255:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_delayed_clear | requested
 355              		.loc 1 255 65 view .LVU136
 356 00b8 3962     		str	r1, [r7, #32]
 268:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 357              		.loc 1 268 16 view .LVU137
 358 00ba 0020     		movs	r0, #0
 359              	.LVL34:
 268:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 360              		.loc 1 268 16 view .LVU138
 361 00bc E5E7     		b	.L6
 362              	.LVL35:
 363              	.L8:
 343:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 364              		.loc 1 343 21 is_stmt 1 view .LVU139
 343:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 365              		.loc 1 343 33 is_stmt 0 view .LVU140
 366 00be 3B69     		ldr	r3, [r7, #16]
 367              	.LVL36:
 344:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 368              		.loc 1 344 21 is_stmt 1 view .LVU141
 344:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 369              		.loc 1 344 60 is_stmt 0 view .LVU142
 370 00c0 2367     		str	r3, [r4, #112]
 371              	.LVL37:
 345:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 372              		.loc 1 345 21 is_stmt 1 view .LVU143
 345:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 373              		.loc 1 345 37 is_stmt 0 view .LVU144
 374 00c2 5A6F     		ldr	r2, [r3, #116]
 375              	.LVL38:
 346:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 376              		.loc 1 346 21 is_stmt 1 view .LVU145
 346:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 377              		.loc 1 346 64 is_stmt 0 view .LVU146
 378 00c4 6267     		str	r2, [r4, #116]
 347:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 379              		.loc 1 347 21 is_stmt 1 view .LVU147
 347:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 380              		.loc 1 347 65 is_stmt 0 view .LVU148
 381 00c6 1467     		str	r4, [r2, #112]
 382              	.LVL39:
 348:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 383              		.loc 1 348 21 is_stmt 1 view .LVU149
 348:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 384              		.loc 1 348 65 is_stmt 0 view .LVU150
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 26


 385 00c8 5C67     		str	r4, [r3, #116]
 386 00ca C7E7     		b	.L9
 387              	.LVL40:
 388              	.L10:
 393:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 389              		.loc 1 393 20 view .LVU151
 390 00cc 0720     		movs	r0, #7
 391 00ce DCE7     		b	.L6
 392              	.L11:
 284:./Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 393              		.loc 1 284 24 view .LVU152
 394 00d0 0720     		movs	r0, #7
 395 00d2 DAE7     		b	.L6
 396              	.L15:
 397              		.align	2
 398              	.L14:
 399 00d4 00000000 		.word	_tx_thread_preempt_disable
 400 00d8 00000000 		.word	_tx_thread_current_ptr
 401 00dc 00000000 		.word	_tx_event_flags_cleanup
 402              		.cfi_endproc
 403              	.LFE8:
 405              		.text
 406              	.Letext0:
 407              		.file 3 "./Middlewares/ST/threadx/common/inc/tx_api.h"
 408              		.file 4 "./Middlewares/ST/threadx/common/inc/tx_thread.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 tx_event_flags_get.c
C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s:20     .text._tx_event_flags_get:00000000 $t
C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s:26     .text._tx_event_flags_get:00000000 _tx_event_flags_get
C:\Users\Dennis\AppData\Local\Temp\ccz8AEXz.s:399    .text._tx_event_flags_get:000000d4 $d

UNDEFINED SYMBOLS
_tx_thread_system_suspend
_tx_thread_preempt_disable
_tx_thread_current_ptr
_tx_event_flags_cleanup
