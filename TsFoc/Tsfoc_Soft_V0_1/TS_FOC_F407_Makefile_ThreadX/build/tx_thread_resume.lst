ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tx_thread_resume.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._tx_thread_resume,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_thread_resume
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_thread_resume:
  27              	.LVL0:
  28              	.LFB8:
  29              		.file 1 "./Middlewares/ST/threadx/common/src/tx_thread_resume.c"
   1:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**************************************************************************/
   2:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
   3:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
   5:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  10:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**************************************************************************/
  11:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  12:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  13:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**************************************************************************/
  14:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**************************************************************************/
  15:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**                                                                       */
  16:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**                                                                       */
  18:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**   Thread                                                              */
  19:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**                                                                       */
  20:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**************************************************************************/
  21:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**************************************************************************/
  22:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  23:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #define TX_SOURCE_CODE
  24:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  25:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  26:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /* Include necessary system files.  */
  27:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  28:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #include "tx_api.h"
  29:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #include "tx_trace.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 2


  30:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #include "tx_thread.h"
  31:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #include "tx_initialize.h"
  32:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  33:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  34:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**************************************************************************/
  35:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  36:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  FUNCTION                                               RELEASE        */
  37:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  38:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    _tx_thread_resume                                   PORTABLE C      */
  39:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                           6.1          */
  40:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  AUTHOR                                                                */
  41:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  42:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  44:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  DESCRIPTION                                                           */
  45:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  46:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    This function processes application resume thread services. Actual  */
  47:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    thread resumption is performed in the core service.                 */
  48:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  49:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  INPUT                                                                 */
  50:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  51:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    thread_ptr                            Pointer to thread to resume   */
  52:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  53:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  OUTPUT                                                                */
  54:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  55:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    status                                Service return status         */
  56:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  57:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  CALLS                                                                 */
  58:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  59:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    _tx_thread_system_resume          Resume thread                     */
  60:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  61:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  62:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  CALLED BY                                                             */
  63:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  64:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    Application Code                                                    */
  65:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  66:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  RELEASE HISTORY                                                       */
  67:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  68:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*    DATE              NAME                      DESCRIPTION             */
  69:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  70:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  71:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  72:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                            resulting in version 6.1    */
  73:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /*                                                                        */
  74:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** /**************************************************************************/
  75:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
  76:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** {
  30              		.loc 1 76 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 76 1 is_stmt 0 view .LVU1
  35 0000 38B5     		push	{r3, r4, r5, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 3, -16
  39              		.cfi_offset 4, -12
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 3


  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
  77:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  78:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** TX_INTERRUPT_SAVE_AREA
  42              		.loc 1 78 1 is_stmt 1 view .LVU2
  79:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  80:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** UINT        status;
  43              		.loc 1 80 1 view .LVU3
  81:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** TX_THREAD   *saved_thread_ptr;
  44              		.loc 1 81 1 view .LVU4
  82:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** UINT        saved_threshold =  ((UINT) 0);
  45              		.loc 1 82 1 view .LVU5
  46              	.LVL1:
  83:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  84:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_INLINE_THREAD_RESUME_SUSPEND
  85:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** UINT            priority;
  86:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** ULONG           priority_bit;
  87:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** TX_THREAD       *head_ptr;
  88:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** TX_THREAD       *tail_ptr;
  89:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** TX_THREAD       *execute_ptr;
  90:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** TX_THREAD       *current_thread;
  91:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** ULONG           combined_flags;
  92:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  93:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
  94:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** TX_TRACE_BUFFER_ENTRY       *entry_ptr;
  95:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** ULONG                       time_stamp =  ((ULONG) 0);
  96:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
  97:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
  98:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #if TX_MAX_PRIORITIES > 32
  99:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** UINT            map_index;
 100:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 101:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 102:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 103:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_STACK_CHECKING
 104:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 105:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     /* Check this thread's stack.  */
 106:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     TX_THREAD_STACK_CHECK(thread_ptr)
 107:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 108:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 109:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 110:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     /* Lockout interrupts while the thread is being resumed.  */
 111:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     TX_DISABLE
  47              		.loc 1 111 5 view .LVU6
  48              	.LBB14:
  49              	.LBI14:
  50              		.file 2 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 4


  12:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 5


  69:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 6


 126:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 7


 183:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 8


 240:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 9


 297:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 10


 354:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 11


 411:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 12


 468:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 13


 525:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 540:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  51              		.loc 2 566 63 view .LVU7
  52              	.LBB15:
 567:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
  53              		.loc 2 568 1 view .LVU8
 569:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  54              		.loc 2 570 5 view .LVU9
  55              	.LBB16:
  56              	.LBI16:
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  57              		.loc 2 533 63 view .LVU10
  58              	.LBB17:
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  59              		.loc 2 535 1 view .LVU11
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 14


 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  60              		.loc 2 539 5 view .LVU12
  61              		.syntax unified
  62              	@ 539 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  63 0002 EFF31082 		MRS  r2, PRIMASK 
  64              	@ 0 "" 2
  65              	.LVL2:
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  66              		.loc 2 541 5 view .LVU13
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  67              		.loc 2 541 5 is_stmt 0 view .LVU14
  68              		.thumb
  69              		.syntax unified
  70              	.LBE17:
  71              	.LBE16:
 571:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  72              		.loc 2 575 5 is_stmt 1 view .LVU15
  73              		.syntax unified
  74              	@ 575 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  75 0006 72B6     		CPSID i
  76              	@ 0 "" 2
 576:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 577:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(int_posture);
  77              		.loc 2 577 5 view .LVU16
  78              	.LVL3:
  79              		.loc 2 577 5 is_stmt 0 view .LVU17
  80              		.thumb
  81              		.syntax unified
  82              	.LBE15:
  83              	.LBE14:
 112:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 113:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 114:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME_API, thread_ptr, thread_ptr -> tx_thread_state, 
 115:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 116:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     /* Log this kernel call.  */
 117:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     TX_EL_THREAD_RESUME_INSERT
 118:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 119:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     /* Determine if the thread is suspended or in the process of suspending.
 120:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****        If so, call the thread resume processing.  */
 121:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
  84              		.loc 1 121 5 is_stmt 1 view .LVU18
  85              		.loc 1 121 20 is_stmt 0 view .LVU19
  86 0008 036B     		ldr	r3, [r0, #48]
  87              		.loc 1 121 8 view .LVU20
  88 000a 032B     		cmp	r3, #3
  89 000c 06D0     		beq	.L11
 122:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     {
 123:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 124:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Determine if the create call is being called from initialization.  */
 125:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 126:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 127:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 128:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Yes, this resume call was made from initialization.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 15


 129:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 130:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Pickup the current thread execute pointer, which corresponds to the
 131:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                highest priority thread ready to execute.  Interrupt lockout is
 132:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                not required, since interrupts are assumed to be disabled during
 133:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                initialization.  */
 134:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             saved_thread_ptr =  _tx_thread_execute_ptr;
 135:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 136:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Determine if there is thread ready for execution.  */
 137:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             if (saved_thread_ptr != TX_NULL)
 138:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             {
 139:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 140:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 /* Yes, a thread is ready for execution when initialization completes.  */
 141:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 142:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 /* Save the current preemption-threshold.  */
 143:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 144:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 145:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 /* For initialization, temporarily set the preemption-threshold to the
 146:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                    priority level to make sure the highest-priority thread runs once
 147:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                    initialization is complete.  */
 148:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_pr
 149:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             }
 150:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 151:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         else
 152:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 153:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 154:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Simply set the saved thread pointer to NULL.  */
 155:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             saved_thread_ptr =  TX_NULL;
 156:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 157:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 158:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifndef TX_INLINE_THREAD_RESUME_SUSPEND
 159:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 160:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_NOT_INTERRUPTABLE
 161:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 162:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Resume the thread!  */
 163:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         _tx_thread_system_ni_resume(thread_ptr);
 164:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 165:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Restore interrupts.  */
 166:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         TX_RESTORE
 167:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #else
 168:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 169:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Temporarily disable preemption.  */
 170:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         _tx_thread_preempt_disable++;
 171:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 172:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Restore interrupts.  */
 173:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         TX_RESTORE
 174:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 175:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Call the actual resume service to resume the thread.  */
 176:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         _tx_thread_system_resume(thread_ptr);
 177:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 178:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 179:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Determine if the thread's preemption-threshold needs to be restored.  */
 180:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         if (saved_thread_ptr != TX_NULL)
 181:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 182:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 183:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Yes, restore the previous highest-priority thread's preemption-threshold. This
 184:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                can only happen if this routine is called from initialization.  */
 185:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 16


 186:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 187:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 188:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_MISRA_ENABLE
 189:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 190:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Disable interrupts.  */
 191:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         TX_DISABLE
 192:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 193:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Setup successful return status.  */
 194:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         status =  TX_SUCCESS;
 195:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #else
 196:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 197:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Return successful completion.  */
 198:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         return(TX_SUCCESS);
 199:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 200:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 201:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 202:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #else
 203:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 204:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* In-line thread resumption processing follows, which is effectively just taking the
 205:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****            logic in tx_thread_system_resume.c and placing it here!  */
 206:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 207:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Resume the thread!  */
 208:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 209:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
 210:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 211:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* If trace is enabled, save the current event pointer.  */
 212:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         entry_ptr =  _tx_trace_buffer_current_ptr;
 213:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 214:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 215:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Log the thread status change.  */
 216:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, 
 217:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 218:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
 219:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 220:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Save the time stamp for later comparison to verify that
 221:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****            the event hasn't been overwritten by the time we have
 222:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****            computed the next thread to execute.  */
 223:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         if (entry_ptr != TX_NULL)
 224:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 225:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 226:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Save time stamp.  */
 227:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 228:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 229:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 230:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 231:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Make this thread ready.  */
 232:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 233:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Change the state to ready.  */
 234:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         thread_ptr -> tx_thread_state =  TX_READY;
 235:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 236:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Pickup priority of thread.  */
 237:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         priority =  thread_ptr -> tx_thread_priority;
 238:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 239:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Thread state change.  */
 240:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         TX_THREAD_STATE_CHANGE(thread_ptr, TX_READY)
 241:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 242:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Log the thread status change.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 17


 243:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, TX_READY)
 244:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 245:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 246:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 247:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Increment the total number of thread resumptions.  */
 248:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         _tx_thread_performance_resume_count++;
 249:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 250:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Increment this thread's resume count.  */
 251:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         thread_ptr -> tx_thread_performance_resume_count++;
 252:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 253:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 254:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Determine if there are other threads at this priority that are
 255:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****            ready.  */
 256:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         head_ptr =  _tx_thread_priority_list[priority];
 257:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         if (head_ptr == TX_NULL)
 258:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 259:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 260:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* First thread at this priority ready.  Add to the front of the list.  */
 261:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             _tx_thread_priority_list[priority] =       thread_ptr;
 262:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             thread_ptr -> tx_thread_ready_next =       thread_ptr;
 263:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 264:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 265:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #if TX_MAX_PRIORITIES > 32
 266:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 267:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Calculate the index into the bit map array.  */
 268:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             map_index =  priority/((UINT) 32);
 269:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 270:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Set the active bit to remember that the priority map has something set.  */
 271:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             TX_DIV32_BIT_SET(priority, priority_bit)
 272:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
 273:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 274:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 275:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Or in the thread's priority bit.  */
 276:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             TX_MOD32_BIT_SET(priority, priority_bit)
 277:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_b
 278:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 279:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Determine if this newly ready thread is the highest priority.  */
 280:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             if (priority < _tx_thread_highest_priority)
 281:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             {
 282:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 283:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 /* A new highest priority thread is present. */
 284:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 285:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 /* Update the highest priority variable.  */
 286:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 _tx_thread_highest_priority =  priority;
 287:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 288:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 /* Pickup the execute pointer. Since it is going to be referenced multiple
 289:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                    times, it is placed in a local variable.  */
 290:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 execute_ptr =  _tx_thread_execute_ptr;
 291:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 292:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 /* Determine if no thread is currently executing.  */
 293:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 if (execute_ptr == TX_NULL)
 294:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 {
 295:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 296:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                     /* Simply setup the execute pointer.  */
 297:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                     _tx_thread_execute_ptr =  thread_ptr;
 298:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 }
 299:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 else
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 18


 300:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 {
 301:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 302:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                     /* Another thread has been scheduled for execution.  */
 303:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 304:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                     /* Check to see if this is a higher priority thread and determine if preemption
 305:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                     if (priority < execute_ptr -> tx_thread_preempt_threshold)
 306:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                     {
 307:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 308:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 309:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 310:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Determine if the preempted thread had preemption-threshold set.  */
 311:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_
 312:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         {
 313:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 314:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #if TX_MAX_PRIORITIES > 32
 315:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 316:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Calculate the index into the bit map array.  */
 317:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             map_index =  (execute_ptr -> tx_thread_priority)/((UINT) 32);
 318:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 319:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Set the active bit to remember that the preempt map has something se
 320:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 321:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | pr
 322:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 323:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 324:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Remember that this thread was preempted by a thread above the thread
 325:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 326:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_I
 327:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         }
 328:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 329:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 330:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 331:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 332:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Determine if the caller is an interrupt or from a thread.  */
 333:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 334:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         {
 335:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 336:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Caller is a thread, so this is a solicited preemption.  */
 337:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             _tx_thread_performance_solicited_preemption_count++;
 338:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 339:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Increment the thread's solicited preemption counter.  */
 340:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             execute_ptr -> tx_thread_performance_solicited_preemption_count++;
 341:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         }
 342:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         else
 343:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         {
 344:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 345:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 346:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             {
 347:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 348:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                 /* Caller is an interrupt, so this is an interrupt preemption.  */
 349:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                 _tx_thread_performance_interrupt_preemption_count++;
 350:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 351:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                 /* Increment the thread's interrupt preemption counter.  */
 352:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                 execute_ptr -> tx_thread_performance_interrupt_preemption_count++;
 353:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             }
 354:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         }
 355:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 356:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Remember the thread that preempted this thread.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 19


 357:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;
 358:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 359:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 360:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Yes, modify the execute thread pointer.  */
 361:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         _tx_thread_execute_ptr =  thread_ptr;
 362:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 363:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifndef TX_MISRA_ENABLE
 364:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 365:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* If MISRA is not-enabled, insert a preemption and return in-line for perf
 366:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 367:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Determine if the thread's preemption-threshold needs to be restored.  */
 368:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         if (saved_thread_ptr != TX_NULL)
 369:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         {
 370:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 371:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Yes, restore the previous highest-priority thread's preemption-thres
 372:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                can only happen if this routine is called from initialization.  */
 373:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 374:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         }
 375:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 376:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 377:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 378:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Is the execute pointer different?  */
 379:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_
 380:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         {
 381:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 382:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Move to next entry.  */
 383:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             _tx_thread_performance__execute_log_index++;
 384:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 385:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Check for wrap condition.  */
 386:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_
 387:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             {
 388:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 389:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                 /* Set the index to the beginning.  */
 390:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                 _tx_thread_performance__execute_log_index =  ((UINT) 0);
 391:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             }
 392:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 393:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Log the new execute pointer.  */
 394:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_
 395:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         }
 396:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 397:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 398:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
 399:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 400:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Check that the event time stamp is unchanged.  A different
 401:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                            timestamp means that a later event wrote over the thread
 402:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                            resume event. In that case, do nothing here.  */
 403:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         if (entry_ptr != TX_NULL)
 404:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         {
 405:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 406:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Is the timestamp the same?  */
 407:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 408:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             {
 409:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 410:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                 /* Timestamp is the same, set the "next thread pointer" to NULL. Th
 411:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                    be used by the trace analysis tool to show idle system condition
 412:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                                 entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTE
 413:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             }
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 20


 414:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         }
 415:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 416:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 417:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Restore interrupts.  */
 418:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         TX_RESTORE
 419:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 420:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_STACK_CHECKING
 421:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 422:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Pickup the next execute pointer.  */
 423:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         thread_ptr =  _tx_thread_execute_ptr;
 424:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 425:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Check this thread's stack.  */
 426:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         TX_THREAD_STACK_CHECK(thread_ptr)
 427:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 428:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 429:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Now determine if preemption should take place. This is only possible if 
 430:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                            not the same as the execute thread pointer AND the system state and pree
 431:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 432:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         if (combined_flags == ((ULONG) 0))
 433:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         {
 434:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 435:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 436:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 437:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* There is another thread ready to run and will be scheduled upon retu
 438:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             _tx_thread_performance_non_idle_return_count++;
 439:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 440:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 441:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             /* Preemption is needed - return to the system!  */
 442:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                             _tx_thread_system_return();
 443:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         }
 444:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 445:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         /* Return in-line when MISRA is not enabled.  */
 446:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                         return(TX_SUCCESS);
 447:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 448:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                     }
 449:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 }
 450:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             }
 451:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 452:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         else
 453:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 454:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 455:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* No, there are other threads at this priority already ready.  */
 456:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 457:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Just add this thread to the priority list.  */
 458:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 459:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             tail_ptr -> tx_thread_ready_next =         thread_ptr;
 460:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             head_ptr -> tx_thread_ready_previous =     thread_ptr;
 461:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 462:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             thread_ptr -> tx_thread_ready_next =       head_ptr;
 463:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 464:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 465:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 466:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 467:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Determine if we should log the execute pointer.  */
 468:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 469:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Is the execute pointer different?  */
 470:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] != _tx_th
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 21


 471:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 472:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 473:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Move to next entry.  */
 474:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             _tx_thread_performance__execute_log_index++;
 475:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 476:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Check for wrap condition.  */
 477:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
 478:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             {
 479:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 480:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 /* Set the index to the beginning.  */
 481:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 _tx_thread_performance__execute_log_index =  ((UINT) 0);
 482:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             }
 483:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 484:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Log the new execute pointer.  */
 485:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_th
 486:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 487:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 488:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 489:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
 490:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 491:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Check that the event time stamp is unchanged.  A different
 492:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****            timestamp means that a later event wrote over the thread
 493:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****            resume event. In that case, do nothing here.  */
 494:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         if (entry_ptr != TX_NULL)
 495:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 496:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 497:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Is the timestamp the same?  */
 498:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 499:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             {
 500:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 501:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                 /* Timestamp is the same, set the "next thread pointer" to NULL. This can
 502:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                    be used by the trace analysis tool to show idle system conditions.  */
 503:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_MISRA_ENABLE
 504:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****               entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_e
 505:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #else
 506:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****               entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT
 507:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 508:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             }
 509:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 510:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 511:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 512:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Determine if the thread's preemption-threshold needs to be restored.  */
 513:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         if (saved_thread_ptr != TX_NULL)
 514:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 515:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 516:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Yes, restore the previous highest-priority thread's preemption-threshold. This
 517:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****                can only happen if this routine is called from initialization.  */
 518:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 519:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 520:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 521:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Setup successful return status.  */
 522:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         status =  TX_SUCCESS;
 523:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 524:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     }
 525:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
  90              		.loc 1 525 10 is_stmt 1 view .LVU21
  91              		.loc 1 525 25 is_stmt 0 view .LVU22
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 22


  92 000e 436B     		ldr	r3, [r0, #52]
  93              		.loc 1 525 13 view .LVU23
  94 0010 012B     		cmp	r3, #1
  95 0012 22D0     		beq	.L12
 526:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     {
 527:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 528:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Clear the delayed suspension.  */
 529:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 530:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 531:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Setup delayed suspend lifted return status.  */
 532:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         status =  TX_SUSPEND_LIFTED;
 533:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     }
 534:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     else
 535:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     {
 536:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 537:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Setup invalid resume return status.  */
 538:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         status =  TX_RESUME_ERROR;
  96              		.loc 1 538 16 view .LVU24
  97 0014 1220     		movs	r0, #18
  98              	.LVL4:
  99              	.L6:
 539:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     }
 540:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 541:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     /* Restore interrupts.  */
 542:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     TX_RESTORE
 100              		.loc 1 542 5 is_stmt 1 view .LVU25
 101              	.LBB18:
 102              	.LBI18:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 103              		.loc 2 556 55 view .LVU26
 104              	.LBB19:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 105              		.loc 2 562 5 view .LVU27
 106              		.syntax unified
 107              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 108 0016 82F31088 		MSR  PRIMASK,r2
 109              	@ 0 "" 2
 110              	.LVL5:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 111              		.loc 2 562 5 is_stmt 0 view .LVU28
 112              		.thumb
 113              		.syntax unified
 114              	.LBE19:
 115              	.LBE18:
 543:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 544:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_INLINE_THREAD_RESUME_SUSPEND
 545:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 546:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     /* Pickup thread pointer.  */
 547:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     TX_THREAD_GET_CURRENT(current_thread)
 548:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 549:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     /* Determine if a preemption condition is present.  */
 550:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     if (current_thread != _tx_thread_execute_ptr)
 551:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     {
 552:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 553:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_STACK_CHECKING
 554:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 555:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Pickup the next execute pointer.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 23


 556:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         thread_ptr =  _tx_thread_execute_ptr;
 557:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 558:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Check this thread's stack.  */
 559:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         TX_THREAD_STACK_CHECK(thread_ptr)
 560:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 561:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 562:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         /* Now determine if preemption should take place. This is only possible if the current thre
 563:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****            not the same as the execute thread pointer AND the system state and preempt disable flag
 564:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 565:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         if (combined_flags == ((ULONG) 0))
 566:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 567:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 568:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 569:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 570:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* There is another thread ready to run and will be scheduled upon return.  */
 571:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             _tx_thread_performance_non_idle_return_count++;
 572:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 573:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 574:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             /* Preemption is needed - return to the system!  */
 575:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             _tx_thread_system_return();
 576:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 577:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     }
 578:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 579:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 580:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     /* Return completion status. */
 581:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     return(status);
 116              		.loc 1 581 5 is_stmt 1 view .LVU29
 117              	.L1:
 582:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** }
 118              		.loc 1 582 1 is_stmt 0 view .LVU30
 119 001a 38BD     		pop	{r3, r4, r5, pc}
 120              	.LVL6:
 121              	.L11:
 125:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 122              		.loc 1 125 9 is_stmt 1 view .LVU31
 123              	.LBB20:
 124              	.LBI20:
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 125              		.loc 2 474 63 view .LVU32
 126              	.LBB21:
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 127              		.loc 2 476 1 view .LVU33
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 128              		.loc 2 477 5 view .LVU34
 129              		.syntax unified
 130              	@ 477 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 131 001c EFF30581 		 MRS  r1,IPSR 
 132              	@ 0 "" 2
 133              	.LVL7:
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 134              		.loc 2 478 5 view .LVU35
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 135              		.loc 2 478 5 is_stmt 0 view .LVU36
 136              		.thumb
 137              		.syntax unified
 138              	.LBE21:
 139              	.LBE20:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 24


 125:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 140              		.loc 1 125 13 view .LVU37
 141 0020 104B     		ldr	r3, .L13
 142 0022 1B68     		ldr	r3, [r3]
 143 0024 0B43     		orrs	r3, r3, r1
 125:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 144              		.loc 1 125 12 view .LVU38
 145 0026 B3F1F03F 		cmp	r3, #-252645136
 146 002a 06D3     		bcc	.L7
 134:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 147              		.loc 1 134 13 is_stmt 1 view .LVU39
 134:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 148              		.loc 1 134 30 is_stmt 0 view .LVU40
 149 002c 0E4B     		ldr	r3, .L13+4
 150 002e 1C68     		ldr	r4, [r3]
 151              	.LVL8:
 137:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             {
 152              		.loc 1 137 13 is_stmt 1 view .LVU41
 137:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             {
 153              		.loc 1 137 16 is_stmt 0 view .LVU42
 154 0030 8CB1     		cbz	r4, .L8
 143:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 155              		.loc 1 143 17 is_stmt 1 view .LVU43
 143:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 156              		.loc 1 143 33 is_stmt 0 view .LVU44
 157 0032 E56B     		ldr	r5, [r4, #60]
 158              	.LVL9:
 148:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             }
 159              		.loc 1 148 17 is_stmt 1 view .LVU45
 148:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             }
 160              		.loc 1 148 85 is_stmt 0 view .LVU46
 161 0034 E36A     		ldr	r3, [r4, #44]
 148:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****             }
 162              		.loc 1 148 65 view .LVU47
 163 0036 E363     		str	r3, [r4, #60]
 164 0038 01E0     		b	.L3
 165              	.LVL10:
 166              	.L7:
  82:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 167              		.loc 1 82 13 view .LVU48
 168 003a 0025     		movs	r5, #0
 155:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 169              		.loc 1 155 30 view .LVU49
 170 003c 2C46     		mov	r4, r5
 171              	.LVL11:
 172              	.L3:
 170:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 173              		.loc 1 170 9 is_stmt 1 view .LVU50
 170:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 174              		.loc 1 170 35 is_stmt 0 view .LVU51
 175 003e 0B49     		ldr	r1, .L13+8
 176 0040 0B68     		ldr	r3, [r1]
 177 0042 0133     		adds	r3, r3, #1
 178 0044 0B60     		str	r3, [r1]
 173:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 179              		.loc 1 173 9 is_stmt 1 view .LVU52
 180              	.LVL12:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 25


 181              	.LBB22:
 182              	.LBI22:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 183              		.loc 2 556 55 view .LVU53
 184              	.LBB23:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 185              		.loc 2 562 5 view .LVU54
 186              		.syntax unified
 187              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 188 0046 82F31088 		MSR  PRIMASK,r2
 189              	@ 0 "" 2
 190              	.LVL13:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 191              		.loc 2 562 5 is_stmt 0 view .LVU55
 192              		.thumb
 193              		.syntax unified
 194              	.LBE23:
 195              	.LBE22:
 176:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 196              		.loc 1 176 9 is_stmt 1 view .LVU56
 197 004a FFF7FEFF 		bl	_tx_thread_system_resume
 198              	.LVL14:
 180:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 199              		.loc 1 180 9 view .LVU57
 180:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         {
 200              		.loc 1 180 12 is_stmt 0 view .LVU58
 201 004e 04B1     		cbz	r4, .L4
 185:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 202              		.loc 1 185 13 is_stmt 1 view .LVU59
 185:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****         }
 203              		.loc 1 185 61 is_stmt 0 view .LVU60
 204 0050 E563     		str	r5, [r4, #60]
 205              	.L4:
 198:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 206              		.loc 1 198 9 is_stmt 1 view .LVU61
 198:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** #endif
 207              		.loc 1 198 15 is_stmt 0 view .LVU62
 208 0052 0020     		movs	r0, #0
 209 0054 E1E7     		b	.L1
 210              	.LVL15:
 211              	.L8:
  82:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 212              		.loc 1 82 13 view .LVU63
 213 0056 0025     		movs	r5, #0
 214 0058 F1E7     		b	.L3
 215              	.LVL16:
 216              	.L12:
 529:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 217              		.loc 1 529 9 is_stmt 1 view .LVU64
 529:./Middlewares/ST/threadx/common/src/tx_thread_resume.c **** 
 218              		.loc 1 529 49 is_stmt 0 view .LVU65
 219 005a 0023     		movs	r3, #0
 220 005c 4363     		str	r3, [r0, #52]
 532:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     }
 221              		.loc 1 532 9 is_stmt 1 view .LVU66
 222              	.LVL17:
 532:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     }
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 26


 223              		.loc 1 532 16 is_stmt 0 view .LVU67
 224 005e 1920     		movs	r0, #25
 225              	.LVL18:
 532:./Middlewares/ST/threadx/common/src/tx_thread_resume.c ****     }
 226              		.loc 1 532 16 view .LVU68
 227 0060 D9E7     		b	.L6
 228              	.L14:
 229 0062 00BF     		.align	2
 230              	.L13:
 231 0064 00000000 		.word	_tx_thread_system_state
 232 0068 00000000 		.word	_tx_thread_execute_ptr
 233 006c 00000000 		.word	_tx_thread_preempt_disable
 234              		.cfi_endproc
 235              	.LFE8:
 237              		.text
 238              	.Letext0:
 239              		.file 3 "./Middlewares/ST/threadx/common/inc/tx_api.h"
 240              		.file 4 "./Middlewares/ST/threadx/common/inc/tx_thread.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 tx_thread_resume.c
C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s:20     .text._tx_thread_resume:00000000 $t
C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s:26     .text._tx_thread_resume:00000000 _tx_thread_resume
C:\Users\Dennis\AppData\Local\Temp\cc2c6JcO.s:231    .text._tx_thread_resume:00000064 $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_thread_system_state
_tx_thread_execute_ptr
_tx_thread_preempt_disable
