ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tx_thread_suspend.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._tx_thread_suspend,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_thread_suspend
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_thread_suspend:
  27              	.LVL0:
  28              	.LFB8:
  29              		.file 1 "./Middlewares/ST/threadx/common/src/tx_thread_suspend.c"
   1:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**************************************************************************/
   2:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
   3:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
   5:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  10:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**************************************************************************/
  11:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  12:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  13:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**************************************************************************/
  14:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**************************************************************************/
  15:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**                                                                       */
  16:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**                                                                       */
  18:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**   Thread                                                              */
  19:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**                                                                       */
  20:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**************************************************************************/
  21:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**************************************************************************/
  22:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #define TX_SOURCE_CODE
  23:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  24:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /* Include necessary system files.  */
  25:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #include "tx_api.h"
  26:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #include "tx_trace.h"
  27:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #include "tx_thread.h"
  28:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_INLINE_THREAD_RESUME_SUSPEND
  29:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifndef TX_NO_TIMER
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 2


  30:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #include "tx_timer.h"
  31:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
  32:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
  33:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**************************************************************************/
  34:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  35:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  FUNCTION                                               RELEASE        */
  36:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  37:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    _tx_thread_suspend                                  PORTABLE C      */
  38:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                           6.1.1        */
  39:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  AUTHOR                                                                */
  40:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  41:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    William E. Lamie, Microsoft Corporation                             */
  42:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  43:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  DESCRIPTION                                                           */
  44:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  45:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    This function handles application suspend requests.  If the suspend */
  46:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    requires actual processing, this function calls the actual suspend  */
  47:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    thread routine.                                                     */
  48:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  49:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  INPUT                                                                 */
  50:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  51:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    thread_ptr                            Pointer to thread to suspend  */
  52:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  53:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  OUTPUT                                                                */
  54:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  55:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    status                                Return completion status      */
  56:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  57:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  CALLS                                                                 */
  58:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  59:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    _tx_thread_system_suspend         Actual thread suspension          */
  60:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  61:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  62:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  CALLED BY                                                             */
  63:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  64:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    Application code                                                    */
  65:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  66:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  RELEASE HISTORY                                                       */
  67:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  68:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*    DATE              NAME                      DESCRIPTION             */
  69:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  70:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  71:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  72:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                            resulting in version 6.1    */
  73:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*  10-16-2020     Yuxin Zhou               Modified comment(s), and      */
  74:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                            added type cast to address  */
  75:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                            a MISRA compliance issue,   */
  76:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                            resulting in version 6.1.1  */
  77:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /*                                                                        */
  78:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** /**************************************************************************/
  79:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
  80:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** {
  30              		.loc 1 80 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 80 1 is_stmt 0 view .LVU1
  35 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 3


  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 3, -16
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
  81:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  82:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** TX_INTERRUPT_SAVE_AREA
  42              		.loc 1 82 1 is_stmt 1 view .LVU2
  83:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  84:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** TX_THREAD  *current_thread;
  43              		.loc 1 84 1 view .LVU3
  85:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** UINT        status;
  44              		.loc 1 85 1 view .LVU4
  86:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  87:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  88:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifndef TX_INLINE_THREAD_RESUME_SUSPEND
  89:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  90:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Lockout interrupts while the thread is being suspended.  */
  91:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_DISABLE
  45              		.loc 1 91 5 view .LVU5
  46              	.LBB14:
  47              	.LBI14:
  48              		.file 2 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 4


  34:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 5


  91:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 6


 148:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 7


 205:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 8


 262:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 9


 319:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 10


 376:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 11


 433:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 12


 490:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 540:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 13


 547:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  49              		.loc 2 566 63 view .LVU6
  50              	.LBB15:
 567:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
  51              		.loc 2 568 1 view .LVU7
 569:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  52              		.loc 2 570 5 view .LVU8
  53              	.LBB16:
  54              	.LBI16:
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  55              		.loc 2 533 63 view .LVU9
  56              	.LBB17:
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  57              		.loc 2 535 1 view .LVU10
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  58              		.loc 2 539 5 view .LVU11
  59              		.syntax unified
  60              	@ 539 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  61 0002 EFF31082 		MRS  r2, PRIMASK 
  62              	@ 0 "" 2
  63              	.LVL1:
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  64              		.loc 2 541 5 view .LVU12
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  65              		.loc 2 541 5 is_stmt 0 view .LVU13
  66              		.thumb
  67              		.syntax unified
  68              	.LBE17:
  69              	.LBE16:
 571:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  70              		.loc 2 575 5 is_stmt 1 view .LVU14
  71              		.syntax unified
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 14


  72              	@ 575 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  73 0006 72B6     		CPSID i
  74              	@ 0 "" 2
 576:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 577:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(int_posture);
  75              		.loc 2 577 5 view .LVU15
  76              	.LVL2:
  77              		.loc 2 577 5 is_stmt 0 view .LVU16
  78              		.thumb
  79              		.syntax unified
  80              	.LBE15:
  81              	.LBE14:
  92:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  93:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Pickup thread pointer.  */
  94:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_THREAD_GET_CURRENT(current_thread)
  82              		.loc 1 94 5 is_stmt 1 view .LVU17
  83 0008 194B     		ldr	r3, .L12
  84 000a 1B68     		ldr	r3, [r3]
  85              	.LVL3:
  95:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  96:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
  97:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND_API, thread_ptr, thread_ptr -> tx_thread_state,
  98:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
  99:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Log this kernel call.  */
 100:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_EL_THREAD_SUSPEND_INSERT
 101:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 102:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Check the specified thread's current status.  */
 103:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     if (thread_ptr -> tx_thread_state == TX_READY)
  86              		.loc 1 103 5 view .LVU18
  87              		.loc 1 103 20 is_stmt 0 view .LVU19
  88 000c 046B     		ldr	r4, [r0, #48]
  89              		.loc 1 103 8 view .LVU20
  90 000e E4B9     		cbnz	r4, .L2
 104:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 105:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 106:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Initialize status to success.  */
 107:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUCCESS;
  91              		.loc 1 107 9 is_stmt 1 view .LVU21
  92              	.LVL4:
 108:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 109:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Determine if we are in a thread context.  */
 110:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
  93              		.loc 1 110 9 view .LVU22
  94              	.LBB18:
  95              	.LBI18:
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  96              		.loc 2 474 63 view .LVU23
  97              	.LBB19:
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
  98              		.loc 2 476 1 view .LVU24
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
  99              		.loc 2 477 5 view .LVU25
 100              		.syntax unified
 101              	@ 477 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 102 0010 EFF30581 		 MRS  r1,IPSR 
 103              	@ 0 "" 2
 104              	.LVL5:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 15


 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 105              		.loc 2 478 5 view .LVU26
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 106              		.loc 2 478 5 is_stmt 0 view .LVU27
 107              		.thumb
 108              		.syntax unified
 109              	.LBE19:
 110              	.LBE18:
 111              		.loc 1 110 13 view .LVU28
 112 0014 174D     		ldr	r5, .L12+4
 113 0016 2D68     		ldr	r5, [r5]
 114              		.loc 1 110 12 view .LVU29
 115 0018 2943     		orrs	r1, r5, r1
 116 001a 01D1     		bne	.L3
 111:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         {
 112:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 113:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Yes, we are in a thread context.  */
 114:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 115:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Determine if the current thread is also the suspending thread.  */
 116:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             if (current_thread == thread_ptr)
 117              		.loc 1 116 13 is_stmt 1 view .LVU30
 118              		.loc 1 116 16 is_stmt 0 view .LVU31
 119 001c 8342     		cmp	r3, r0
 120 001e 0ED0     		beq	.L11
 121              	.LVL6:
 122              	.L3:
 117:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             {
 118:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 119:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Now determine if the preempt disable flag is non-zero.  */
 120:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (_tx_thread_preempt_disable != ((UINT) 0))
 121:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 122:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 123:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Current thread cannot suspend when the preempt disable flag is non-zero,
 124:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        return an error.  */
 125:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     status =  TX_SUSPEND_ERROR;
 126:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 127:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             }
 128:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         }
 129:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 130:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Determine if the status is still successful.  */
 131:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         if (status == TX_SUCCESS)
 132:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         {
 133:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 134:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Set the state to suspended.  */
 135:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 123              		.loc 1 135 13 is_stmt 1 view .LVU32
 124              		.loc 1 135 43 is_stmt 0 view .LVU33
 125 0020 0323     		movs	r3, #3
 126 0022 0363     		str	r3, [r0, #48]
 136:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 137:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_NOT_INTERRUPTABLE
 138:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 139:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Call actual non-interruptable thread suspension routine.  */
 140:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
 141:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 142:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Restore interrupts.  */
 143:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             TX_RESTORE
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 16


 144:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #else
 145:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 146:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Set the suspending flag. */
 147:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             thread_ptr -> tx_thread_suspending =  TX_TRUE;
 127              		.loc 1 147 13 is_stmt 1 view .LVU34
 128              		.loc 1 147 48 is_stmt 0 view .LVU35
 129 0024 0123     		movs	r3, #1
 130 0026 8363     		str	r3, [r0, #56]
 148:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 149:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Setup for no timeout period.  */
 150:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 131              		.loc 1 150 13 is_stmt 1 view .LVU36
 132              		.loc 1 150 77 is_stmt 0 view .LVU37
 133 0028 0023     		movs	r3, #0
 134 002a C364     		str	r3, [r0, #76]
 151:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 152:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Temporarily disable preemption.  */
 153:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             _tx_thread_preempt_disable++;
 135              		.loc 1 153 13 is_stmt 1 view .LVU38
 136              		.loc 1 153 39 is_stmt 0 view .LVU39
 137 002c 1249     		ldr	r1, .L12+8
 138 002e 0B68     		ldr	r3, [r1]
 139 0030 0133     		adds	r3, r3, #1
 140 0032 0B60     		str	r3, [r1]
 154:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 155:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Restore interrupts.  */
 156:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             TX_RESTORE
 141              		.loc 1 156 13 is_stmt 1 view .LVU40
 142              	.LVL7:
 143              	.LBB20:
 144              	.LBI20:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 145              		.loc 2 556 55 view .LVU41
 146              	.LBB21:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 147              		.loc 2 562 5 view .LVU42
 148              		.syntax unified
 149              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 150 0034 82F31088 		MSR  PRIMASK,r2
 151              	@ 0 "" 2
 152              	.LVL8:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 153              		.loc 2 562 5 is_stmt 0 view .LVU43
 154              		.thumb
 155              		.syntax unified
 156              	.LBE21:
 157              	.LBE20:
 157:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 158:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Call actual thread suspension routine.  */
 159:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             _tx_thread_system_suspend(thread_ptr);
 158              		.loc 1 159 13 is_stmt 1 view .LVU44
 159 0038 FFF7FEFF 		bl	_tx_thread_system_suspend
 160              	.LVL9:
 160:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 161:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 162:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_MISRA_ENABLE
 163:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 17


 164:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Disable interrupts.  */
 165:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             TX_DISABLE
 166:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 167:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Return success.  */
 168:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             status =  TX_SUCCESS;
 169:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #else
 170:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 171:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* If MISRA is not enabled, return directly.  */
 172:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             return(TX_SUCCESS);
 161              		.loc 1 172 13 view .LVU45
 162              		.loc 1 172 19 is_stmt 0 view .LVU46
 163 003c 12E0     		b	.L1
 164              	.LVL10:
 165              	.L11:
 120:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 166              		.loc 1 120 17 is_stmt 1 view .LVU47
 120:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 167              		.loc 1 120 48 is_stmt 0 view .LVU48
 168 003e 0E4B     		ldr	r3, .L12+8
 169              	.LVL11:
 120:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 170              		.loc 1 120 48 view .LVU49
 171 0040 1B68     		ldr	r3, [r3]
 120:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 172              		.loc 1 120 20 view .LVU50
 173 0042 002B     		cmp	r3, #0
 174 0044 ECD0     		beq	.L3
 125:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 175              		.loc 1 125 28 view .LVU51
 176 0046 1424     		movs	r4, #20
 177 0048 0AE0     		b	.L4
 178              	.LVL12:
 179              	.L2:
 173:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 174:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         }
 175:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 176:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 180              		.loc 1 176 10 is_stmt 1 view .LVU52
 181              		.loc 1 176 13 is_stmt 0 view .LVU53
 182 004a 022C     		cmp	r4, #2
 183 004c 07D0     		beq	.L7
 177:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 178:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 179:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Thread is terminated.  */
 180:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUSPEND_ERROR;
 181:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 182:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 184              		.loc 1 182 10 is_stmt 1 view .LVU54
 185              		.loc 1 182 13 is_stmt 0 view .LVU55
 186 004e 012C     		cmp	r4, #1
 187 0050 0AD0     		beq	.L8
 183:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 184:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 185:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Thread is completed.  */
 186:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUSPEND_ERROR;
 187:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 188:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 18


 188              		.loc 1 188 10 is_stmt 1 view .LVU56
 189              		.loc 1 188 13 is_stmt 0 view .LVU57
 190 0052 032C     		cmp	r4, #3
 191 0054 0AD0     		beq	.L9
 189:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 190:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 191:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Already suspended, just set status to success.  */
 192:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUCCESS;
 193:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 194:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     else
 195:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 196:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 197:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Just set the delayed suspension flag.  */
 198:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 192              		.loc 1 198 9 is_stmt 1 view .LVU58
 193              		.loc 1 198 49 is_stmt 0 view .LVU59
 194 0056 0123     		movs	r3, #1
 195              	.LVL13:
 196              		.loc 1 198 49 view .LVU60
 197 0058 4363     		str	r3, [r0, #52]
 199:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 200:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Set status to success.  */
 201:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUCCESS;
 198              		.loc 1 201 9 is_stmt 1 view .LVU61
 199              	.LVL14:
 200              		.loc 1 201 16 is_stmt 0 view .LVU62
 201 005a 0024     		movs	r4, #0
 202 005c 00E0     		b	.L4
 203              	.LVL15:
 204              	.L7:
 180:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 205              		.loc 1 180 16 view .LVU63
 206 005e 1424     		movs	r4, #20
 207              	.LVL16:
 208              	.L4:
 202:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 203:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 204:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Restore interrupts.  */
 205:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_RESTORE
 209              		.loc 1 205 5 is_stmt 1 view .LVU64
 210              	.LBB22:
 211              	.LBI22:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 212              		.loc 2 556 55 view .LVU65
 213              	.LBB23:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 214              		.loc 2 562 5 view .LVU66
 215              		.syntax unified
 216              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 217 0060 82F31088 		MSR  PRIMASK,r2
 218              	@ 0 "" 2
 219              	.LVL17:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 220              		.loc 2 562 5 is_stmt 0 view .LVU67
 221              		.thumb
 222              		.syntax unified
 223              	.LBE23:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 19


 224              	.LBE22:
 206:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 207:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Always return success, since this function does not perform error
 208:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****        checking.  */
 209:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     return(status);
 225              		.loc 1 209 5 is_stmt 1 view .LVU68
 226              	.L1:
 210:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 211:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #else
 212:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 213:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* In-line thread suspension processing follows, which is effectively just taking the
 214:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****        logic in tx_thread_system_suspend.c and placing it here!  */
 215:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 216:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** UINT            priority;
 217:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** UINT            base_priority;
 218:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** ULONG           priority_map;
 219:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** ULONG           priority_bit;
 220:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** ULONG           combined_flags;
 221:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** TX_THREAD       *ready_next;
 222:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** TX_THREAD       *ready_previous;
 223:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 224:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
 225:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** UINT            map_index;
 226:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 227:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 228:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 229:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** TX_TRACE_BUFFER_ENTRY       *entry_ptr;
 230:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** ULONG                       time_stamp =  ((ULONG) 0);
 231:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 232:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 233:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 234:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Pickup thread pointer.  */
 235:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_THREAD_GET_CURRENT(current_thread)
 236:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 237:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_ENABLE_STACK_CHECKING
 238:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 239:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Check this thread's stack.  */
 240:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_THREAD_STACK_CHECK(thread_ptr)
 241:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 242:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 243:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Lockout interrupts while the thread is being suspended.  */
 244:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_DISABLE
 245:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 246:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifndef TX_NO_TIMER
 247:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 248:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Determine if this is the current thread.  */
 249:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     if (thread_ptr == current_thread)
 250:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 251:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 252:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Yes, current thread is suspending - reset time slice for current thread.  */
 253:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 254:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 255:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 256:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 257:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 258:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND_API, thread_ptr, thread_ptr -> tx_thread_state,
 259:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 20


 260:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Log this kernel call.  */
 261:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_EL_THREAD_SUSPEND_INSERT
 262:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 263:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Check the specified thread's current status.  */
 264:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     if (thread_ptr -> tx_thread_state == TX_READY)
 265:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 266:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 267:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Initialize status to success.  */
 268:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUCCESS;
 269:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 270:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Determine if we are in a thread context.  */
 271:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 272:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         {
 273:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 274:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Yes, we are in a thread context.  */
 275:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 276:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Determine if the current thread is also the suspending thread.  */
 277:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             if (current_thread == thread_ptr)
 278:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             {
 279:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 280:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Now determine if the preempt disable flag is non-zero.  */
 281:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (_tx_thread_preempt_disable != ((UINT) 0))
 282:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 283:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 284:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Current thread cannot suspend when the preempt disable flag is non-zero,
 285:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        return an error.  */
 286:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     status =  TX_SUSPEND_ERROR;
 287:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 288:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             }
 289:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         }
 290:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 291:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Determine if the status is still successful.  */
 292:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         if (status == TX_SUCCESS)
 293:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         {
 294:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 295:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 296:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 297:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Increment the thread's suspend count.  */
 298:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             thread_ptr -> tx_thread_performance_suspend_count++;
 299:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 300:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Increment the total number of thread suspensions.  */
 301:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             _tx_thread_performance_suspend_count++;
 302:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 303:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 304:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Set the state to suspended.  */
 305:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 306:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 307:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Thread state change.  */
 308:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             TX_THREAD_STATE_CHANGE(thread_ptr, TX_SUSPENDED)
 309:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 310:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Log the thread status change.  */
 311:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)
 312:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 313:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 314:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 315:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* If trace is enabled, save the current event pointer.  */
 316:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             entry_ptr =  _tx_trace_buffer_current_ptr;
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 21


 317:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 318:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 319:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Log the thread status change.  */
 320:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, ((ULONG) thread_ptr -> tx_
 321:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 322:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 323:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 324:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Save the time stamp for later comparison to verify that
 325:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                the event hasn't been overwritten by the time we have
 326:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                computed the next thread to execute.  */
 327:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             if (entry_ptr != TX_NULL)
 328:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             {
 329:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 330:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Save time stamp.  */
 331:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 332:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             }
 333:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 334:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 335:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Pickup priority of thread.  */
 336:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             priority =  thread_ptr -> tx_thread_priority;
 337:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 338:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Pickup the previous and next ready thread pointers.  */
 339:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             ready_next =      thread_ptr -> tx_thread_ready_next;
 340:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             ready_previous =  thread_ptr -> tx_thread_ready_previous;
 341:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 342:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Determine if there are other threads at this priority that are
 343:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                ready.  */
 344:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             if (ready_next != thread_ptr)
 345:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             {
 346:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 347:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Yes, there are other threads at this priority ready.  */
 348:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 349:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Just remove this thread from the priority list.  */
 350:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 ready_next -> tx_thread_ready_previous =    ready_previous;
 351:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 ready_previous -> tx_thread_ready_next =    ready_next;
 352:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 353:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Determine if this is the head of the priority list.  */
 354:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (_tx_thread_priority_list[priority] == thread_ptr)
 355:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 356:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 357:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Update the head pointer of this priority list.  */
 358:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_priority_list[priority] =  ready_next;
 359:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 360:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 361:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 362:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
 363:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 364:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Calculate the index into the bit map array.  */
 365:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     map_index =  priority/((UINT) 32);
 366:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 367:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 368:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Check for a thread preempted that had preemption threshold set.  */
 369:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 370:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     {
 371:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 372:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Ensure that this thread's priority is clear in the preempt map.  */
 373:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         TX_MOD32_BIT_SET(priority, priority_bit)
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 22


 374:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX
 375:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 376:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
 377:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 378:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Determine if there are any other bits set in this preempt map.  */
 379:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         if (_tx_thread_preempted_maps[MAP_INDEX] == ((ULONG) 0))
 380:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         {
 381:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 382:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             /* No, clear the active bit to signify this preempt map has nothing set
 383:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             TX_DIV32_BIT_SET(priority, priority_bit)
 384:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active & (~
 385:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         }
 386:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 387:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     }
 388:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 389:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 390:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             }
 391:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             else
 392:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             {
 393:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 394:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* This is the only thread at this priority ready to run.  Set the head
 395:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                    pointer to NULL.  */
 396:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 _tx_thread_priority_list[priority] =    TX_NULL;
 397:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 398:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
 399:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 400:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Calculate the index into the bit map array.  */
 401:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 map_index =  priority/((UINT) 32);
 402:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 403:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 404:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Clear this priority bit in the ready priority bit map.  */
 405:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 TX_MOD32_BIT_SET(priority, priority_bit)
 406:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(pri
 407:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 408:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
 409:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 410:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Determine if there are any other bits set in this priority map.  */
 411:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (_tx_thread_priority_maps[MAP_INDEX] == ((ULONG) 0))
 412:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 413:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 414:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* No, clear the active bit to signify this priority map has nothing set.  */
 415:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_DIV32_BIT_SET(priority, priority_bit)
 416:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_priority_map_active =  _tx_thread_priority_map_active & (~(priority_
 417:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 418:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 419:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 420:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 421:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 422:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Check for a thread preempted that had preemption-threshold set.  */
 423:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 424:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 425:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 426:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Ensure that this thread's priority is clear in the preempt map.  */
 427:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_MOD32_BIT_SET(priority, priority_bit)
 428:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & 
 429:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 430:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 23


 431:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 432:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Determine if there are any other bits set in this preempt map.  */
 433:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     if (_tx_thread_preempted_maps[MAP_INDEX] == ((ULONG) 0))
 434:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     {
 435:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 436:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* No, clear the active bit to signify this preempted map has nothing set. 
 437:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         TX_DIV32_BIT_SET(priority, priority_bit)
 438:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active & (~(pri
 439:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     }
 440:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 441:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 442:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 443:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 444:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
 445:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 446:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Calculate the index to find the next highest priority thread ready for execution
 447:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 priority_map =    _tx_thread_priority_map_active;
 448:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 449:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Determine if there is anything.   */
 450:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (priority_map != ((ULONG) 0))
 451:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 452:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 453:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Calculate the lowest bit set in the priority map. */
 454:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_LOWEST_SET_BIT_CALCULATE(priority_map, map_index)
 455:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 456:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 457:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Calculate the base priority as well.  */
 458:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 base_priority =  map_index * ((UINT) 32);
 459:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #else
 460:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 461:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Setup the base priority to zero.  */
 462:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 base_priority =   ((UINT) 0);
 463:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 464:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 465:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Setup working variable for the priority map.  */
 466:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 467:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 468:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Make a quick check for no other threads ready for execution.  */
 469:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (priority_map == ((ULONG) 0))
 470:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 471:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 472:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Nothing else is ready.  Set highest priority and execute thread
 473:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        accordingly.  */
 474:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 475:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_execute_ptr =       TX_NULL;
 476:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 477:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifndef TX_MISRA_ENABLE
 478:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 479:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 480:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 481:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Check that the event time stamp is unchanged.  A different
 482:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        timestamp means that a later event wrote over the thread
 483:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        suspend event. In that case, do nothing here.  */
 484:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     if (entry_ptr != TX_NULL)
 485:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     {
 486:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 487:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Is the timestamp the same?  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 24


 488:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 489:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         {
 490:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 491:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             /* Timestamp is the same, set the "next thread pointer" to the new valu
 492:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                                next thread to execute. This can be used by the trace analysis tool 
 493:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                                track of next thread execution.  */
 494:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 495:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         }
 496:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     }
 497:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 498:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 499:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Restore interrupts.  */
 500:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_RESTORE
 501:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 502:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Determine if preemption should take place. This is only possible if the curr
 503:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        not the same as the execute thread pointer AND the system state and preempt 
 504:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 505:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     if (combined_flags == ((ULONG) 0))
 506:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     {
 507:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 508:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 509:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 510:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Yes, increment the return to idle return count.  */
 511:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         _tx_thread_performance_idle_return_count++;
 512:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 513:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 514:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Preemption is needed - return to the system!  */
 515:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         _tx_thread_system_return();
 516:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     }
 517:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 518:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Return to caller.  */
 519:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     return(TX_SUCCESS);
 520:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 521:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 522:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 else
 523:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 524:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 525:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Calculate the lowest bit set in the priority map. */
 526:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 527:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 528:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Setup the next highest priority variable.  */
 529:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_highest_priority =  base_priority + priority_bit;
 530:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 531:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             }
 532:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 533:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Determine if this thread is the thread designated to execute.  */
 534:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             if (thread_ptr == _tx_thread_execute_ptr)
 535:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             {
 536:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 537:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Pickup the highest priority thread to execute.  */
 538:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 539:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 540:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 541:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 542:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Determine if a previous thread with preemption-threshold was preempted.  */
 543:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
 544:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (_tx_thread_preempted_map_active != ((ULONG) 0))
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 25


 545:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #else
 546:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 547:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 548:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 549:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 550:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Yes, there was a thread preempted when it was using preemption-threshold.  *
 551:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 552:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifndef TX_NOT_INTERRUPTABLE
 553:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 554:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Disable preemption.  */
 555:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_preempt_disable++;
 556:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 557:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Restore interrupts.  */
 558:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_RESTORE
 559:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 560:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Interrupts are enabled briefly here to keep the interrupt
 561:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        lockout time deterministic.  */
 562:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 563:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Disable interrupts again.  */
 564:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_DISABLE
 565:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 566:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Decrement the preemption disable variable.  */
 567:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_preempt_disable--;
 568:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 569:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 570:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Calculate the thread with preemption threshold set that
 571:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        was interrupted by a thread above the preemption level.  */
 572:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 573:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
 574:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 575:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Calculate the index to find the next highest priority thread ready for execu
 576:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     priority_map =    _tx_thread_preempted_map_active;
 577:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 578:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Calculate the lowest bit set in the priority map. */
 579:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_LOWEST_SET_BIT_CALCULATE(priority_map, map_index)
 580:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 581:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Calculate the base priority as well.  */
 582:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     base_priority =  map_index * ((UINT) 32);
 583:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #else
 584:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 585:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Setup the base priority to zero.  */
 586:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     base_priority =   ((UINT) 0);
 587:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 588:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 589:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Setup temporary preempted map.  */
 590:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 591:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 592:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Calculate the lowest bit set in the priority map. */
 593:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 594:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 595:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Setup the highest priority preempted thread.  */
 596:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     priority =  base_priority + priority_bit;
 597:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 598:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Determine if the next highest priority thread is above the highest priority 
 599:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_th
 600:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     {
 601:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 26


 602:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Thread not allowed to execute until earlier preempted thread finishes or
 603:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                            preemption-threshold.  */
 604:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 605:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 606:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 607:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 608:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Check that the event time stamp is unchanged.  A different
 609:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                            timestamp means that a later event wrote over the thread
 610:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                            suspend event. In that case, do nothing here.  */
 611:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         if (entry_ptr != TX_NULL)
 612:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         {
 613:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 614:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             /* Is the timestamp the same?  */
 615:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 616:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             {
 617:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 618:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                                 /* Timestamp is the same, set the "next thread pointer" to the new 
 619:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                                    next thread to execute. This can be used by the trace analysis t
 620:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                                    track of next thread execution.  */
 621:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_MISRA_ENABLE
 622:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                                 entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CO
 623:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #else
 624:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                                 entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTE
 625:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 626:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             }
 627:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         }
 628:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 629:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 630:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Clear the corresponding bit in the preempted map, since the preemption h
 631:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         TX_MOD32_BIT_SET(priority, priority_bit)
 632:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX
 633:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 634:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #if TX_MAX_PRIORITIES > 32
 635:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 636:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Determine if there are any other bits set in this preempt map.  */
 637:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         if (_tx_thread_preempted_maps[MAP_INDEX] == ((ULONG) 0))
 638:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         {
 639:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 640:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             /* No, clear the active bit to signify this preempt map has nothing set
 641:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             TX_DIV32_BIT_SET(priority, priority_bit)
 642:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                             _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active & (~
 643:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         }
 644:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 645:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     }
 646:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 647:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 648:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 649:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifndef TX_MISRA_ENABLE
 650:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 651:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 652:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 653:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Is the execute pointer different?  */
 654:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] !
 655:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 656:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 657:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Move to next entry.  */
 658:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_performance__execute_log_index++;
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 27


 659:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 660:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Check for wrap condition.  */
 661:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
 662:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     {
 663:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 664:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Set the index to the beginning.  */
 665:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         _tx_thread_performance__execute_log_index =  ((UINT) 0);
 666:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     }
 667:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 668:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Log the new execute pointer.  */
 669:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =
 670:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 671:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 672:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 673:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 674:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 675:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Check that the event time stamp is unchanged.  A different
 676:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                    timestamp means that a later event wrote over the thread
 677:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                    suspend event. In that case, do nothing here.  */
 678:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (entry_ptr != TX_NULL)
 679:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 680:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 681:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Is the timestamp the same?  */
 682:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 683:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     {
 684:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 685:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Timestamp is the same, set the "next thread pointer" to the new value of
 686:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                            next thread to execute. This can be used by the trace analysis tool to k
 687:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                            track of next thread execution.  */
 688:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 689:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     }
 690:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 691:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 692:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 693:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Restore interrupts.  */
 694:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 TX_RESTORE
 695:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 696:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Determine if preemption should take place. This is only possible if the current 
 697:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                    not the same as the execute thread pointer AND the system state and preempt disa
 698:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 699:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (combined_flags == ((ULONG) 0))
 700:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 701:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 702:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 703:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 704:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* No, there is another thread ready to run and will be scheduled upon return. 
 705:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_performance_non_idle_return_count++;
 706:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 707:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 708:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Preemption is needed - return to the system!  */
 709:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_system_return();
 710:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 711:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 712:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Return to caller.  */
 713:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 return(TX_SUCCESS);
 714:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 715:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             }
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 28


 716:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 717:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 718:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 719:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Is the execute pointer different?  */
 720:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] != _t
 721:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             {
 722:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 723:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Move to next entry.  */
 724:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 _tx_thread_performance__execute_log_index++;
 725:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 726:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Check for wrap condition.  */
 727:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
 728:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 729:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 730:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Set the index to the beginning.  */
 731:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_performance__execute_log_index =  ((UINT) 0);
 732:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 733:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 734:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Log the new execute pointer.  */
 735:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _t
 736:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             }
 737:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 738:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 739:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 740:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 741:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Check that the event time stamp is unchanged.  A different
 742:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                timestamp means that a later event wrote over the thread
 743:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                suspend event. In that case, do nothing here.  */
 744:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             if (entry_ptr != TX_NULL)
 745:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             {
 746:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 747:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Is the timestamp the same?  */
 748:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 749:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 750:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 751:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Timestamp is the same, set the "next thread pointer" to the new value of the
 752:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        next thread to execute. This can be used by the trace analysis tool to keep
 753:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                        track of next thread execution.  */
 754:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_MISRA_ENABLE
 755:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_th
 756:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #else
 757:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_C
 758:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 759:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 760:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             }
 761:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 762:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 763:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Restore interrupts.  */
 764:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             TX_RESTORE
 765:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 766:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Determine if a preemption condition is present.  */
 767:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             if (current_thread != _tx_thread_execute_ptr)
 768:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             {
 769:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 770:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_ENABLE_STACK_CHECKING
 771:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 772:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Pickup the next execute pointer.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 29


 773:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 thread_ptr =  _tx_thread_execute_ptr;
 774:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 775:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Check this thread's stack.  */
 776:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 TX_THREAD_STACK_CHECK(thread_ptr)
 777:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 778:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 779:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 /* Determine if preemption should take place. This is only possible if the current 
 780:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                    not the same as the execute thread pointer AND the system state and preempt disa
 781:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 782:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 if (combined_flags == ((ULONG) 0))
 783:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 {
 784:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 785:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 786:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 787:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Determine if an idle system return is present.  */
 788:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     if (_tx_thread_execute_ptr == TX_NULL)
 789:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     {
 790:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 791:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* Yes, increment the return to idle return count.  */
 792:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         _tx_thread_performance_idle_return_count++;
 793:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     }
 794:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     else
 795:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     {
 796:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 797:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         /* No, there is another thread ready to run and will be scheduled upon retu
 798:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                         _tx_thread_performance_non_idle_return_count++;
 799:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     }
 800:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 801:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 802:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     /* Preemption is needed - return to the system!  */
 803:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                     _tx_thread_system_return();
 804:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****                 }
 805:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             }
 806:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 807:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Disable interrupts.  */
 808:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             TX_DISABLE
 809:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 810:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             /* Return success.  */
 811:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****             status =  TX_SUCCESS;
 812:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         }
 813:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 814:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 815:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 816:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 817:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Thread is terminated.  */
 818:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUSPEND_ERROR;
 819:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 820:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 821:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 822:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 823:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Thread is completed.  */
 824:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUSPEND_ERROR;
 825:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 826:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 827:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 828:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 829:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Already suspended, just set status to success.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 30


 830:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUCCESS;
 831:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 832:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     else
 833:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     {
 834:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 835:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Just set the delayed suspension flag.  */
 836:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 837:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 838:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         /* Set status to success.  */
 839:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****         status =  TX_SUCCESS;
 840:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 841:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 842:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Restore interrupts.  */
 843:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     TX_RESTORE
 844:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** 
 845:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     /* Return completion status.  */
 846:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     return(status);
 847:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** #endif
 848:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c **** }
 227              		.loc 1 848 1 is_stmt 0 view .LVU69
 228 0064 2046     		mov	r0, r4
 229 0066 38BD     		pop	{r3, r4, r5, pc}
 230              	.LVL18:
 231              	.L8:
 186:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 232              		.loc 1 186 16 view .LVU70
 233 0068 1424     		movs	r4, #20
 234 006a F9E7     		b	.L4
 235              	.L9:
 192:./Middlewares/ST/threadx/common/src/tx_thread_suspend.c ****     }
 236              		.loc 1 192 16 view .LVU71
 237 006c 0024     		movs	r4, #0
 238 006e F7E7     		b	.L4
 239              	.L13:
 240              		.align	2
 241              	.L12:
 242 0070 00000000 		.word	_tx_thread_current_ptr
 243 0074 00000000 		.word	_tx_thread_system_state
 244 0078 00000000 		.word	_tx_thread_preempt_disable
 245              		.cfi_endproc
 246              	.LFE8:
 248              		.text
 249              	.Letext0:
 250              		.file 3 "./Middlewares/ST/threadx/common/inc/tx_api.h"
 251              		.file 4 "./Middlewares/ST/threadx/common/inc/tx_thread.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s 			page 31


DEFINED SYMBOLS
                            *ABS*:00000000 tx_thread_suspend.c
C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s:20     .text._tx_thread_suspend:00000000 $t
C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s:26     .text._tx_thread_suspend:00000000 _tx_thread_suspend
C:\Users\Dennis\AppData\Local\Temp\ccGfDI8C.s:242    .text._tx_thread_suspend:00000070 $d

UNDEFINED SYMBOLS
_tx_thread_system_suspend
_tx_thread_current_ptr
_tx_thread_system_state
_tx_thread_preempt_disable
