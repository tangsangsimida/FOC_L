ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tx_timer_expiration_process.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._tx_timer_expiration_process,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_timer_expiration_process
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_timer_expiration_process:
  27              	.LFB8:
  28              		.file 1 "./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c"
   1:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**************************************************************************/
   2:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
   3:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
   5:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  10:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**************************************************************************/
  11:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  12:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  13:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**************************************************************************/
  14:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**************************************************************************/
  15:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**                                                                       */
  16:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**                                                                       */
  18:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**   Timer                                                               */
  19:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**                                                                       */
  20:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**************************************************************************/
  21:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**************************************************************************/
  22:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  23:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #define TX_SOURCE_CODE
  24:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  25:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifndef TX_NO_TIMER
  26:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  27:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /* Include necessary system files.  */
  28:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  29:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #include "tx_api.h"
  30:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #include "tx_timer.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 2


  31:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #include "tx_thread.h"
  32:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  33:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  34:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**************************************************************************/
  35:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  36:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  FUNCTION                                               RELEASE        */
  37:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  38:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    _tx_timer_expiration_process                        PORTABLE C      */
  39:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                           6.1          */
  40:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  AUTHOR                                                                */
  41:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  42:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  44:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  DESCRIPTION                                                           */
  45:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  46:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    This function processes thread and application timer expirations.   */
  47:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    It is called from the _tx_timer_interrupt handler and either        */
  48:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    processes the timer expiration in the ISR or defers to the system   */
  49:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    timer thread. The actual processing is determined during            */
  50:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    compilation.                                                        */
  51:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  52:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  INPUT                                                                 */
  53:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  54:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    None                                                                */
  55:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  56:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  OUTPUT                                                                */
  57:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  58:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    None                                                                */
  59:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  60:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  CALLS                                                                 */
  61:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  62:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    _tx_thread_system_resume          Thread resume processing          */
  63:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  64:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    _tx_timer_system_activate         Timer reactivate processing       */
  65:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    Timer Expiration Function                                           */
  66:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  67:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  CALLED BY                                                             */
  68:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  69:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    _tx_timer_interrupt               Timer interrupt handler           */
  70:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  71:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  RELEASE HISTORY                                                       */
  72:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  73:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*    DATE              NAME                      DESCRIPTION             */
  74:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  75:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  76:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*  09-30-2020     Scott Larson             Modified comment(s), and      */
  77:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                            opt out of function when    */
  78:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                            TX_NO_TIMER is defined,     */
  79:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                            resulting in version 6.1    */
  80:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /*                                                                        */
  81:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** /**************************************************************************/
  82:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** VOID  _tx_timer_expiration_process(VOID)
  83:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** {
  29              		.loc 1 83 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 3


  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
  84:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  85:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** TX_INTERRUPT_SAVE_AREA
  38              		.loc 1 85 1 view .LVU1
  86:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  87:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifdef TX_TIMER_PROCESS_IN_ISR
  88:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
  89:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** TX_TIMER_INTERNAL           *expired_timers;
  90:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** TX_TIMER_INTERNAL           *reactivate_timer;
  91:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** TX_TIMER_INTERNAL           *next_timer;
  92:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** TX_TIMER_INTERNAL           *previous_timer;
  93:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifdef TX_REACTIVATE_INLINE
  94:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** TX_TIMER_INTERNAL           **timer_list;               /* Timer list pointer           */
  95:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** UINT                        expiration_time;            /* Value used for pointer offset*/
  96:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** ULONG                       delta;
  97:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #endif
  98:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** TX_TIMER_INTERNAL           *current_timer;
  99:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** VOID                        (*timeout_function)(ULONG id);
 100:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** ULONG                       timeout_param =  ((ULONG) 0);
 101:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
 102:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** TX_TIMER                    *timer_ptr;
 103:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #endif
 104:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #endif
 105:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 106:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
 107:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 108:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Don't process in the ISR, wakeup the system timer thread to process the
 109:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****        timer expiration.  */
 110:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 111:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Disable interrupts.  */
 112:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     TX_DISABLE
  39              		.loc 1 112 5 view .LVU2
  40              	.LBB10:
  41              	.LBI10:
  42              		.file 2 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 4


  19:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 5


  76:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 6


 133:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 7


 190:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 8


 247:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 9


 304:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 10


 361:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 11


 418:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 12


 475:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 13


 532:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 540:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  43              		.loc 2 566 63 view .LVU3
  44              	.LBB11:
 567:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
  45              		.loc 2 568 1 view .LVU4
 569:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  46              		.loc 2 570 5 view .LVU5
  47              	.LBB12:
  48              	.LBI12:
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  49              		.loc 2 533 63 view .LVU6
  50              	.LBB13:
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  51              		.loc 2 535 1 view .LVU7
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  52              		.loc 2 539 5 view .LVU8
  53              		.syntax unified
  54              	@ 539 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  55 0002 EFF31081 		MRS  r1, PRIMASK 
  56              	@ 0 "" 2
  57              	.LVL0:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 14


 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  58              		.loc 2 541 5 view .LVU9
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  59              		.loc 2 541 5 is_stmt 0 view .LVU10
  60              		.thumb
  61              		.syntax unified
  62              	.LBE13:
  63              	.LBE12:
 571:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  64              		.loc 2 575 5 is_stmt 1 view .LVU11
  65              		.syntax unified
  66              	@ 575 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  67 0006 72B6     		CPSID i
  68              	@ 0 "" 2
 576:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 577:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(int_posture);
  69              		.loc 2 577 5 view .LVU12
  70              	.LVL1:
  71              		.loc 2 577 5 is_stmt 0 view .LVU13
  72              		.thumb
  73              		.syntax unified
  74              	.LBE11:
  75              	.LBE10:
 113:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 114:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifdef TX_NOT_INTERRUPTABLE
 115:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 116:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Resume the thread!  */
 117:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     _tx_thread_system_ni_resume(&_tx_timer_thread);
 118:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 119:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Restore interrupts.  */
 120:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     TX_RESTORE
 121:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #else
 122:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 123:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Increment the preempt disable flag.  */
 124:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     _tx_thread_preempt_disable++;
  76              		.loc 1 124 5 is_stmt 1 view .LVU14
  77              		.loc 1 124 31 is_stmt 0 view .LVU15
  78 0008 044A     		ldr	r2, .L3
  79 000a 1368     		ldr	r3, [r2]
  80 000c 0133     		adds	r3, r3, #1
  81 000e 1360     		str	r3, [r2]
 125:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 126:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Restore interrupts.  */
 127:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     TX_RESTORE
  82              		.loc 1 127 5 is_stmt 1 view .LVU16
  83              	.LVL2:
  84              	.LBB14:
  85              	.LBI14:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  86              		.loc 2 556 55 view .LVU17
  87              	.LBB15:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88              		.loc 2 562 5 view .LVU18
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 15


  89              		.syntax unified
  90              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  91 0010 81F31088 		MSR  PRIMASK,r1
  92              	@ 0 "" 2
  93              	.LVL3:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  94              		.loc 2 562 5 is_stmt 0 view .LVU19
  95              		.thumb
  96              		.syntax unified
  97              	.LBE15:
  98              	.LBE14:
 128:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 129:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Call the system resume function to activate the timer thread.  */
 130:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     _tx_thread_system_resume(&_tx_timer_thread);
  99              		.loc 1 130 5 is_stmt 1 view .LVU20
 100 0014 0248     		ldr	r0, .L3+4
 101 0016 FFF7FEFF 		bl	_tx_thread_system_resume
 102              	.LVL4:
 131:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #endif
 132:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 133:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #else
 134:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 135:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Process the timer expiration directly in the ISR. This increases the interrupt
 136:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****        processing, however, it eliminates the need for a system timer thread and associated
 137:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****        resources.  */
 138:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 139:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Disable interrupts.  */
 140:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     TX_DISABLE
 141:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 142:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Determine if the timer processing is already active.  This needs to be checked outside
 143:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****        of the processing loop because it remains set throughout nested timer interrupt conditions. 
 144:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     if (_tx_timer_processing_active == TX_FALSE)
 145:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     {
 146:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 147:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****         /* Timer processing is not nested.  */
 148:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 149:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****         /* Determine if the timer expiration has already been cleared.  */
 150:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****         if (_tx_timer_expired != ((UINT) 0))
 151:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****         {
 152:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 153:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****             /* Proceed with timer processing.  */
 154:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 155:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****             /* Set the timer interrupt processing active flag.  */
 156:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****             _tx_timer_processing_active =  TX_TRUE;
 157:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 158:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****             /* Now go into an infinite loop to process timer expirations.  */
 159:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****             do
 160:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****             {
 161:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 162:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 /* First, move the current list pointer and clear the timer
 163:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                    expired value.  This allows the interrupt handling portion
 164:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                    to continue looking for timer expirations.  */
 165:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 166:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 /* Save the current timer expiration list pointer.  */
 167:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 expired_timers =  *_tx_timer_current_ptr;
 168:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 169:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 /* Modify the head pointer in the first timer in the list, if there
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 16


 170:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                    is one!  */
 171:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 if (expired_timers != TX_NULL)
 172:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 {
 173:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 174:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 175:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 }
 176:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 177:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 /* Set the current list pointer to NULL.  */
 178:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 *_tx_timer_current_ptr =  TX_NULL;
 179:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 180:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 /* Move the current pointer up one timer entry wrap if we get to
 181:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                    the end of the list.  */
 182:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 183:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 if (_tx_timer_current_ptr == _tx_timer_list_end)
 184:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 {
 185:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 186:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     _tx_timer_current_ptr =  _tx_timer_list_start;
 187:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 }
 188:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 189:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 /* Clear the expired flag.  */
 190:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 _tx_timer_expired =  TX_FALSE;
 191:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 192:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 /* Restore interrupts temporarily.  */
 193:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 TX_RESTORE
 194:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 195:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 /* Disable interrupts again.  */
 196:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 TX_DISABLE
 197:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 198:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 /* Next, process the expiration of the associated timers at this
 199:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                    time slot.  */
 200:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 while (expired_timers != TX_NULL)
 201:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 {
 202:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 203:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Something is on the list.  Remove it and process the expiration.  */
 204:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     current_timer =  expired_timers;
 205:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 206:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Pickup the next timer.  */
 207:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     next_timer =  expired_timers -> tx_timer_internal_active_next;
 208:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 209:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Set the reactivate timer to NULL.  */
 210:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     reactivate_timer =  TX_NULL;
 211:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 212:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Determine if this is the only timer.  */
 213:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     if (current_timer == next_timer)
 214:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     {
 215:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 216:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Yes, this is the only timer in the list.  */
 217:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 218:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Set the head pointer to NULL.  */
 219:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         expired_timers =  TX_NULL;
 220:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     }
 221:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     else
 222:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     {
 223:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 224:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* No, not the only expired timer.  */
 225:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 226:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Remove this timer from the expired list.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 17


 227:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         previous_timer =                                   current_timer -> tx_time
 228:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         next_timer -> tx_timer_internal_active_previous =  previous_timer;
 229:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         previous_timer -> tx_timer_internal_active_next =  next_timer;
 230:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 231:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Modify the next timer's list head to point at the current list head.  */
 232:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         next_timer -> tx_timer_internal_list_head =  &expired_timers;
 233:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 234:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Set the list head pointer.  */
 235:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         expired_timers =  next_timer;
 236:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     }
 237:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 238:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* In any case, the timer is now off of the expired list.  */
 239:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 240:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Determine if the timer has expired or if it is just a really
 241:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                        big timer that needs to be placed in the list again.  */
 242:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 243:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     {
 244:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 245:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Timer is bigger than the timer entries and must be
 246:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                            rescheduled.  */
 247:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 248:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
 249:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 250:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Increment the total expiration adjustments counter.  */
 251:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         _tx_timer_performance__expiration_adjust_count++;
 252:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 253:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Determine if this is an application timer.  */
 254:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         if (current_timer -> tx_timer_internal_timeout_function != &_tx_thread_time
 255:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 256:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 257:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Derive the application timer pointer.  */
 258:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 259:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Pickup the application timer pointer.  */
 260:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
 261:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 262:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Increment the number of expiration adjustments on this timer.  */
 263:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             if (timer_ptr -> tx_timer_id == TX_TIMER_ID)
 264:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             {
 265:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 266:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 timer_ptr -> tx_timer_performance__expiration_adjust_count++;
 267:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             }
 268:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
 269:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #endif
 270:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 271:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Decrement the remaining ticks of the timer.  */
 272:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         current_timer -> tx_timer_internal_remaining_ticks =
 273:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRI
 274:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 275:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Set the timeout function to NULL in order to bypass the
 276:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                            expiration.  */
 277:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         timeout_function =  TX_NULL;
 278:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 279:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Make the timer appear that it is still active while interrupts
 280:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                            are enabled.  This will permit proper processing of a timer
 281:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                            deactivate from an ISR.  */
 282:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 283:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         current_timer -> tx_timer_internal_active_next =  current_timer;
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 18


 284:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 285:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Setup the temporary timer list head pointer.  */
 286:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         reactivate_timer =  current_timer;
 287:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     }
 288:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     else
 289:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     {
 290:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 291:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Timer did expire.  */
 292:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 293:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
 294:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 295:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Increment the total expirations counter.  */
 296:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         _tx_timer_performance_expiration_count++;
 297:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 298:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Determine if this is an application timer.  */
 299:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         if (current_timer -> tx_timer_internal_timeout_function != &_tx_thread_time
 300:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 301:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 302:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Derive the application timer pointer.  */
 303:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 304:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Pickup the application timer pointer.  */
 305:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
 306:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 307:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Increment the number of expirations on this timer.  */
 308:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             if (timer_ptr -> tx_timer_id == TX_TIMER_ID)
 309:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             {
 310:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 311:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 timer_ptr -> tx_timer_performance_expiration_count++;
 312:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             }
 313:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
 314:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #endif
 315:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 316:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Copy the calling function and ID into local variables before interrupts
 317:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                            are re-enabled.  */
 318:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 319:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 320:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 321:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Copy the reinitialize ticks into the remaining ticks.  */
 322:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_t
 323:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 324:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Determine if the timer should be reactivated.  */
 325:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 326:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 327:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 328:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Make the timer appear that it is still active while processing
 329:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                the expiration routine and with interrupts enabled.  This will
 330:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                permit proper processing of a timer deactivate from both the
 331:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                expiration routine and an ISR.  */
 332:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 333:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             current_timer -> tx_timer_internal_active_next =  current_timer;
 334:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 335:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Setup the temporary timer list head pointer.  */
 336:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             reactivate_timer =  current_timer;
 337:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
 338:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         else
 339:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 340:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 19


 341:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Set the list pointer of this timer to NULL.  This is used to indicat
 342:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                the timer is no longer active.  */
 343:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             current_timer -> tx_timer_internal_list_head =  TX_NULL;
 344:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
 345:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     }
 346:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 347:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Set pointer to indicate the expired timer that is currently being processed.
 348:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     _tx_timer_expired_timer_ptr =  current_timer;
 349:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 350:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Restore interrupts for timer expiration call.  */
 351:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     TX_RESTORE
 352:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 353:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Call the timer-expiration function, if non-NULL.  */
 354:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     if (timeout_function != TX_NULL)
 355:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     {
 356:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 357:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         (timeout_function) (timeout_param);
 358:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     }
 359:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 360:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Lockout interrupts again.  */
 361:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     TX_DISABLE
 362:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 363:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Clear expired timer pointer.  */
 364:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     _tx_timer_expired_timer_ptr =  TX_NULL;
 365:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 366:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     /* Determine if the timer needs to be reactivated.  */
 367:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     if (reactivate_timer == current_timer)
 368:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     {
 369:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 370:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Reactivate the timer.  */
 371:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 372:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
 373:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 374:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Determine if this timer expired.  */
 375:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         if (timeout_function != TX_NULL)
 376:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 377:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 378:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Increment the total reactivations counter.  */
 379:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             _tx_timer_performance_reactivate_count++;
 380:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 381:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Determine if this is an application timer.  */
 382:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             if (current_timer -> tx_timer_internal_timeout_function != &_tx_thread_
 383:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             {
 384:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 385:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 /* Derive the application timer pointer.  */
 386:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 387:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 /* Pickup the application timer pointer.  */
 388:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
 389:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 390:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 /* Increment the number of expirations on this timer.  */
 391:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 if (timer_ptr -> tx_timer_id == TX_TIMER_ID)
 392:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 {
 393:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 394:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                     timer_ptr -> tx_timer_performance_reactivate_count++;
 395:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                                 }
 396:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             }
 397:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 20


 398:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #endif
 399:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 400:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 401:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #ifdef TX_REACTIVATE_INLINE
 402:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 403:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Calculate the amount of time remaining for the timer.  */
 404:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 405:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 406:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 407:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Set expiration time to the maximum number of entries.  */
 408:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             expiration_time =  TX_TIMER_ENTRIES - ((UINT) 1);
 409:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
 410:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         else
 411:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 412:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 413:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Timer value fits in the timer entries.  */
 414:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 415:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Set the expiration time.  */
 416:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             expiration_time =  ((UINT) current_timer -> tx_timer_internal_remaining
 417:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
 418:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 419:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* At this point, we are ready to put the timer back on one of
 420:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                            the timer lists.  */
 421:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 422:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Calculate the proper place for the timer.  */
 423:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 424:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIR
 425:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 426:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 427:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Wrap from the beginning of the list.  */
 428:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 429:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 430:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
 431:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 432:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Now put the timer on this list.  */
 433:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         if ((*timer_list) == TX_NULL)
 434:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 435:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 436:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* This list is NULL, just put the new timer on it.  */
 437:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 438:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Setup the links in this timer.  */
 439:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             current_timer -> tx_timer_internal_active_next =      current_timer;
 440:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             current_timer -> tx_timer_internal_active_previous =  current_timer;
 441:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 442:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* Setup the list head pointer.  */
 443:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             *timer_list =  current_timer;
 444:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
 445:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         else
 446:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         {
 447:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 448:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             /* This list is not NULL, add current timer to the end. */
 449:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             next_timer =                                          *timer_list;
 450:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             previous_timer =                                      next_timer -> tx_
 451:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             previous_timer -> tx_timer_internal_active_next =     current_timer;
 452:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             next_timer -> tx_timer_internal_active_previous =     current_timer;
 453:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             current_timer -> tx_timer_internal_active_next =      next_timer;
 454:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                             current_timer -> tx_timer_internal_active_previous =  previous_timer;
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 21


 455:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         }
 456:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 457:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Setup list head pointer.  */
 458:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         current_timer -> tx_timer_internal_list_head =  timer_list;
 459:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #else
 460:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 461:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Reactivate through the timer activate function.  */
 462:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 463:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Clear the list head for the timer activate call.  */
 464:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         current_timer -> tx_timer_internal_list_head = TX_NULL;
 465:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 466:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         /* Activate the current timer.  */
 467:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                         _tx_timer_system_activate(current_timer);
 468:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #endif
 469:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                     }
 470:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****                 }
 471:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****             } while (_tx_timer_expired != TX_FALSE);
 472:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 473:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****             /* Clear the timer interrupt processing active flag.  */
 474:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****             _tx_timer_processing_active =  TX_FALSE;
 475:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****         }
 476:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     }
 477:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** 
 478:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     /* Restore interrupts.  */
 479:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c ****     TX_RESTORE
 480:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** #endif
 481:./Middlewares/ST/threadx/common/src/tx_timer_expiration_process.c **** }
 103              		.loc 1 481 1 is_stmt 0 view .LVU21
 104 001a 08BD     		pop	{r3, pc}
 105              	.L4:
 106              		.align	2
 107              	.L3:
 108 001c 00000000 		.word	_tx_thread_preempt_disable
 109 0020 00000000 		.word	_tx_timer_thread
 110              		.cfi_endproc
 111              	.LFE8:
 113              		.text
 114              	.Letext0:
 115              		.file 3 "./Middlewares/ST/threadx/common/inc/tx_api.h"
 116              		.file 4 "./Middlewares/ST/threadx/common/inc/tx_timer.h"
 117              		.file 5 "./Middlewares/ST/threadx/common/inc/tx_thread.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s 			page 22


DEFINED SYMBOLS
                            *ABS*:00000000 tx_timer_expiration_process.c
C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s:20     .text._tx_timer_expiration_process:00000000 $t
C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s:26     .text._tx_timer_expiration_process:00000000 _tx_timer_expiration_process
C:\Users\Dennis\AppData\Local\Temp\ccKNaSnC.s:108    .text._tx_timer_expiration_process:0000001c $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_thread_preempt_disable
_tx_timer_thread
