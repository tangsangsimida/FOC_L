ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"txe_byte_allocate.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._txe_byte_allocate,"ax",%progbits
  20              		.align	1
  21              		.global	_txe_byte_allocate
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_txe_byte_allocate:
  27              	.LVL0:
  28              	.LFB8:
  29              		.file 1 "./Middlewares/ST/threadx/common/src/txe_byte_allocate.c"
   1:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**************************************************************************/
   2:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
   3:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
   5:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  10:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**************************************************************************/
  11:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  12:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  13:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**************************************************************************/
  14:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**************************************************************************/
  15:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**                                                                       */
  16:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**                                                                       */
  18:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**   Byte Memory                                                         */
  19:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**                                                                       */
  20:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**************************************************************************/
  21:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**************************************************************************/
  22:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  23:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #define TX_SOURCE_CODE
  24:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  25:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  26:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /* Include necessary system files.  */
  27:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  28:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #include "tx_api.h"
  29:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #include "tx_initialize.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 2


  30:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #include "tx_thread.h"
  31:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #include "tx_timer.h"
  32:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #include "tx_byte_pool.h"
  33:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  34:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  35:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**************************************************************************/
  36:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  37:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  FUNCTION                                               RELEASE        */
  38:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  39:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    _txe_byte_allocate                                  PORTABLE C      */
  40:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                           6.1          */
  41:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  AUTHOR                                                                */
  42:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  43:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    William E. Lamie, Microsoft Corporation                             */
  44:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  45:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  DESCRIPTION                                                           */
  46:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  47:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    This function checks for errors in allocate bytes function call.    */
  48:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  49:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  INPUT                                                                 */
  50:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  51:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    pool_ptr                          Pointer to pool control block     */
  52:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    memory_ptr                        Pointer to place allocated bytes  */
  53:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                        pointer                         */
  54:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    memory_size                       Number of bytes to allocate       */
  55:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    wait_option                       Suspension option                 */
  56:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  57:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  OUTPUT                                                                */
  58:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  59:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    TX_POOL_ERROR                     Invalid memory pool pointer       */
  60:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    TX_PTR_ERROR                      Invalid destination pointer       */
  61:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    TX_WAIT_ERROR                     Invalid wait option               */
  62:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    TX_CALLER_ERROR                   Invalid caller of this function   */
  63:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    TX_SIZE_ERROR                     Invalid size of memory request    */
  64:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    status                            Actual completion status          */
  65:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  66:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  CALLS                                                                 */
  67:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  68:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    _tx_byte_allocate                 Actual byte allocate function     */
  69:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  70:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  CALLED BY                                                             */
  71:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  72:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    Application Code                                                    */
  73:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  74:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  RELEASE HISTORY                                                       */
  75:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  76:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*    DATE              NAME                      DESCRIPTION             */
  77:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  78:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  79:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  80:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                            resulting in version 6.1    */
  81:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /*                                                                        */
  82:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** /**************************************************************************/
  83:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
  84:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****                                     ULONG memory_size,  ULONG wait_option)
  85:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** {
  30              		.loc 1 85 1 view -0
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 3


  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 85 1 is_stmt 0 view .LVU1
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
  86:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  87:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** UINT            status;
  40              		.loc 1 87 1 is_stmt 1 view .LVU2
  88:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
  89:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** TX_THREAD       *thread_ptr;
  41              		.loc 1 89 1 view .LVU3
  90:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #endif
  91:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  92:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  93:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Default status to success.  */
  94:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     status =  TX_SUCCESS;
  42              		.loc 1 94 5 view .LVU4
  43              	.LVL1:
  95:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
  96:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Check for an invalid byte pool pointer.  */
  97:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     if (pool_ptr == TX_NULL)
  44              		.loc 1 97 5 view .LVU5
  45              		.loc 1 97 8 is_stmt 0 view .LVU6
  46 0002 8446     		mov	ip, r0
  47 0004 60B3     		cbz	r0, .L6
  98:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
  99:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 100:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Byte pool pointer is invalid, return appropriate error code.  */
 101:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         status =  TX_POOL_ERROR;
 102:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 103:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 104:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Now check for invalid pool ID.  */
 105:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
  48              		.loc 1 105 10 is_stmt 1 view .LVU7
  49              		.loc 1 105 14 is_stmt 0 view .LVU8
  50 0006 1F48     		ldr	r0, .L18
  51              	.LVL2:
  52              		.loc 1 105 14 view .LVU9
  53 0008 DCF80040 		ldr	r4, [ip]
  54 000c 8442     		cmp	r4, r0
  55 000e 13D0     		beq	.L15
 106:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 107:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 108:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Byte pool pointer is invalid, return appropriate error code.  */
 109:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         status =  TX_POOL_ERROR;
  56              		.loc 1 109 16 view .LVU10
  57 0010 0220     		movs	r0, #2
  58              	.LVL3:
  59              	.L2:
 110:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 111:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 112:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Check for an invalid destination for return pointer.  */
 113:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     else if (memory_ptr == TX_NULL)
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 4


 114:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 115:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 116:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Null destination pointer, return appropriate error.  */
 117:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         status =  TX_PTR_ERROR;
 118:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 119:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 120:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Check for an invalid memory size.  */
 121:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     else if (memory_size == ((ULONG) 0))
 122:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 123:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 124:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Error in size, return appropriate error.  */
 125:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         status =  TX_SIZE_ERROR;
 126:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 127:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 128:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Determine if the size is greater than the pool size.  */
 129:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     else if (memory_size > pool_ptr -> tx_byte_pool_size)
 130:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 131:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 132:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Error in size, return appropriate error.  */
 133:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         status =  TX_SIZE_ERROR;
 134:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 135:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 136:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     else
 137:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 138:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 139:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Check for a wait option error.  Only threads are allowed any form of
 140:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****            suspension.  */
 141:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         if (wait_option != TX_NO_WAIT)
 142:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         {
 143:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 144:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             /* Is call from ISR or Initialization?  */
 145:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 146:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             {
 147:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 148:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****                 /* A non-thread is trying to suspend, return appropriate error code.  */
 149:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****                 status =  TX_WAIT_ERROR;
 150:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             }
 151:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         }
 152:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 153:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
 154:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 155:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Check for timer execution.  */
 156:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     if (status == TX_SUCCESS)
 157:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 158:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 159:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Pickup thread pointer.  */
 160:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         TX_THREAD_GET_CURRENT(thread_ptr)
 161:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 162:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Check for invalid caller of this function.  First check for a calling thread.  */
 163:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         if (thread_ptr == &_tx_timer_thread)
 164:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         {
 165:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 166:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             /* Invalid caller of this function, return appropriate error code.  */
 167:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             status =  TX_CALLER_ERROR;
 168:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         }
 169:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 170:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** #endif
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 5


 171:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 172:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Is everything still okay?  */
 173:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     if (status == TX_SUCCESS)
  60              		.loc 1 173 5 is_stmt 1 view .LVU11
  61              		.loc 1 173 8 is_stmt 0 view .LVU12
  62 0012 78B9     		cbnz	r0, .L4
 174:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 175:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 176:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Check for interrupt call.  */
 177:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
  63              		.loc 1 177 9 is_stmt 1 view .LVU13
  64              	.LBB8:
  65              	.LBI8:
  66              		.file 2 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 6


  44:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 7


 101:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 8


 158:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 9


 215:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 10


 272:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 11


 329:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 12


 386:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 13


 443:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
  67              		.loc 2 474 63 view .LVU14
  68              	.LBB9:
 475:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
  69              		.loc 2 476 1 view .LVU15
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
  70              		.loc 2 477 5 view .LVU16
  71              		.syntax unified
  72              	@ 477 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  73 0014 EFF3058E 		 MRS  lr,IPSR 
  74              	@ 0 "" 2
  75              	.LVL4:
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
  76              		.loc 2 478 5 view .LVU17
  77              		.loc 2 478 5 is_stmt 0 view .LVU18
  78              		.thumb
  79              		.syntax unified
  80              	.LBE9:
  81              	.LBE8:
  82              		.loc 1 177 13 view .LVU19
  83 0018 1B4C     		ldr	r4, .L18+4
  84 001a 2468     		ldr	r4, [r4]
  85              		.loc 1 177 12 view .LVU20
  86 001c 54EA0E04 		orrs	r4, r4, lr
  87 0020 08D0     		beq	.L4
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 14


 178:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         {
 179:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 180:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             /* Now, make sure the call is from an interrupt and not initialization.  */
 181:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
  88              		.loc 1 181 13 is_stmt 1 view .LVU21
  89              	.LBB10:
  90              	.LBI10:
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  91              		.loc 2 474 63 view .LVU22
  92              	.LBB11:
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
  93              		.loc 2 476 1 view .LVU23
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
  94              		.loc 2 477 5 view .LVU24
  95              		.syntax unified
  96              	@ 477 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  97 0022 EFF3058E 		 MRS  lr,IPSR 
  98              	@ 0 "" 2
  99              	.LVL5:
 100              		.loc 2 478 5 view .LVU25
 101              		.loc 2 478 5 is_stmt 0 view .LVU26
 102              		.thumb
 103              		.syntax unified
 104              	.LBE11:
 105              	.LBE10:
 106              		.loc 1 181 17 view .LVU27
 107 0026 184C     		ldr	r4, .L18+4
 108 0028 2468     		ldr	r4, [r4]
 109 002a 44EA0E04 		orr	r4, r4, lr
 110              		.loc 1 181 16 view .LVU28
 111 002e B4F1F03F 		cmp	r4, #-252645136
 112 0032 25D3     		bcc	.L16
 113              	.LVL6:
 114              	.L4:
 182:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             {
 183:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 184:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****                 /* Invalid caller of this function, return appropriate error code.  */
 185:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****                 status =  TX_CALLER_ERROR;
 186:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             }
 187:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         }
 188:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 189:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 190:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Determine if everything is okay.  */
 191:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     if (status == TX_SUCCESS)
 115              		.loc 1 191 5 is_stmt 1 view .LVU29
 116              		.loc 1 191 8 is_stmt 0 view .LVU30
 117 0034 00B3     		cbz	r0, .L17
 118              	.LVL7:
 119              	.L1:
 192:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 193:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 194:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         /* Call actual byte memory allocate function.  */
 195:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 196:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 197:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 198:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     /* Return completion status.  */
 199:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     return(status);
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 15


 200:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** }
 120              		.loc 1 200 1 view .LVU31
 121 0036 10BD     		pop	{r4, pc}
 122              	.LVL8:
 123              	.L15:
 113:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 124              		.loc 1 113 10 is_stmt 1 view .LVU32
 113:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 125              		.loc 1 113 13 is_stmt 0 view .LVU33
 126 0038 A1B1     		cbz	r1, .L8
 121:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 127              		.loc 1 121 10 is_stmt 1 view .LVU34
 121:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 128              		.loc 1 121 13 is_stmt 0 view .LVU35
 129 003a AAB1     		cbz	r2, .L9
 129:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 130              		.loc 1 129 10 is_stmt 1 view .LVU36
 129:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 131              		.loc 1 129 37 is_stmt 0 view .LVU37
 132 003c DCF81C00 		ldr	r0, [ip, #28]
 129:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     {
 133              		.loc 1 129 13 view .LVU38
 134 0040 9042     		cmp	r0, r2
 135 0042 13D3     		bcc	.L10
 141:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         {
 136              		.loc 1 141 9 is_stmt 1 view .LVU39
 141:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         {
 137              		.loc 1 141 12 is_stmt 0 view .LVU40
 138 0044 2BB1     		cbz	r3, .L3
 145:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             {
 139              		.loc 1 145 13 is_stmt 1 view .LVU41
 140              	.LBB12:
 141              	.LBI12:
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 142              		.loc 2 474 63 view .LVU42
 143              	.LBB13:
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 144              		.loc 2 476 1 view .LVU43
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 145              		.loc 2 477 5 view .LVU44
 146              		.syntax unified
 147              	@ 477 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 148 0046 EFF30580 		 MRS  r0,IPSR 
 149              	@ 0 "" 2
 150              	.LVL9:
 151              		.loc 2 478 5 view .LVU45
 152              		.loc 2 478 5 is_stmt 0 view .LVU46
 153              		.thumb
 154              		.syntax unified
 155              	.LBE13:
 156              	.LBE12:
 145:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             {
 157              		.loc 1 145 17 view .LVU47
 158 004a 0F4C     		ldr	r4, .L18+4
 159 004c 2468     		ldr	r4, [r4]
 145:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             {
 160              		.loc 1 145 16 view .LVU48
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 16


 161 004e 2043     		orrs	r0, r4, r0
 162 0050 0ED1     		bne	.L11
 163              	.L3:
 164              	.LVL10:
 160:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** 
 165              		.loc 1 160 9 is_stmt 1 view .LVU49
 166 0052 0E48     		ldr	r0, .L18+8
 167 0054 0468     		ldr	r4, [r0]
 168              	.LVL11:
 163:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         {
 169              		.loc 1 163 9 view .LVU50
 163:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         {
 170              		.loc 1 163 12 is_stmt 0 view .LVU51
 171 0056 0E48     		ldr	r0, .L18+12
 172 0058 8442     		cmp	r4, r0
 173 005a 0BD0     		beq	.L12
 174 005c 0020     		movs	r0, #0
 175 005e D8E7     		b	.L2
 176              	.LVL12:
 177              	.L6:
 101:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 178              		.loc 1 101 16 view .LVU52
 179 0060 0220     		movs	r0, #2
 180              	.LVL13:
 101:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 181              		.loc 1 101 16 view .LVU53
 182 0062 D6E7     		b	.L2
 183              	.L8:
 117:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 184              		.loc 1 117 16 view .LVU54
 185 0064 0320     		movs	r0, #3
 186 0066 D4E7     		b	.L2
 187              	.L9:
 125:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 188              		.loc 1 125 16 view .LVU55
 189 0068 0520     		movs	r0, #5
 190 006a D2E7     		b	.L2
 191              	.L10:
 133:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 192              		.loc 1 133 16 view .LVU56
 193 006c 0520     		movs	r0, #5
 194 006e D0E7     		b	.L2
 195              	.L11:
 149:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             }
 196              		.loc 1 149 24 view .LVU57
 197 0070 0420     		movs	r0, #4
 198 0072 CEE7     		b	.L2
 199              	.LVL14:
 200              	.L12:
 167:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****         }
 201              		.loc 1 167 20 view .LVU58
 202 0074 1320     		movs	r0, #19
 203 0076 DDE7     		b	.L4
 204              	.LVL15:
 205              	.L17:
 195:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 206              		.loc 1 195 9 is_stmt 1 view .LVU59
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 17


 195:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 207              		.loc 1 195 19 is_stmt 0 view .LVU60
 208 0078 6046     		mov	r0, ip
 209              	.LVL16:
 195:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 210              		.loc 1 195 19 view .LVU61
 211 007a FFF7FEFF 		bl	_tx_byte_allocate
 212              	.LVL17:
 195:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****     }
 213              		.loc 1 195 19 view .LVU62
 214 007e DAE7     		b	.L1
 215              	.LVL18:
 216              	.L16:
 185:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c ****             }
 217              		.loc 1 185 24 view .LVU63
 218 0080 1320     		movs	r0, #19
 219              	.LVL19:
 199:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** }
 220              		.loc 1 199 5 is_stmt 1 view .LVU64
 199:./Middlewares/ST/threadx/common/src/txe_byte_allocate.c **** }
 221              		.loc 1 199 11 is_stmt 0 view .LVU65
 222 0082 D8E7     		b	.L1
 223              	.L19:
 224              		.align	2
 225              	.L18:
 226 0084 45545942 		.word	1113150533
 227 0088 00000000 		.word	_tx_thread_system_state
 228 008c 00000000 		.word	_tx_thread_current_ptr
 229 0090 00000000 		.word	_tx_timer_thread
 230              		.cfi_endproc
 231              	.LFE8:
 233              		.text
 234              	.Letext0:
 235              		.file 3 "./Middlewares/ST/threadx/common/inc/tx_api.h"
 236              		.file 4 "./Middlewares/ST/threadx/common/inc/tx_thread.h"
 237              		.file 5 "./Middlewares/ST/threadx/common/inc/tx_timer.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s 			page 18


DEFINED SYMBOLS
                            *ABS*:00000000 txe_byte_allocate.c
C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s:20     .text._txe_byte_allocate:00000000 $t
C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s:26     .text._txe_byte_allocate:00000000 _txe_byte_allocate
C:\Users\Dennis\AppData\Local\Temp\cca2jrFK.s:226    .text._txe_byte_allocate:00000084 $d

UNDEFINED SYMBOLS
_tx_byte_allocate
_tx_thread_system_state
_tx_thread_current_ptr
_tx_timer_thread
