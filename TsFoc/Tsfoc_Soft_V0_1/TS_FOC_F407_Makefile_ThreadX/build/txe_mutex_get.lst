ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"txe_mutex_get.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._txe_mutex_get,"ax",%progbits
  20              		.align	1
  21              		.global	_txe_mutex_get
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_txe_mutex_get:
  27              	.LVL0:
  28              	.LFB8:
  29              		.file 1 "./Middlewares/ST/threadx/common/src/txe_mutex_get.c"
   1:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**************************************************************************/
   2:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
   3:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
   5:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  10:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**************************************************************************/
  11:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  12:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  13:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**************************************************************************/
  14:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**************************************************************************/
  15:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**                                                                       */
  16:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**                                                                       */
  18:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**   Mutex                                                               */
  19:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**                                                                       */
  20:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**************************************************************************/
  21:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**************************************************************************/
  22:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  23:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #define TX_SOURCE_CODE
  24:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  25:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  26:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /* Include necessary system files.  */
  27:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  28:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #include "tx_api.h"
  29:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #include "tx_initialize.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 2


  30:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #include "tx_thread.h"
  31:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
  32:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #include "tx_timer.h"
  33:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #endif
  34:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #include "tx_mutex.h"
  35:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  36:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  37:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**************************************************************************/
  38:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  39:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  FUNCTION                                               RELEASE        */
  40:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  41:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    _txe_mutex_get                                      PORTABLE C      */
  42:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                           6.1          */
  43:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  AUTHOR                                                                */
  44:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  45:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    William E. Lamie, Microsoft Corporation                             */
  46:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  47:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  DESCRIPTION                                                           */
  48:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  49:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    This function checks for errors in the mutex get function call.     */
  50:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  51:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  INPUT                                                                 */
  52:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  53:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    mutex_ptr                         Pointer to mutex control block    */
  54:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    wait_option                       Suspension option                 */
  55:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  56:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  OUTPUT                                                                */
  57:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  58:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    TX_MUTEX_ERROR                    Invalid mutex pointer             */
  59:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    TX_WAIT_ERROR                     Invalid wait option               */
  60:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    status                            Actual completion status          */
  61:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  62:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  CALLS                                                                 */
  63:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  64:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    _tx_mutex_get                     Actual get mutex function         */
  65:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  66:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  CALLED BY                                                             */
  67:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  68:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    Application Code                                                    */
  69:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  70:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  RELEASE HISTORY                                                       */
  71:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  72:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*    DATE              NAME                      DESCRIPTION             */
  73:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  74:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  75:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  76:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                            resulting in version 6.1    */
  77:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /*                                                                        */
  78:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** /**************************************************************************/
  79:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
  80:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** {
  30              		.loc 1 80 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 80 1 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 3


  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
  81:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  82:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** UINT            status;
  40              		.loc 1 82 1 is_stmt 1 view .LVU2
  83:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
  84:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** TX_THREAD       *current_thread;
  41              		.loc 1 84 1 view .LVU3
  85:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #endif
  86:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  87:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  88:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     /* Default status to success.  */
  89:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     status =  TX_SUCCESS;
  42              		.loc 1 89 5 view .LVU4
  43              	.LVL1:
  90:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  91:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     /* Check for an invalid mutex pointer.  */
  92:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     if (mutex_ptr == TX_NULL)
  44              		.loc 1 92 5 view .LVU5
  45              		.loc 1 92 8 is_stmt 0 view .LVU6
  46 0002 0246     		mov	r2, r0
  47 0004 10B3     		cbz	r0, .L5
  93:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     {
  94:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  95:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         /* Mutex pointer is invalid, return appropriate error code.  */
  96:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         status =  TX_MUTEX_ERROR;
  97:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
  98:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  99:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     /* Now check for a valid mutex ID.  */
 100:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
  48              		.loc 1 100 10 is_stmt 1 view .LVU7
  49              		.loc 1 100 24 is_stmt 0 view .LVU8
  50 0006 0068     		ldr	r0, [r0]
  51              	.LVL2:
  52              		.loc 1 100 13 view .LVU9
  53 0008 164B     		ldr	r3, .L13
  54 000a 9842     		cmp	r0, r3
  55 000c 02D0     		beq	.L11
 101:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     {
 102:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 103:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         /* Mutex pointer is invalid, return appropriate error code.  */
 104:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         status =  TX_MUTEX_ERROR;
  56              		.loc 1 104 16 view .LVU10
  57 000e 1C20     		movs	r0, #28
  58              	.LVL3:
  59              	.L2:
 105:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
 106:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     else
 107:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     {
 108:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 109:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         /* Check for a wait option error.  Only threads are allowed any form of
 110:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****            suspension.  */
 111:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         if (wait_option != TX_NO_WAIT)
 112:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         {
 113:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 4


 114:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             /* Is the call from an ISR or Initialization?  */
 115:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 116:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             {
 117:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 118:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 /* A non-thread is trying to suspend, return appropriate error code.  */
 119:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 status =  TX_WAIT_ERROR;
 120:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             }
 121:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 122:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
 123:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             else
 124:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             {
 125:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 126:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 /* Pickup thread pointer.  */
 127:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 TX_THREAD_GET_CURRENT(current_thread)
 128:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 129:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 /* Is the current thread the timer thread?  */
 130:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 if (current_thread == &_tx_timer_thread)
 131:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 {
 132:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 133:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                     /* A non-thread is trying to suspend, return appropriate error code.  */
 134:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                     status =  TX_WAIT_ERROR;
 135:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 }
 136:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             }
 137:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** #endif
 138:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         }
 139:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
 140:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 141:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     /* Determine if everything is okay.  */
 142:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     if (status == TX_SUCCESS)
 143:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     {
 144:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 145:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         /* Check for interrupt call.  */
 146:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 147:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         {
 148:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 149:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             /* Now, make sure the call is from an interrupt and not initialization.  */
 150:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 151:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             {
 152:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 153:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 /* Yes, invalid caller of this function, return appropriate error code.  */
 154:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 status =  TX_CALLER_ERROR;
 155:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             }
 156:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         }
 157:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
 158:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 159:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     /* Determine if everything is okay.  */
 160:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     if (status == TX_SUCCESS)
  60              		.loc 1 160 5 is_stmt 1 view .LVU11
  61              		.loc 1 160 8 is_stmt 0 view .LVU12
  62 0010 10B3     		cbz	r0, .L12
  63              	.LVL4:
  64              	.L1:
 161:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     {
 162:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 163:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         /* Call actual get mutex function.  */
 164:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         status =  _tx_mutex_get(mutex_ptr, wait_option);
 165:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 5


 166:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
 167:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     /* Return completion status.  */
 168:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     return(status);
 169:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** }
  65              		.loc 1 169 1 view .LVU13
  66 0012 08BD     		pop	{r3, pc}
  67              	.LVL5:
  68              	.L11:
 111:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         {
  69              		.loc 1 111 9 is_stmt 1 view .LVU14
 111:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         {
  70              		.loc 1 111 12 is_stmt 0 view .LVU15
  71 0014 51B1     		cbz	r1, .L3
 115:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             {
  72              		.loc 1 115 13 is_stmt 1 view .LVU16
  73              	.LBB8:
  74              	.LBI8:
  75              		.file 2 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 6


  40:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 7


  97:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 8


 154:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 9


 211:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 10


 268:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 11


 325:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 12


 382:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 13


 439:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
  76              		.loc 2 474 63 view .LVU17
  77              	.LBB9:
 475:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
  78              		.loc 2 476 1 view .LVU18
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
  79              		.loc 2 477 5 view .LVU19
  80              		.syntax unified
  81              	@ 477 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  82 0016 EFF30583 		 MRS  r3,IPSR 
  83              	@ 0 "" 2
  84              	.LVL6:
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
  85              		.loc 2 478 5 view .LVU20
  86              		.loc 2 478 5 is_stmt 0 view .LVU21
  87              		.thumb
  88              		.syntax unified
  89              	.LBE9:
  90              	.LBE8:
 115:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             {
  91              		.loc 1 115 17 view .LVU22
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 14


  92 001a 1348     		ldr	r0, .L13+4
  93 001c 0068     		ldr	r0, [r0]
 115:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             {
  94              		.loc 1 115 16 view .LVU23
  95 001e 0343     		orrs	r3, r0, r3
  96 0020 16D1     		bne	.L7
 127:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** 
  97              		.loc 1 127 17 is_stmt 1 view .LVU24
  98 0022 124B     		ldr	r3, .L13+8
  99 0024 1868     		ldr	r0, [r3]
 100              	.LVL7:
 130:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 {
 101              		.loc 1 130 17 view .LVU25
 130:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 {
 102              		.loc 1 130 20 is_stmt 0 view .LVU26
 103 0026 124B     		ldr	r3, .L13+12
 104 0028 9842     		cmp	r0, r3
 105 002a 13D0     		beq	.L8
 106              	.LVL8:
 107              	.L3:
 146:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         {
 108              		.loc 1 146 9 is_stmt 1 view .LVU27
 109              	.LBB10:
 110              	.LBI10:
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 111              		.loc 2 474 63 view .LVU28
 112              	.LBB11:
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 113              		.loc 2 476 1 view .LVU29
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 114              		.loc 2 477 5 view .LVU30
 115              		.syntax unified
 116              	@ 477 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 117 002c EFF30580 		 MRS  r0,IPSR 
 118              	@ 0 "" 2
 119              	.LVL9:
 120              		.loc 2 478 5 view .LVU31
 121              		.loc 2 478 5 is_stmt 0 view .LVU32
 122              		.thumb
 123              		.syntax unified
 124              	.LBE11:
 125              	.LBE10:
 146:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         {
 126              		.loc 1 146 13 view .LVU33
 127 0030 0D4B     		ldr	r3, .L13+4
 128 0032 1B68     		ldr	r3, [r3]
 146:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****         {
 129              		.loc 1 146 12 view .LVU34
 130 0034 1843     		orrs	r0, r0, r3
 131 0036 EBD0     		beq	.L2
 150:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             {
 132              		.loc 1 150 13 is_stmt 1 view .LVU35
 133              	.LBB12:
 134              	.LBI12:
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 135              		.loc 2 474 63 view .LVU36
 136              	.LBB13:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 15


 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 137              		.loc 2 476 1 view .LVU37
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 138              		.loc 2 477 5 view .LVU38
 139              		.syntax unified
 140              	@ 477 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 141 0038 EFF30580 		 MRS  r0,IPSR 
 142              	@ 0 "" 2
 143              	.LVL10:
 144              		.loc 2 478 5 view .LVU39
 145              		.loc 2 478 5 is_stmt 0 view .LVU40
 146              		.thumb
 147              		.syntax unified
 148              	.LBE13:
 149              	.LBE12:
 150:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             {
 150              		.loc 1 150 17 view .LVU41
 151 003c 0A4B     		ldr	r3, .L13+4
 152 003e 1B68     		ldr	r3, [r3]
 153 0040 0343     		orrs	r3, r3, r0
 150:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             {
 154              		.loc 1 150 16 view .LVU42
 155 0042 B3F1F03F 		cmp	r3, #-252645136
 156 0046 0BD3     		bcc	.L9
 157 0048 0020     		movs	r0, #0
 158 004a E1E7     		b	.L2
 159              	.LVL11:
 160              	.L5:
  96:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
 161              		.loc 1 96 16 view .LVU43
 162 004c 1C20     		movs	r0, #28
 163              	.LVL12:
  96:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
 164              		.loc 1 96 16 view .LVU44
 165 004e DFE7     		b	.L2
 166              	.L7:
 119:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             }
 167              		.loc 1 119 24 view .LVU45
 168 0050 0420     		movs	r0, #4
 169 0052 DDE7     		b	.L2
 170              	.LVL13:
 171              	.L8:
 134:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 }
 172              		.loc 1 134 28 view .LVU46
 173 0054 0420     		movs	r0, #4
 174              	.LVL14:
 134:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****                 }
 175              		.loc 1 134 28 view .LVU47
 176 0056 DBE7     		b	.L2
 177              	.LVL15:
 178              	.L12:
 164:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
 179              		.loc 1 164 9 is_stmt 1 view .LVU48
 164:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
 180              		.loc 1 164 19 is_stmt 0 view .LVU49
 181 0058 1046     		mov	r0, r2
 182              	.LVL16:
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 16


 164:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
 183              		.loc 1 164 19 view .LVU50
 184 005a FFF7FEFF 		bl	_tx_mutex_get
 185              	.LVL17:
 164:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****     }
 186              		.loc 1 164 19 view .LVU51
 187 005e D8E7     		b	.L1
 188              	.LVL18:
 189              	.L9:
 154:./Middlewares/ST/threadx/common/src/txe_mutex_get.c ****             }
 190              		.loc 1 154 24 view .LVU52
 191 0060 1320     		movs	r0, #19
 192              	.LVL19:
 168:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** }
 193              		.loc 1 168 5 is_stmt 1 view .LVU53
 168:./Middlewares/ST/threadx/common/src/txe_mutex_get.c **** }
 194              		.loc 1 168 11 is_stmt 0 view .LVU54
 195 0062 D6E7     		b	.L1
 196              	.L14:
 197              		.align	2
 198              	.L13:
 199 0064 4554554D 		.word	1297437765
 200 0068 00000000 		.word	_tx_thread_system_state
 201 006c 00000000 		.word	_tx_thread_current_ptr
 202 0070 00000000 		.word	_tx_timer_thread
 203              		.cfi_endproc
 204              	.LFE8:
 206              		.text
 207              	.Letext0:
 208              		.file 3 "./Middlewares/ST/threadx/common/inc/tx_api.h"
 209              		.file 4 "./Middlewares/ST/threadx/common/inc/tx_thread.h"
 210              		.file 5 "./Middlewares/ST/threadx/common/inc/tx_timer.h"
ARM GAS  C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s 			page 17


DEFINED SYMBOLS
                            *ABS*:00000000 txe_mutex_get.c
C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s:20     .text._txe_mutex_get:00000000 $t
C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s:26     .text._txe_mutex_get:00000000 _txe_mutex_get
C:\Users\Dennis\AppData\Local\Temp\cc1Ti8yr.s:199    .text._txe_mutex_get:00000064 $d

UNDEFINED SYMBOLS
_tx_mutex_get
_tx_thread_system_state
_tx_thread_current_ptr
_tx_timer_thread
