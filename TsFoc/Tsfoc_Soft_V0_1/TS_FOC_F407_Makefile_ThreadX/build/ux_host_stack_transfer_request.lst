ARM GAS  /tmp/ccGXhZAu.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"ux_host_stack_transfer_request.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c"
  20              		.section	.text._ux_host_stack_transfer_request,"ax",%progbits
  21              		.align	1
  22              		.global	_ux_host_stack_transfer_request
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	_ux_host_stack_transfer_request:
  28              	.LVL0:
  29              	.LFB11:
   1:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
   2:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
   3:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
   5:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  10:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  11:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  12:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  13:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  14:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  15:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**                                                                       */ 
  16:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /** USBX Component                                                        */ 
  17:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**                                                                       */
  18:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**   Host Stack                                                          */
  19:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**                                                                       */
  20:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  21:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  22:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  23:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  24:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /* Include necessary system files.  */
  25:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  26:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #define UX_SOURCE_CODE
  27:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  28:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #include "ux_api.h"
  29:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #include "ux_host_stack.h"
ARM GAS  /tmp/ccGXhZAu.s 			page 2


  30:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  31:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  32:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/ 
  33:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  34:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  FUNCTION                                               RELEASE        */ 
  35:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  36:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    _ux_host_stack_transfer_request                     PORTABLE C      */ 
  37:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                           6.1.10       */
  38:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  AUTHOR                                                                */
  39:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  40:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    Chaoqiong Xiao, Microsoft Corporation                               */
  41:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  42:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  DESCRIPTION                                                           */
  43:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  44:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    This function performs a USB transaction. On entry the transfer     */ 
  45:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    request gives the endpoint pipe selected for this transaction and   */ 
  46:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    the parameters associated with the transfer (data payload, length   */ 
  47:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    of transaction)                                                     */
  48:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  49:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    For Control pipe, the transaction is blocking and will only return  */ 
  50:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    when the 3 phases of the control transfer have been completed or if */ 
  51:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    there is a previous error. For other pipes, the USB stack will      */ 
  52:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    schedule the transaction on the USB but will not wait for its       */ 
  53:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    completion. Each request for non blocking pipes has to specify a    */ 
  54:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    completion routine.                                                 */
  55:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  56:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  INPUT                                                                 */ 
  57:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  58:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    transfer_request                      Transfer request structure    */ 
  59:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  60:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  OUTPUT                                                                */ 
  61:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  62:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    Completion Status                     If UX_SUCCESS, transfer was   */ 
  63:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            successfully started        */ 
  64:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  65:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  CALLS                                                                 */ 
  66:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  67:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    HCD Entry Function                                                  */ 
  68:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    _ux_utility_semaphore_put             Put semaphore                 */
  69:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    _ux_utility_semaphore_get             Get semaphore                 */
  70:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  71:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  CALLED BY                                                             */ 
  72:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  73:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    Application                                                         */ 
  74:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    USBX Components                                                     */ 
  75:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  76:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  RELEASE HISTORY                                                       */ 
  77:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  78:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    DATE              NAME                      DESCRIPTION             */ 
  79:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  80:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
  81:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
  82:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            optimized based on compile  */
  83:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            definitions, used UX prefix */
  84:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            to refer to TX symbols      */
  85:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            instead of using them       */
  86:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            directly,                   */
ARM GAS  /tmp/ccGXhZAu.s 			page 3


  87:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            resulting in version 6.1    */
  88:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
  89:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            added standalone support,   */
  90:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            resulting in version 6.1.10 */
  91:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  92:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  93:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UINT  _ux_host_stack_transfer_request(UX_TRANSFER *transfer_request)
  94:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** {
  30              		.loc 1 94 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 94 1 is_stmt 0 view .LVU1
  35 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38              		.cfi_offset 4, -24
  39              		.cfi_offset 5, -20
  40              		.cfi_offset 6, -16
  41              		.cfi_offset 7, -12
  42              		.cfi_offset 8, -8
  43              		.cfi_offset 14, -4
  95:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #if defined(UX_HOST_STANDALONE)
  96:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UINT        status;
  97:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  98:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     UX_TRANSFER_STATE_RESET(transfer_request);
  99:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     _ux_host_stack_transfer_run(transfer_request);
 100:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     if ((transfer_request -> ux_transfer_request_flags & UX_TRANSFER_FLAG_AUTO_WAIT))
 101:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 102:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         while(1)
 103:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 104:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 105:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             /* Allow tasks running during waiting.  */
 106:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             _ux_system_host_tasks_run();
 107:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 108:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             if (transfer_request -> ux_transfer_request_state <= UX_STATE_NEXT)
 109:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 break;
 110:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         }
 111:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         status = transfer_request -> ux_transfer_request_completion_code;
 112:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 113:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     else
 114:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 115:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 116:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* In this mode, transfer pending is a success started case.  */
 117:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         if (transfer_request -> ux_transfer_request_completion_code == UX_TRANSFER_STATUS_PENDING)
 118:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             status = UX_SUCCESS;
 119:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         else
 120:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             status = transfer_request -> ux_transfer_request_completion_code;
 121:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 122:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 123:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Return transfer completion status.  */
 124:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     return(status);
 125:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #else
 126:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UX_INTERRUPT_SAVE_AREA
  44              		.loc 1 126 1 is_stmt 1 view .LVU2
 127:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 128:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UX_ENDPOINT     *endpoint;  
ARM GAS  /tmp/ccGXhZAu.s 			page 4


  45              		.loc 1 128 1 view .LVU3
 129:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UX_DEVICE       *device;    
  46              		.loc 1 129 1 view .LVU4
 130:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UX_HCD          *hcd;
  47              		.loc 1 130 1 view .LVU5
 131:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UINT            status;
  48              		.loc 1 131 1 view .LVU6
 132:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 133:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 134:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Get the endpoint container from the transfer_request */
 135:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     endpoint =  transfer_request -> ux_transfer_request_endpoint;
  49              		.loc 1 135 5 view .LVU7
  50              		.loc 1 135 14 is_stmt 0 view .LVU8
  51 0004 4668     		ldr	r6, [r0, #4]
  52              	.LVL1:
 136:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 137:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Get the device container from the endpoint.  */
 138:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     device =  endpoint -> ux_endpoint_device;
  53              		.loc 1 138 5 is_stmt 1 view .LVU9
  54              		.loc 1 138 12 is_stmt 0 view .LVU10
  55 0006 F76A     		ldr	r7, [r6, #44]
  56              	.LVL2:
 139:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 140:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Ensure we are not preempted by the enum thread while we check the device 
 141:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****        state and set the transfer status.  */
 142:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     UX_DISABLE
  57              		.loc 1 142 5 is_stmt 1 view .LVU11
  58              	.LBB12:
  59              	.LBI12:
  60              		.file 2 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
ARM GAS  /tmp/ccGXhZAu.s 			page 5


  28:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
ARM GAS  /tmp/ccGXhZAu.s 			page 6


  85:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccGXhZAu.s 			page 7


 142:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
ARM GAS  /tmp/ccGXhZAu.s 			page 8


 199:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
ARM GAS  /tmp/ccGXhZAu.s 			page 9


 256:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
ARM GAS  /tmp/ccGXhZAu.s 			page 10


 313:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
ARM GAS  /tmp/ccGXhZAu.s 			page 11


 370:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
ARM GAS  /tmp/ccGXhZAu.s 			page 12


 427:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
ARM GAS  /tmp/ccGXhZAu.s 			page 13


 484:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 540:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccGXhZAu.s 			page 14


 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  61              		.loc 2 566 63 view .LVU12
  62              	.LBB13:
 567:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
  63              		.loc 2 568 1 view .LVU13
 569:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  64              		.loc 2 570 5 view .LVU14
  65              	.LBB14:
  66              	.LBI14:
 533:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  67              		.loc 2 533 63 view .LVU15
  68              	.LBB15:
 535:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  69              		.loc 2 535 1 view .LVU16
 539:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  70              		.loc 2 539 5 view .LVU17
  71              		.syntax unified
  72              	@ 539 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  73 0008 EFF31085 		MRS  r5, PRIMASK 
  74              	@ 0 "" 2
  75              	.LVL3:
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  76              		.loc 2 541 5 view .LVU18
 541:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  77              		.loc 2 541 5 is_stmt 0 view .LVU19
  78              		.thumb
  79              		.syntax unified
  80              	.LBE15:
  81              	.LBE14:
 571:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccGXhZAu.s 			page 15


 572:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  82              		.loc 2 575 5 is_stmt 1 view .LVU20
  83              		.syntax unified
  84              	@ 575 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  85 000c 72B6     		CPSID i
  86              	@ 0 "" 2
 576:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 577:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(int_posture);
  87              		.loc 2 577 5 view .LVU21
  88              	.LVL4:
  89              		.loc 2 577 5 is_stmt 0 view .LVU22
  90              		.thumb
  91              		.syntax unified
  92              	.LBE13:
  93              	.LBE12:
 143:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 144:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
 145:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     if ((device -> ux_device_state == UX_DEVICE_ATTACHED) || (device -> ux_device_state == UX_DEVIC
  94              		.loc 1 145 5 is_stmt 1 view .LVU23
  95              		.loc 1 145 17 is_stmt 0 view .LVU24
  96 000e BB68     		ldr	r3, [r7, #8]
 146:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             || (device -> ux_device_state == UX_DEVICE_CONFIGURED))
  97              		.loc 1 146 13 view .LVU25
  98 0010 013B     		subs	r3, r3, #1
 145:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             || (device -> ux_device_state == UX_DEVICE_CONFIGURED))
  99              		.loc 1 145 8 view .LVU26
 100 0012 022B     		cmp	r3, #2
 101 0014 1BD8     		bhi	.L2
 102 0016 0446     		mov	r4, r0
 147:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 148:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 149:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* Set the transfer to pending.  */
 150:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_STATUS_PENDING;
 103              		.loc 1 150 9 is_stmt 1 view .LVU27
 104              		.loc 1 150 65 is_stmt 0 view .LVU28
 105 0018 0123     		movs	r3, #1
 106 001a 4363     		str	r3, [r0, #52]
 151:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #if !defined(UX_HOST_STANDALONE)
 152:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* Save the thread making this transfer. If we're under interrupt, this
 153:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****            will be null.  */
 154:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         transfer_request -> ux_transfer_request_thread_pending =  _ux_utility_thread_identify();
 107              		.loc 1 154 9 is_stmt 1 view .LVU29
 108              		.loc 1 154 67 is_stmt 0 view .LVU30
 109 001c FFF7FEFF 		bl	_ux_utility_thread_identify
 110              	.LVL5:
 111              		.loc 1 154 64 discriminator 1 view .LVU31
 112 0020 2066     		str	r0, [r4, #96]
 155:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #endif
 156:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 157:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     else
 158:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 159:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 160:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* The device is in an invalid state. Restore interrupts and return error.  */
 161:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         UX_RESTORE
ARM GAS  /tmp/ccGXhZAu.s 			page 16


 162:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 163:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* Check if this is endpoint 0.  */
 164:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         if ((endpoint -> ux_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) ==
 165:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 166:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 167:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             /* Check if the class has already protected it.  */
 168:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             if (!_ux_host_semaphore_waiting(&device -> ux_device_protection_semaphore))
 169:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             {
 170:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 171:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 /* Class is using endpoint 0. Unprotect semaphore.  */
 172:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 _ux_host_semaphore_put(&device -> ux_device_protection_semaphore);
 173:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             }
 174:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         }
 175:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 176:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         return(UX_TRANSFER_NOT_READY);
 177:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 178:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 179:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Restore interrupts.  */
 180:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     UX_RESTORE
 113              		.loc 1 180 5 is_stmt 1 view .LVU32
 114              	.LVL6:
 115              	.LBB16:
 116              	.LBI16:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 117              		.loc 2 556 55 view .LVU33
 118              	.LBB17:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 119              		.loc 2 562 5 view .LVU34
 120              		.syntax unified
 121              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 122 0022 85F31088 		MSR  PRIMASK,r5
 123              	@ 0 "" 2
 124              	.LVL7:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125              		.loc 2 562 5 is_stmt 0 view .LVU35
 126              		.thumb
 127              		.syntax unified
 128              	.LBE17:
 129              	.LBE16:
 181:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 182:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 183:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_TRANSFER_REQUEST, device, endpoint, transfer_reques
 184:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 185:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* With the device we have the pointer to the HCD.  */
 186:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     hcd = UX_DEVICE_HCD_GET(device);
 130              		.loc 1 186 5 is_stmt 1 view .LVU36
 131              		.loc 1 186 9 is_stmt 0 view .LVU37
 132 0026 D7F81481 		ldr	r8, [r7, #276]
 133              	.LVL8:
 187:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 188:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* If this is endpoint 0, we protect the endpoint from a possible re-entry.  */
 189:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     if ((endpoint -> ux_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) == 0)
 134              		.loc 1 189 5 is_stmt 1 view .LVU38
 135              		.loc 1 189 44 is_stmt 0 view .LVU39
 136 002a 7369     		ldr	r3, [r6, #20]
 137              		.loc 1 189 8 view .LVU40
 138 002c 33F08003 		bics	r3, r3, #128
ARM GAS  /tmp/ccGXhZAu.s 			page 17


 139 0030 1CD0     		beq	.L3
 140              	.LVL9:
 141              	.L4:
 190:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 191:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 192:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* Check if the class has already protected it.  */
 193:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         if (_ux_host_semaphore_waiting(&device -> ux_device_protection_semaphore))        
 194:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 195:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 196:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             /* We are using endpoint 0. Protect with semaphore.  */
 197:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             status =  _ux_host_semaphore_get(&device -> ux_device_protection_semaphore, UX_WAIT_FOR
 198:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 199:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             /* Check for status.  */
 200:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             if (status != UX_SUCCESS)
 201:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             
 202:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 /* Something went wrong. */
 203:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 return(status);
 204:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         }        
 205:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }             
 206:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 207:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Send the command to the controller.  */    
 208:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     status =  hcd -> ux_hcd_entry_function(hcd, UX_HCD_TRANSFER_REQUEST, transfer_request);
 142              		.loc 1 208 5 is_stmt 1 view .LVU41
 143              		.loc 1 208 19 is_stmt 0 view .LVU42
 144 0032 D8F87030 		ldr	r3, [r8, #112]
 145              		.loc 1 208 15 view .LVU43
 146 0036 2246     		mov	r2, r4
 147 0038 0C21     		movs	r1, #12
 148 003a 4046     		mov	r0, r8
 149 003c 9847     		blx	r3
 150              	.LVL10:
 151 003e 0546     		mov	r5, r0
 152              	.LVL11:
 209:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 210:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* If this is endpoint 0, we unprotect the endpoint. */
 211:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     if ((endpoint -> ux_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) == 0)
 153              		.loc 1 211 5 is_stmt 1 view .LVU44
 154              		.loc 1 211 44 is_stmt 0 view .LVU45
 155 0040 7369     		ldr	r3, [r6, #20]
 156              		.loc 1 211 8 view .LVU46
 157 0042 33F08003 		bics	r3, r3, #128
 158 0046 1ED0     		beq	.L8
 159              	.LVL12:
 160              	.L1:
 212:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 213:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* We are using endpoint 0. Unprotect with semaphore.  */
 214:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         _ux_host_semaphore_put(&device -> ux_device_protection_semaphore);
 215:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 216:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* And return the status.  */
 217:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     return(status);
 218:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #endif
 219:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** }
 161              		.loc 1 219 1 view .LVU47
 162 0048 2846     		mov	r0, r5
 163 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 164              	.LVL13:
 165              	.L2:
ARM GAS  /tmp/ccGXhZAu.s 			page 18


 161:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 166              		.loc 1 161 9 is_stmt 1 view .LVU48
 167              	.LBB18:
 168              	.LBI18:
 556:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 169              		.loc 2 556 55 view .LVU49
 170              	.LBB19:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 171              		.loc 2 562 5 view .LVU50
 172              		.syntax unified
 173              	@ 562 "./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 174 004e 85F31088 		MSR  PRIMASK,r5
 175              	@ 0 "" 2
 176              	.LVL14:
 562:./Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 177              		.loc 2 562 5 is_stmt 0 view .LVU51
 178              		.thumb
 179              		.syntax unified
 180              	.LBE19:
 181              	.LBE18:
 164:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 182              		.loc 1 164 9 is_stmt 1 view .LVU52
 164:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 183              		.loc 1 164 48 is_stmt 0 view .LVU53
 184 0052 7369     		ldr	r3, [r6, #20]
 164:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 185              		.loc 1 164 12 view .LVU54
 186 0054 33F08003 		bics	r3, r3, #128
 187 0058 01D1     		bne	.L5
 168:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             {
 188              		.loc 1 168 13 is_stmt 1 view .LVU55
 168:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             {
 189              		.loc 1 168 18 is_stmt 0 view .LVU56
 190 005a 7B6A     		ldr	r3, [r7, #36]
 168:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             {
 191              		.loc 1 168 16 view .LVU57
 192 005c 0BB1     		cbz	r3, .L9
 193              	.LVL15:
 194              	.L5:
 176:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 195              		.loc 1 176 9 is_stmt 1 view .LVU58
 176:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 196              		.loc 1 176 15 is_stmt 0 view .LVU59
 197 005e 2525     		movs	r5, #37
 198              	.LVL16:
 176:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 199              		.loc 1 176 15 view .LVU60
 200 0060 F2E7     		b	.L1
 201              	.LVL17:
 202              	.L9:
 172:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             }
 203              		.loc 1 172 17 is_stmt 1 view .LVU61
 204 0062 07F11C00 		add	r0, r7, #28
 205              	.LVL18:
 172:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             }
 206              		.loc 1 172 17 is_stmt 0 view .LVU62
 207 0066 FFF7FEFF 		bl	_ux_utility_semaphore_put
ARM GAS  /tmp/ccGXhZAu.s 			page 19


 208              	.LVL19:
 209 006a F8E7     		b	.L5
 210              	.LVL20:
 211              	.L3:
 193:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 212              		.loc 1 193 9 is_stmt 1 view .LVU63
 193:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 213              		.loc 1 193 13 is_stmt 0 view .LVU64
 214 006c 7B6A     		ldr	r3, [r7, #36]
 193:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 215              		.loc 1 193 12 view .LVU65
 216 006e 002B     		cmp	r3, #0
 217 0070 DFD0     		beq	.L4
 197:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 218              		.loc 1 197 13 is_stmt 1 view .LVU66
 197:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 219              		.loc 1 197 23 is_stmt 0 view .LVU67
 220 0072 4FF0FF31 		mov	r1, #-1
 221 0076 07F11C00 		add	r0, r7, #28
 222 007a FFF7FEFF 		bl	_ux_utility_semaphore_get
 223              	.LVL21:
 200:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             
 224              		.loc 1 200 13 is_stmt 1 view .LVU68
 200:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             
 225              		.loc 1 200 16 is_stmt 0 view .LVU69
 226 007e 0546     		mov	r5, r0
 227              	.LVL22:
 200:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             
 228              		.loc 1 200 16 view .LVU70
 229 0080 0028     		cmp	r0, #0
 230 0082 D6D0     		beq	.L4
 231 0084 E0E7     		b	.L1
 232              	.L8:
 214:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 233              		.loc 1 214 9 is_stmt 1 view .LVU71
 234 0086 07F11C00 		add	r0, r7, #28
 235              	.LVL23:
 214:./Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 236              		.loc 1 214 9 is_stmt 0 view .LVU72
 237 008a FFF7FEFF 		bl	_ux_utility_semaphore_put
 238              	.LVL24:
 239 008e DBE7     		b	.L1
 240              		.cfi_endproc
 241              	.LFE11:
 243              		.text
 244              	.Letext0:
 245              		.file 3 "./Middlewares/ST/threadx/common/inc/tx_api.h"
 246              		.file 4 "./Middlewares/ST/usbx/common/core/inc/ux_api.h"
 247              		.file 5 "./Middlewares/ST/usbx/common/core/inc/ux_utility.h"
ARM GAS  /tmp/ccGXhZAu.s 			page 20


DEFINED SYMBOLS
                            *ABS*:00000000 ux_host_stack_transfer_request.c
     /tmp/ccGXhZAu.s:21     .text._ux_host_stack_transfer_request:00000000 $t
     /tmp/ccGXhZAu.s:27     .text._ux_host_stack_transfer_request:00000000 _ux_host_stack_transfer_request

UNDEFINED SYMBOLS
_ux_utility_thread_identify
_ux_utility_semaphore_put
_ux_utility_semaphore_get
